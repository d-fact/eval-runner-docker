/* Generated By:JavaCC: Do not edit this line. InterpTokenManager.java */
package ca.uwaterloo.cs.jgrok.interp;

@SuppressWarnings({"static-access", "unused"})
public class InterpTokenManager implements InterpConstants
{
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000000000000L) != 0L)
            return 0;
         if ((active0 & 0x40000800000000L) != 0L)
            return 6;
         if ((active0 & 0x1000007f0000L) != 0L || (active1 & 0x1ffL) != 0L)
         {
            jjmatchedKind = 74;
            return 35;
         }
         if ((active0 & 0x210000000000000L) != 0L)
            return 35;
         if ((active0 & 0x8000400000000000L) != 0L)
            return 13;
         return -1;
      case 1:
         if ((active0 & 0x100000010000L) != 0L || (active1 & 0x3L) != 0L)
            return 35;
         if ((active0 & 0x7e0000L) != 0L || (active1 & 0x1fcL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 74;
               jjmatchedPos = 1;
            }
            return 35;
         }
         return -1;
      case 2:
         if ((active0 & 0x7a0000L) != 0L || (active1 & 0x1e0L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
            return 35;
         }
         if ((active0 & 0x40000L) != 0L || (active1 & 0x1eL) != 0L)
            return 35;
         return -1;
      case 3:
         if ((active0 & 0x580000L) != 0L || (active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
            return 35;
         }
         if ((active0 & 0x220000L) != 0L || (active1 & 0x60L) != 0L)
            return 35;
         return -1;
      case 4:
         if ((active0 & 0x480000L) != 0L || (active1 & 0x80L) != 0L)
            return 35;
         if ((active0 & 0x100000L) != 0L || (active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 4;
            return 35;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0xa0000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 58);
      case 36:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 37:
         return jjStartNfaWithStates_0(0, 55, 0);
      case 38:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 26);
      case 41:
         return jjStopAtPos(0, 27);
      case 42:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x1000400000000L, 0x0L);
      case 43:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 23);
      case 45:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L);
      case 46:
         return jjStopAtPos(0, 56);
      case 47:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 58:
         return jjStopAtPos(0, 24);
      case 59:
         return jjStopAtPos(0, 25);
      case 60:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 61:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x44000000000L, 0x0L);
      case 62:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x1000000c000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 59);
      case 88:
         return jjStartNfaWithStates_0(0, 57, 35);
      case 91:
         return jjStopAtPos(0, 30);
      case 93:
         return jjStopAtPos(0, 31);
      case 94:
         return jjStopAtPos(0, 51);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x104L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x50L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x440000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100000010000L, 0x3L);
      case 111:
         return jjStartNfaWithStates_0(0, 52, 35);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 28);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 29);
      case 126:
         return jjStopAtPos(0, 61);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 38:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      case 42:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      case 61:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 62:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 100:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 64, 35);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0x100L);
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 35);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1aL);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L);
      case 124:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 126:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(2, 15);
         break;
      case 103:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 35);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0xe0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x100L);
      case 109:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 35);
         break;
      case 114:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 35);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0L);
      case 118:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 65, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 35);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 35);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 35);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 35);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 35);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L, active1, 0L);
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 35);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 35);
         break;
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                     jjCheckNAdd(15);
                  }
                  else if ((0x1000800000000L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 45)
                     jjAddStates(0, 1);
                  break;
               case 5:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddStates(2, 4);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  else if (curChar == 38)
                     jjAddStates(8, 10);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 37)
                     jjstateSet[jjnewStateCnt++] = 0;
                  else if (curChar == 63)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  break;
               case 0:
                  if (curChar == 37)
                     jjCheckNAddStates(11, 13);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 47)
                     jjCheckNAddStates(14, 16);
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 9:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 12:
                  if (curChar == 38)
                     jjAddStates(8, 10);
                  break;
               case 14:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 45)
                     jjAddStates(0, 1);
                  break;
               case 17:
                  if (curChar == 48 && kind > 9)
                     kind = 9;
                  break;
               case 18:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar == 34)
                     jjCheckNAddStates(5, 7);
                  break;
               case 21:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 23:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 24:
                  if (curChar == 34 && kind > 12)
                     kind = 12;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 27:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 33:
                  if (curChar == 63 && kind > 73)
                     kind = 73;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if (curChar != 48)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if (curChar == 46)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(2, 4);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 37);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                     jjCheckNAdd(35);
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 1:
                  jjAddStates(11, 13);
                  break;
               case 7:
                  jjAddStates(14, 16);
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 22:
                  if (curChar == 92)
                     jjAddStates(21, 23);
                  break;
               case 23:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 29:
                  if (curChar == 112 && kind > 73)
                     kind = 73;
                  break;
               case 30:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 13);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(14, 16);
                  break;
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   17, 18, 40, 41, 37, 21, 22, 24, 13, 14, 16, 1, 2, 4, 7, 8, 
   10, 21, 22, 26, 24, 23, 25, 27, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\44\43", "\76\76", "\76\76\76", "\151\146", "\145\154\163\145", "\146\157\162", 
"\167\150\151\154\145", "\162\145\164\165\162\156", "\164\162\165\145", "\146\141\154\163\145", "\54", 
"\72", "\73", "\50", "\51", "\173", "\175", "\133", "\135", "\53\75", "\55\75", 
"\52\75", "\57\75", "\76", "\74", "\75\75", "\74\75", "\76\75", "\41\75", "\75\176", 
"\41\176", "\151\156", "\174\174", "\46\46", "\41", "\52\52", "\53", "\55", "\136", 
"\157", "\52", "\57", "\45", "\56", "\130", "\43", "\100", "\75", "\176", "\44", 
"\46", "\151\144", "\151\156\166", "\144\157\155", "\162\156\147", "\145\156\164", 
"\161\165\151\164", "\145\170\151\164", "\160\162\151\156\164", "\144\145\154\145\164\145", null, 
null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0x7ffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
static private ASCII_CharStream input_stream;
static private final int[] jjrounds = new int[42];
static private final int[] jjstateSet = new int[84];
static protected char curChar;
public InterpTokenManager(ASCII_CharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public InterpTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 42; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while ((curChar < 64 && (0x100003600L & (1L << curChar)) != 0L) || 
             (curChar >> 6) == 1 && (0x10000000L & (1L << (curChar & 077))) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
