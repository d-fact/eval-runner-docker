/* Generated By:JavaCC: Do not edit this line. Interp.java */
package ca.uwaterloo.cs.jgrok.interp;

import java.io.*;
import java.util.*;

import ca.uwaterloo.cs.jgrok.env.Env;
import ca.uwaterloo.cs.jgrok.interp.select.*;

@SuppressWarnings({"static-access", "unused", "unchecked"})
public class Interp implements InterpConstants {
    static File file = null;
    static Interp interp = null;
    static ScriptUnitNode scriptUnit = null;

    private static InputStream in = System.in;
    private static PrintStream out = System.out;
    private static PrintStream err = System.err;

    /**
     * Constructs a command-line Interp.
     */
    public Interp() {
        this(System.in);
        interp = this;
    }

    /**
     * Constructs a script-file Interp, which
     * evaluates the specified <code>file</code>.
     */
    public Interp(File f) throws FileNotFoundException {
        this(new FileInputStream(f));
        file = f;
        interp = this;
    }

    public static Interp instance() {
        if(interp == null) {
            interp = new Interp();
        }
        return interp;
    }

    public static Interp reinit(File f) throws FileNotFoundException {
        if(interp != null) {
            file = f;
            interp.ReInit(new FileInputStream(f));
        } else {
            interp = new Interp(f);
        }

        return interp;
    }

    public ScriptUnitNode parse() {
        try {
            return ScriptUnit();
        }  catch(ParseException e) {
            err.println(e.getMessage());
        }
        return null;
    }

    /**
     * Bootstrap an Env with a given script.
     * After evaluation, the main ScriptUnit is not removed.
     */
    public void bootstrapEvaluate(Env env, String[] args) {
        try {
            in = env.in;
            out = env.out;
            err = env.err;

            Variable var;
            ScriptUnitNode unit = ScriptUnit();
            env.setMainUnit(unit);

            // Add $# (number of script args).
            var = new Variable(unit, "$#", new Value(args.length-1));
            unit.addVariable(var);

            // Add script args: $0 $1 $2 ...
            // The $0 is the script file.
            for(int i = 0; i < args.length; i++) {
                var = new Variable(unit, "$"+i, new Value(args[i]));
                unit.addVariable(var);
            }

            env.pushScope(unit);
            unit.evaluate(env);
        } catch(TokenMgrError e) {
            err.println(e.getMessage());
        } catch(ParseException e) {
            err.println(e.getMessage());
        } catch(EvaluationException e) {
            err.println(e.getMessage());
        }
    }

    public void fileEvaluate(Env env, String[] args) {
        try {
            Variable var;
            ScriptUnitNode unit = ScriptUnit();
            env.setMainUnit(unit);

            // Add $# (number of script args).
            var = new Variable(unit, "$#", new Value(args.length-1));
            unit.addVariable(var);

            // Add script args: $0 $1 $2 ...
            // The $0 is the script file.
            for(int i = 0; i < args.length; i++) {
                var = new Variable(unit, "$"+i, new Value(args[i]));
                unit.addVariable(var);
            }

            env.pushScope(unit);
            unit.evaluate(env);
            env.popScope();
        } catch(TokenMgrError e) {
            err.println(e.getMessage());
        } catch(ParseException e) {
            err.println(e.getMessage());
        } catch(EvaluationException e) {
            env.popScope();
            err.println(e.getMessage());
        }
    }

    static final Location getLocation(Token tok) {
        return new Location(file, tok.getLine(), tok.getColumn());
    }

    static final void setLocation(SyntaxTreeNode nd, Token tok) {
        nd.setLocation(getLocation(tok));
    }

    static final String processStringLiteral(String str) {
        char c;
        String s;
        StringBuffer b;

        b = new StringBuffer();
        s = str.substring(1, str.length()-1);
        for(int i = 0; i < s.length(); i++) {
            c = s.charAt(i);
            if(c == '\\') {
                i++;
                c = s.charAt(i);
                switch(c) {
                case '\\':
                    b.append('\\');
                    break;
                case '\"':
                    b.append('\"');
                    break;
                case '\'':
                    b.append('\'');
                    break;
                case 'b':
                    b.append('\b');
                    break;
                case 'f':
                    b.append('\f');
                    break;
                case 'n':
                    b.append('\n');
                    break;
                case 'r':
                    b.append('\r');
                    break;
                case 't':
                    b.append('\t');
                    break;
                default:
                    b.append('\\');
                    b.append(c);
                }
            } else {
                b.append(c);
            }
        }

        return b.toString();
    }

/*****************************************************************************
 * Script syntax.
 *****************************************************************************/
  static final public ScriptUnitNode ScriptUnit() throws ParseException {
    StatementNode stmt;
    ScriptUnitNode nd = new ScriptUnitNode();
    if(file != null) nd.setFile(file);
    setLocation(nd, getToken(1));
    scriptUnit = nd;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLUMN:
      case INT_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case ARGN:
      case IF:
      case FOR:
      case WHILE:
      case RETURN:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LBRACE:
      case NOT:
      case MINUS:
      case POUND:
      case ATTR:
      case TILDE:
      case DOLLAR:
      case op_id:
      case op_inv:
      case op_dom:
      case op_rng:
      case op_ent:
      case cmd_quit:
      case cmd_exit:
      case cmd_print:
      case cmd_delete:
      case cmd_help:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      stmt = Statement();
                       nd.addStatement(stmt);
    }
    jj_consume_token(0);
        scriptUnit = null;
        {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************************
 * Statement syntax follows.
 *****************************************************************************/
  static final public StatementNode Statement() throws ParseException {
    StatementNode nd;
    ExpressionNode exp;
    Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case FOR:
    case WHILE:
    case RETURN:
      nd = ControlStatement();
      break;
    case cmd_quit:
    case cmd_exit:
    case cmd_print:
    case cmd_delete:
    case cmd_help:
      nd = CommandStatement();
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2147483647)) {
        nd = PrologClause();
      } else if (jj_2_2(2147483647)) {
        nd = Assignment();
      } else if (jj_2_3(2147483647)) {
        exp = Expression();
        nd = new ExpStatementNode(exp);
        nd.setLocation(exp.getLocation());
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          nd = BlockStatement();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IOTOFILE:
    case IOAPPEND:
    case SEMICOLON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case IOTOFILE:
        jj_consume_token(IOTOFILE);
        if (jj_2_4(2147483647)) {
          exp = Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_la1[3] = jj_gen;
            ;
          }
            Location l = nd.getLocation();
            nd = new RedirectStatementNode(nd, exp, false);
            nd.setLocation(l);
        } else {
          ;
        }
        break;
      case IOAPPEND:
        jj_consume_token(IOAPPEND);
        if (jj_2_5(2147483647)) {
          exp = Expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_la1[4] = jj_gen;
            ;
          }
            Location l = nd.getLocation();
            nd = new RedirectStatementNode(nd, exp, true);
            nd.setLocation(l);
        } else {
          ;
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************************
 * Part of Statements: ControlStatement syntax follows
 *****************************************************************************/
  static final public void ControlStatementLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      break;
    case ELSE:
      jj_consume_token(ELSE);
      break;
    case FOR:
      jj_consume_token(FOR);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public StatementNode ControlStatement() throws ParseException {
    StatementNode nd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      nd = IfStatement();
      break;
    case FOR:
      nd = ForStatement();
      break;
    case WHILE:
      nd = WhileStatement();
      break;
    case RETURN:
      nd = ReturnStatement();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public StatementNode IfStatement() throws ParseException {
    IfStatementNode ifNode;
    ExpressionNode expNode;
    StatementNode thenNode;
    StatementNode elseNode = null;
    Token tok = getToken(1);
    jj_consume_token(IF);
    expNode = Expression();
    thenNode = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseNode = Statement();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
        if(elseNode == null) ifNode = new IfStatementNode(expNode, thenNode);
        else ifNode = new IfStatementNode(expNode, thenNode, elseNode);
        setLocation(ifNode, tok);
        {if (true) return ifNode;}
    throw new Error("Missing return statement in function");
  }

  static final public StatementNode ForStatement() throws ParseException {
    VariableNode varNode;
    ExpressionNode expNode;
    StatementNode bodyNode;
    StatementNode forNode;
    Token tok = getToken(1);
    jj_consume_token(FOR);
    varNode = Variable();
    jj_consume_token(IN);
    expNode = Expression();
    bodyNode = Statement();
        forNode = new ForStatementNode(varNode, expNode, bodyNode);
        setLocation(forNode, tok);
        {if (true) return forNode;}
    throw new Error("Missing return statement in function");
  }

  static final public StatementNode WhileStatement() throws ParseException {
    ExpressionNode expNode;
    StatementNode bodyNode;
    StatementNode whileNode;
    Token tok = getToken(1);
    jj_consume_token(WHILE);
    expNode = Expression();
    bodyNode = Statement();
        whileNode = new WhileStatementNode(expNode, bodyNode);
        setLocation(whileNode, tok);
        {if (true) return whileNode;}
    throw new Error("Missing return statement in function");
  }

  static final public StatementNode ReturnStatement() throws ParseException {
    StatementNode nd;
    ExpressionNode expNode;
    Token tok = getToken(1);

    expNode = null;
    jj_consume_token(RETURN);
    if (jj_2_6(2147483647)) {
      expNode = Expression();
    } else {
      ;
    }
        if(expNode == null)
            nd = new ReturnStatementNode();
        else
            nd = new ReturnStatementNode(expNode);
        setLocation(nd, tok);
        {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public StatementNode BlockStatement() throws ParseException {
    StatementNode stmtNode;
    BlockStatementNode blockNode;
    blockNode = new BlockStatementNode();
    setLocation(blockNode, getToken(1));
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLUMN:
      case INT_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case ARGN:
      case IF:
      case FOR:
      case WHILE:
      case RETURN:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LBRACE:
      case NOT:
      case MINUS:
      case POUND:
      case ATTR:
      case TILDE:
      case DOLLAR:
      case op_id:
      case op_inv:
      case op_dom:
      case op_rng:
      case op_ent:
      case cmd_quit:
      case cmd_exit:
      case cmd_print:
      case cmd_delete:
      case cmd_help:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      stmtNode = Statement();
                                   blockNode.add(stmtNode);
    }
    jj_consume_token(RBRACE);
      {if (true) return blockNode;}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************************
 * Part of Statements: CommandStatement syntax follows
 *****************************************************************************/
  static final public void CommandStatementLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cmd_quit:
      jj_consume_token(cmd_quit);
      break;
    case cmd_exit:
      jj_consume_token(cmd_exit);
      break;
    case cmd_print:
      jj_consume_token(cmd_print);
      break;
    case cmd_help:
      jj_consume_token(cmd_help);
      break;
    case cmd_delete:
      jj_consume_token(cmd_delete);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public StatementNode CommandStatement() throws ParseException {
    StatementNode nd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cmd_quit:
    case cmd_exit:
      nd = CommandQuit();
      break;
    case cmd_help:
      nd = CommandHelp();
      break;
    case cmd_print:
      nd = CommandPrint();
      break;
    case cmd_delete:
      nd = CommandDelete();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public CommandNode CommandQuit() throws ParseException {
    CommandNode cmdNode;
    Token tok = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cmd_quit:
      jj_consume_token(cmd_quit);
               cmdNode = new CommandQuitNode("quit");
      break;
    case cmd_exit:
      jj_consume_token(cmd_exit);
               cmdNode = new CommandQuitNode("exit");
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        setLocation(cmdNode, tok);
        {if (true) return cmdNode;}
    throw new Error("Missing return statement in function");
  }

  static final public CommandNode CommandHelp() throws ParseException {
    CommandNode cmdNode;
    VariableNode varNode;
    Token tok = getToken(1);
    boolean attr_b = false;
    boolean doll_b = false;
    Token tok2 = null;
    jj_consume_token(cmd_help);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTR:
    case DOLLAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
        tok2 = jj_consume_token(DOLLAR);
                   doll_b = true;
        break;
      case ATTR:
        tok2 = jj_consume_token(ATTR);
                                                   attr_b = true;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    varNode = Variable();
        if(attr_b) {
            varNode = new AttrSignNode(varNode.getName());
            setLocation(varNode, tok2);
        }
        if(doll_b) {
            varNode = new DollarSignNode(varNode.getName());
            setLocation(varNode, tok2);
        }

        cmdNode = new CommandHelpNode(varNode);
        setLocation(cmdNode, tok);
        {if (true) return cmdNode;}
    throw new Error("Missing return statement in function");
  }

  static final public CommandNode CommandPrint() throws ParseException {
    CommandNode cmdNode;
    ExpressionNode expNode;
    Token tok = getToken(1);
    jj_consume_token(cmd_print);
    expNode = Expression();
        cmdNode = new CommandPrintNode(expNode);
        setLocation(cmdNode, tok);
        {if (true) return cmdNode;}
    throw new Error("Missing return statement in function");
  }

  static final public CommandNode CommandDelete() throws ParseException {
    CommandNode cmdNode;
    ExpressionNode expNode;
    Token tok = getToken(1);
    jj_consume_token(cmd_delete);
    expNode = Expression();
        cmdNode = new CommandDeleteNode(expNode);
        setLocation(cmdNode, tok);
        {if (true) return cmdNode;}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************************
 * Part of Statements: Prolog syntax follows
 *****************************************************************************/
  static final public void PrologClauseLookahead() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACKET);
    jj_consume_token(IDENTIFIER);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
    jj_consume_token(RBRACKET);
    jj_consume_token(ASSIGN);
  }

  static final public StatementNode PrologClause() throws ParseException {
    VariableNode varNode;
    StatementNode stmtNode;
    PrologClauseNode clauseNode;
    PrologExpressionNode pexpNode;

    Token tok1, tok2;
    ArrayList args = new ArrayList();
    BlockStatementNode blockNode = new BlockStatementNode();
    tok1 = getToken(1);
    varNode = Variable();
        pexpNode = new PrologExpressionNode(varNode, args);
        setLocation(pexpNode, tok1);
    jj_consume_token(LBRACKET);
    varNode = Variable();
                              args.add(varNode);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      varNode = Variable();
      args.add(varNode);
    }
    jj_consume_token(RBRACKET);
    jj_consume_token(ASSIGN);
    tok2 = jj_consume_token(LBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLUMN:
      case INT_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case ARGN:
      case IF:
      case FOR:
      case WHILE:
      case RETURN:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LBRACE:
      case NOT:
      case MINUS:
      case POUND:
      case ATTR:
      case TILDE:
      case DOLLAR:
      case op_id:
      case op_inv:
      case op_dom:
      case op_rng:
      case op_ent:
      case cmd_quit:
      case cmd_exit:
      case cmd_print:
      case cmd_delete:
      case cmd_help:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
      if (jj_2_7(2147483647)) {
        stmtNode = PrologExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLUMN:
        case INT_LITERAL:
        case FLOAT_LITERAL:
        case STRING_LITERAL:
        case ARGN:
        case IF:
        case FOR:
        case WHILE:
        case RETURN:
        case TRUE:
        case FALSE:
        case LPAREN:
        case LBRACE:
        case NOT:
        case MINUS:
        case POUND:
        case ATTR:
        case TILDE:
        case DOLLAR:
        case op_id:
        case op_inv:
        case op_dom:
        case op_rng:
        case op_ent:
        case cmd_quit:
        case cmd_exit:
        case cmd_print:
        case cmd_delete:
        case cmd_help:
        case IDENTIFIER:
          stmtNode = Statement();
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        if(stmtNode != null) blockNode.add(stmtNode);
    }
    jj_consume_token(RBRACE);
       clauseNode = new PrologClauseNode(pexpNode, blockNode);
       setLocation(clauseNode, tok1);
       setLocation(blockNode, tok2);
       {if (true) return clauseNode;}
    throw new Error("Missing return statement in function");
  }

  static final public void PrologExpressionLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTR:
    case DOLLAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR:
        jj_consume_token(ATTR);
        break;
      case DOLLAR:
        jj_consume_token(DOLLAR);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACKET);
    jj_consume_token(IDENTIFIER);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
    jj_consume_token(RBRACKET);
  }

  static final public StatementNode PrologExpression() throws ParseException {
    VariableNode varNode;
    PrologExpressionNode nd;
    ArrayList args = new ArrayList();

    Token tok = getToken(1);
    boolean attr_b = false;
    boolean doll_b = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTR:
    case DOLLAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR:
        jj_consume_token(ATTR);
            attr_b = true;
        break;
      case DOLLAR:
        jj_consume_token(DOLLAR);
                                     doll_b = true;
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    varNode = Variable();
          if(attr_b) {
              varNode = new AttrSignNode(varNode.getName());
              setLocation(varNode, tok);
          }
          if(doll_b) {
              varNode = new DollarSignNode(varNode.getName());
              setLocation(varNode, tok);
          }
          nd = new PrologExpressionNode(varNode, args);
          setLocation(nd, tok);
    jj_consume_token(LBRACKET);
    varNode = Variable();
                             args.add(varNode);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      varNode = Variable();
                             args.add(varNode);
    }
    jj_consume_token(RBRACKET);
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************************
 * Part of Statements: Assignment syntax follows
 *****************************************************************************/
  static final public void AssignmentLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTR:
    case DOLLAR:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR:
      case DOLLAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR:
          jj_consume_token(ATTR);
          break;
        case DOLLAR:
          jj_consume_token(DOLLAR);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR:
      case DOLLAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR:
          jj_consume_token(ATTR);
          break;
        case DOLLAR:
          jj_consume_token(DOLLAR);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(IDENTIFIER);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR:
        case DOLLAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTR:
            jj_consume_token(ATTR);
            break;
          case DOLLAR:
            jj_consume_token(DOLLAR);
            break;
          default:
            jj_la1[32] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        jj_consume_token(IDENTIFIER);
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case ASSIGN_PLUS:
      jj_consume_token(ASSIGN_PLUS);
      break;
    case ASSIGN_MINUS:
      jj_consume_token(ASSIGN_MINUS);
      break;
    case ASSIGN_MULTIPLY:
      jj_consume_token(ASSIGN_MULTIPLY);
      break;
    case ASSIGN_DIVIDE:
      jj_consume_token(ASSIGN_DIVIDE);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public StatementNode Assignment() throws ParseException {
    int op = -1;
    VariableNode leftNode;
    ExpressionNode expNode;
    boolean attr_b = false;
    boolean doll_b = false;
    Token tok = getToken(1);
    Token tok2 = getToken(1);
    ArrayList leftList = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATTR:
    case DOLLAR:
    case IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR:
      case DOLLAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR:
          jj_consume_token(ATTR);
             attr_b = true;
          break;
        case DOLLAR:
          jj_consume_token(DOLLAR);
                                      doll_b = true;
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      leftNode = Variable();
            if(attr_b) {
                leftNode = new AttrSignNode(leftNode.getName());
                setLocation(leftNode, tok);
            }
            if(doll_b) {
                leftNode = new DollarSignNode(leftNode.getName());
                setLocation(leftNode, tok);
            }
            setLocation(leftNode, tok);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
            leftList = new ArrayList(5);
            tok2 = getToken(1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTR:
      case DOLLAR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR:
          jj_consume_token(ATTR);
                   attr_b = true;
          break;
        case DOLLAR:
          jj_consume_token(DOLLAR);
                                             doll_b = true;
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      leftNode = Variable();
            if(attr_b) {
                leftNode = new AttrSignNode(leftNode.getName());
                setLocation(leftNode, tok2);
            }
            if(doll_b) {
                leftNode = new DollarSignNode(leftNode.getName());
                setLocation(leftNode, tok2);
            }
            setLocation(leftNode, tok2);
            leftList.add(leftNode);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_9;
        }
        jj_consume_token(COMMA);
            tok2 = getToken(1);
            attr_b = false;
            doll_b = false;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR:
        case DOLLAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTR:
            jj_consume_token(ATTR);
                    attr_b = true;
            break;
          case DOLLAR:
            jj_consume_token(DOLLAR);
                                             doll_b = true;
            break;
          default:
            jj_la1[41] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        leftNode = Variable();
            if(attr_b) {
                leftNode = new AttrSignNode(leftNode.getName());
                setLocation(leftNode, tok2);
            }
            if(doll_b) {
                leftNode = new DollarSignNode(leftNode.getName());
                setLocation(leftNode, tok2);
            }
            setLocation(leftNode, tok2);
            leftList.add(leftNode);
      }
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
                         op = Operator.ASSIGN;
      break;
    case ASSIGN_PLUS:
      jj_consume_token(ASSIGN_PLUS);
                         op = Operator.ASSIGN_PLUS;
      break;
    case ASSIGN_MINUS:
      jj_consume_token(ASSIGN_MINUS);
                         op = Operator.ASSIGN_MINUS;
      break;
    case ASSIGN_MULTIPLY:
      jj_consume_token(ASSIGN_MULTIPLY);
                         op = Operator.ASSIGN_MULTIPLY;
      break;
    case ASSIGN_DIVIDE:
      jj_consume_token(ASSIGN_DIVIDE);
                         op = Operator.ASSIGN_DIVIDE;
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    expNode = Expression();
         if(op == Operator.ASSIGN) {
             AssignmentNode assign;
             if(leftList == null) {
                 assign = new AssignmentNode(leftNode, expNode);
             } else {
                 VariableNode[] lefts;
                 lefts = new VariableNode[leftList.size()];
                 leftList.toArray(lefts);
                 assign = new AssignmentNode(lefts, expNode);
             }
             setLocation(assign, tok);
             {if (true) return assign;}
         } else {
             AssignmentExtensionNode assign;
             if(leftList == null) {
                 assign = new AssignmentExtensionNode(op, leftNode, expNode);
             } else {
                 {if (true) throw new ParseException("left side cannot be a list when " + Operator.key(op) + " is used");}
             }
             setLocation(assign, tok);
             {if (true) return assign;}
         }
    throw new Error("Missing return statement in function");
  }

/*****************************************************************************
 * Expression syntax follows
 *****************************************************************************/
  static final public VariableNode Variable() throws ParseException {
    Token tok;
    VariableNode nd;
    tok = jj_consume_token(IDENTIFIER);
        nd = new VariableNode(tok.getText());
        setLocation(nd, tok);
        {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public VariableNode SpecialVariable() throws ParseException {
    VariableNode nd;
    Token lit = null;
    Token tok = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      jj_consume_token(DOLLAR);
      lit = jj_consume_token(INT_LITERAL);
      break;
    case ARGN:
      jj_consume_token(ARGN);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if(lit != null) {
            try {
                int val = Integer.parseInt(lit.getText());
                nd = new VariableNode("$" + val);
            } catch (NumberFormatException e) {
                {if (true) throw new ParseException("illegal int " + e.getMessage());}
            }
        } else {
            nd = new VariableNode("$#");
        }
        setLocation(nd, tok);
        {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public void ExpressionLookahead() throws ParseException {
    Expression();
  }

  static final public ExpressionNode Expression() throws ParseException {
    ExpressionNode nd;
    nd = ConditionalExpression();
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode ConditionalExpression() throws ParseException {
    ExpressionNode nd;
    nd = ConditionalOrExpression();
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode ConditionalOrExpression() throws ParseException {
    Token tok;
    ExpressionNode nd, left, right;
    left = ConditionalAndExpression();
                                        nd = left;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_10;
      }
      tok = jj_consume_token(OR);
      right = ConditionalAndExpression();
            left = nd = new ConditionalOrExpressionNode(left, right);
            setLocation(nd, tok);
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode ConditionalAndExpression() throws ParseException {
    Token tok;
    ExpressionNode nd, left, right;
    left = RelationalExpression();
                                    nd = left;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_11;
      }
      tok = jj_consume_token(AND);
      right = RelationalExpression();
            left = nd = new ConditionalAndExpressionNode(left, right);
            setLocation(nd, tok);
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode RelationalExpression() throws ParseException {
    int op=-1;
    Token tok;
    ExpressionNode nd, left, right;
    left = AdditiveExpression();
                                  nd = left;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NE:
      case ME:
      case UE:
      case IN:
        ;
        break;
      default:
        jj_la1[48] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        tok = jj_consume_token(EQ);
                      op = Operator.EQ;
        break;
      case NE:
        tok = jj_consume_token(NE);
                      op = Operator.NE;
        break;
      case LT:
        tok = jj_consume_token(LT);
                      op = Operator.LT;
        break;
      case GT:
        tok = jj_consume_token(GT);
                      op = Operator.GT;
        break;
      case LE:
        tok = jj_consume_token(LE);
                      op = Operator.LE;
        break;
      case GE:
        tok = jj_consume_token(GE);
                      op = Operator.GE;
        break;
      case ME:
        tok = jj_consume_token(ME);
                      op = Operator.ME;
        break;
      case UE:
        tok = jj_consume_token(UE);
                      op = Operator.UE;
        break;
      case IN:
        tok = jj_consume_token(IN);
                      op = Operator.IN;
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = AdditiveExpression();
            left = nd = new RelationalExpressionNode(op, left, right);
            setLocation(nd, tok);
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode AdditiveExpression() throws ParseException {
    int op = -1;
    Token tok;
    ExpressionNode nd, left, right;
    left = MultiplicativeExpression();
                                        nd = left;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        tok = jj_consume_token(PLUS);
                      op = Operator.PLUS;
        break;
      case MINUS:
        tok = jj_consume_token(MINUS);
                      op = Operator.MINUS;
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = MultiplicativeExpression();
            left = nd = new AdditiveExpressionNode(op, left, right);
            setLocation(nd, tok);
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode MultiplicativeExpression() throws ParseException {
    int op = -1;
    Token tok;
    ExpressionNode nd, left, right;
    left = UnaryExpression();
                               nd = left;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RCOMPOSE:
      case INTERSECT:
      case COMPOSE:
      case MULTIPLY:
      case DIVIDE:
      case MOD:
      case PROJECT:
      case CROSS:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTERSECT:
        tok = jj_consume_token(INTERSECT);
                      op = Operator.INTERSECT;
        break;
      case COMPOSE:
        tok = jj_consume_token(COMPOSE);
                      op = Operator.COMPOSE;
        break;
      case MULTIPLY:
        tok = jj_consume_token(MULTIPLY);
                      op = Operator.MULTIPLY;
        break;
      case DIVIDE:
        tok = jj_consume_token(DIVIDE);
                      op = Operator.DIVIDE;
        break;
      case CROSS:
        tok = jj_consume_token(CROSS);
                      op = Operator.CROSS;
        break;
      case PROJECT:
        tok = jj_consume_token(PROJECT);
                      op = Operator.PROJECT;
        break;
      case MOD:
        tok = jj_consume_token(MOD);
                      op = Operator.MOD;
        break;
      case RCOMPOSE:
        tok = jj_consume_token(RCOMPOSE);
                      op = Operator.RCOMPOSE;
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = UnaryExpression();
            left = nd = new MultiplicativeExpressionNode(op, left, right);
            setLocation(nd, tok);
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode UnaryExpression() throws ParseException {
    ExpressionNode nd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case MINUS:
    case POUND:
    case TILDE:
    case op_id:
    case op_inv:
    case op_dom:
    case op_rng:
    case op_ent:
      nd = PrefixExpression();
      break;
    default:
      jj_la1[54] = jj_gen;
      if (jj_2_8(2147483647)) {
        nd = SuffixExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLUMN:
        case INT_LITERAL:
        case FLOAT_LITERAL:
        case STRING_LITERAL:
        case ARGN:
        case TRUE:
        case FALSE:
        case LBRACE:
        case ATTR:
        case DOLLAR:
        case IDENTIFIER:
          nd = PrimaryExpression();
          break;
        case LPAREN:
          nd = Arguments();
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode PrefixExpression() throws ParseException {
    int op = -1;
    ExpressionNode nd;
    Token tok = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case op_id:
      jj_consume_token(op_id);
      break;
    case op_inv:
      jj_consume_token(op_inv);
      break;
    case op_dom:
      jj_consume_token(op_dom);
      break;
    case op_rng:
      jj_consume_token(op_rng);
      break;
    case op_ent:
      jj_consume_token(op_ent);
      break;
    case POUND:
      jj_consume_token(POUND);
      break;
    case TILDE:
      jj_consume_token(TILDE);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        op = Operator.op(tok.getText());
    nd = UnaryExpression();
        nd = new PrefixExpressionNode(op, nd);
        setLocation(nd, tok);
        {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public void SuffixExpressionLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMN:
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case ARGN:
    case TRUE:
    case FALSE:
    case LBRACE:
    case ATTR:
    case DOLLAR:
    case IDENTIFIER:
      PrimaryExpression();
      break;
    case LPAREN:
      Arguments();
      break;
    default:
      jj_la1[57] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      break;
    case PLUS:
    case MULTIPLY:
      ClosureLookahead();
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ClosureLookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case RPAREN:
      jj_consume_token(RPAREN);
      break;
    case RBRACE:
      jj_consume_token(RBRACE);
      break;
    case COMMA:
      jj_consume_token(COMMA);
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      break;
    case CROSS:
      jj_consume_token(CROSS);
      break;
    case INTERSECT:
      jj_consume_token(INTERSECT);
      break;
    case COMPOSE:
      jj_consume_token(COMPOSE);
      break;
    case PROJECT:
      jj_consume_token(PROJECT);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case RCOMPOSE:
      jj_consume_token(RCOMPOSE);
      break;
    case IF:
    case ELSE:
    case FOR:
    case WHILE:
    case RETURN:
      ControlStatementLookahead();
      break;
    case cmd_quit:
    case cmd_exit:
    case cmd_print:
    case cmd_delete:
    case cmd_help:
      CommandStatementLookahead();
      break;
    case LPAREN:
    case ATTR:
    case DOLLAR:
    case IDENTIFIER:
      AssignmentLookahead();
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public ExpressionNode SuffixExpression() throws ParseException {
    int op = -1;
    ExpressionNode nd;
    ArgumentsNode argsNode;
    SelectConditionNode condNode;
    Token tok = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMN:
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case ARGN:
    case TRUE:
    case FALSE:
    case LBRACE:
    case ATTR:
    case DOLLAR:
    case IDENTIFIER:
      nd = PrimaryExpression();
      break;
    case LPAREN:
      nd = Arguments();
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MULTIPLY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
             op = Operator.MULTIPLY;
        break;
      case PLUS:
        jj_consume_token(PLUS);
                                               op = Operator.PLUS;
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        nd = new SuffixExpressionNode(nd, op);
      break;
    case LPAREN:
      argsNode = Arguments();
          if(nd instanceof VariableNode) {
              nd = new FunctionExpressionNode(new FunctionNameNode((VariableNode)nd), argsNode);
          } else {
              {if (true) throw new InterpException(getLocation(tok),
                                        "illegal function name encountered");}
          }
      break;
    case LBRACKET:
      condNode = SelectCondition();
        nd = new SelectExpressionNode(nd, condNode);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        setLocation(nd, tok);
        {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode PrimaryExpression() throws ParseException {
    ExpressionNode nd;
    boolean attr_b = false;
    boolean doll_b = false;
    Token tok = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMN:
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
      nd = Literal();
      break;
    case LBRACE:
      nd = SetConstructor();
      break;
    default:
      jj_la1[66] = jj_gen;
      if (jj_2_9(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTR:
        case DOLLAR:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ATTR:
            jj_consume_token(ATTR);
           attr_b = true;
            break;
          case DOLLAR:
            jj_consume_token(DOLLAR);
                                    doll_b = true;
            break;
          default:
            jj_la1[64] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[65] = jj_gen;
          ;
        }
        nd = Variable();
         if(attr_b) {
             nd = new AttrSignNode(((VariableNode)nd).getName());
             setLocation(nd, tok);
         }
         if(doll_b) {
             nd = new DollarSignNode(((VariableNode)nd).getName());
             setLocation(nd, tok);
         }
      } else if (jj_2_10(2147483647)) {
        nd = SpecialVariable();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode Literal() throws ParseException {
    boolean bool;
    String literal;
    ExpressionNode nd;
    Token tok = getToken(1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_LITERAL:
      tok = jj_consume_token(INT_LITERAL);
      literal = tok.getText();
      try {
          long val = Long.parseLong(literal);
          nd = new LiteralNode(val);
          setLocation(nd, tok);
          {if (true) return nd;}
      } catch (NumberFormatException e) {
          {if (true) throw new ParseException("illegal long " + e.getMessage());}
      }
      break;
    case FLOAT_LITERAL:
      tok = jj_consume_token(FLOAT_LITERAL);
      literal = tok.getText();
      try {
          double val = Double.parseDouble(literal);
          nd = new LiteralNode(val);
          setLocation(nd, tok);
          {if (true) return nd;}
      } catch (NumberFormatException e) {
          {if (true) throw new ParseException("illegal double " + e.getMessage());}
      }
      break;
    case STRING_LITERAL:
      tok = jj_consume_token(STRING_LITERAL);
      literal = processStringLiteral(tok.getText());
      nd = new LiteralNode(literal);
      setLocation(nd, tok);
      {if (true) return nd;}
      break;
    case TRUE:
    case FALSE:
      bool = BooleanLiteral();
      nd = new LiteralNode(bool);
      setLocation(nd, tok);
      {if (true) return nd;}
      break;
    case COLUMN:
      nd = Column();
      {if (true) return nd;}
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public boolean BooleanLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
              {if (true) return true;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
              {if (true) return false;}
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode SetConstructor() throws ParseException {
    ExpressionNode item;
    SetConstructorNode nd;
    nd = new SetConstructorNode();
    setLocation(nd, getToken(1));
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMN:
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
      item = SetElement();
                                 nd.addItem(item);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        item = SetElement();
                                 nd.addItem(item);
      }
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpressionNode SetElement() throws ParseException {
    ExpressionNode nd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMN:
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
      nd = Literal();
      break;
    case IDENTIFIER:
      nd = Variable();
      break;
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ArgumentsNode Arguments() throws ParseException {
    ArgumentsNode nd;
    ExpressionNode expNode;
    ArrayList expList = new ArrayList(5);
    Token tok = getToken(1);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLUMN:
    case INT_LITERAL:
    case FLOAT_LITERAL:
    case STRING_LITERAL:
    case ARGN:
    case TRUE:
    case FALSE:
    case LPAREN:
    case LBRACE:
    case NOT:
    case MINUS:
    case POUND:
    case ATTR:
    case TILDE:
    case DOLLAR:
    case op_id:
    case op_inv:
    case op_dom:
    case op_rng:
    case op_ent:
    case IDENTIFIER:
      expNode = Expression();
                                      expList.add(expNode);
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_16;
        }
        jj_consume_token(COMMA);
        expNode = Expression();
                                      expList.add(expNode);
      }
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
        ExpressionNode[] expNodes = new ExpressionNode[expList.size()];
        expList.toArray(expNodes);
        nd = new ArgumentsNode(expNodes);
        setLocation(nd, tok);
        {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

/*****************************************************************************
 * Select expression syntax follows.
 *****************************************************************************/
  static final public SelectConditionNode SelectCondition() throws ParseException {
    Token tok;
    ColumnNode colNd;
    ArrayList colList;
    SelectConditionNode nd;
    jj_consume_token(LBRACKET);
    if (jj_2_11(2147483647)) {
      tok = jj_consume_token(INT_LITERAL);
              try {
                  String literal = tok.getText();
                  int val = Integer.valueOf(literal).intValue();
                  nd = new SelectTupleNode(val);
                  setLocation(nd, tok);
              } catch (NumberFormatException e) {
                  {if (true) throw new ParseException("illegal int " + e.getMessage());}
              }
    } else if (jj_2_12(2147483647)) {
      colNd = Column();
                             colList = new ArrayList(2); colList.add(colNd);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        colNd = Column();
                                  colList.add(colNd);
      }
              nd = new SelectProjectionNode(colList);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLUMN:
      case INT_LITERAL:
      case FLOAT_LITERAL:
      case STRING_LITERAL:
      case ARGN:
      case TRUE:
      case FALSE:
      case LPAREN:
      case LBRACE:
      case NOT:
      case MINUS:
      case POUND:
      case ATTR:
      case TILDE:
      case DOLLAR:
      case op_id:
      case op_inv:
      case op_dom:
      case op_rng:
      case op_ent:
      case IDENTIFIER:
        nd = SelectOrExpression();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACKET);
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public SelectConditionNode SelectOrExpression() throws ParseException {
    Token tok;
    SelectConditionNode nd, left, right;
    left = SelectAndExpression();
                                   nd = left;
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_18;
      }
      tok = jj_consume_token(OR);
      right = SelectAndExpression();
            left = nd = new SelectOrExpressionNode(left, right);
            setLocation(nd, tok);
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public SelectConditionNode SelectAndExpression() throws ParseException {
    Token tok;
    SelectConditionNode nd;
    SelectConditionNode left, right;
    left = SelectRelationalExpression();
                                          nd = left;
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_19;
      }
      tok = jj_consume_token(AND);
      right = SelectRelationalExpression();
            left = nd = new SelectAndExpressionNode(left, right);
            setLocation(nd, tok);
    }
      {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final public ColumnNode Column() throws ParseException {
    String lit;
    ColumnNode nd;
    VariableNode var = null;
    Token tok = getToken(1);
    tok = jj_consume_token(COLUMN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROJECT:
      jj_consume_token(PROJECT);
      var = Variable();
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
      lit = tok.getText();
      try {
          lit = lit.substring(1);

          boolean positive = true;
          if(lit.charAt(0) == '-') {
              positive = false;
              lit = lit.substring(1);
          }

          int val = Integer.valueOf(lit).intValue();
          if(var == null) nd = new ColumnNode(val);
          else nd = new ColumnAttributeNode(val, var.getName());
          nd.setPositive(positive);
          setLocation(nd, tok);
          {if (true) return nd;}
      } catch (NumberFormatException e) {
          nd = new ColumnNode();
          setLocation(nd, tok);
          {if (true) return nd;}
      }
    throw new Error("Missing return statement in function");
  }

  static final public SelectConditionNode SelectRelationalExpression() throws ParseException {
    int op;
    Token tok;
    ExpressionNode left;
    ExpressionNode right;
    SelectConditionNode nd;
    op = -1;
    tok = getToken(1);
    left = AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
                op = Operator.EQ;
      break;
    case NE:
      jj_consume_token(NE);
                op = Operator.NE;
      break;
    case LT:
      jj_consume_token(LT);
                op = Operator.LT;
      break;
    case GT:
      jj_consume_token(GT);
                op = Operator.GT;
      break;
    case LE:
      jj_consume_token(LE);
                op = Operator.LE;
      break;
    case GE:
      jj_consume_token(GE);
                op = Operator.GE;
      break;
    case ME:
      jj_consume_token(ME);
                op = Operator.ME;
      break;
    case UE:
      jj_consume_token(UE);
                op = Operator.UE;
      break;
    case IN:
      jj_consume_token(IN);
                op = Operator.IN;
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = AdditiveExpression();
        nd = new SelectRelationalExpressionNode(op, left, right);
        setLocation(nd, tok);
        {if (true) return nd;}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_5();
    jj_save(4, xla);
    return retval;
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_6();
    jj_save(5, xla);
    return retval;
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_7();
    jj_save(6, xla);
    return retval;
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_8();
    jj_save(7, xla);
    return retval;
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_9();
    jj_save(8, xla);
    return retval;
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_10();
    jj_save(9, xla);
    return retval;
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_11();
    jj_save(10, xla);
    return retval;
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_12();
    jj_save(11, xla);
    return retval;
  }

  static final private boolean jj_3R_48() {
    if (jj_scan_token(ATTR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_62() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_54() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_scan_token(RCOMPOSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_34() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_scan_token(ATTR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_47() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_84() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_33() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_173() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_108() {
    if (jj_scan_token(ATTR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_68() {
    if (jj_3R_95()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_scan_token(PROJECT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_67() {
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_168() {
    if (jj_3R_59()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_81() {
    if (jj_scan_token(COMPOSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_166() {
    if (jj_scan_token(NOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_scan_token(INTERSECT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_171() {
    if (jj_3R_174()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_165() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_scan_token(CROSS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_164() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_170() {
    if (jj_3R_59()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_172() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_169() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_163() {
    if (jj_scan_token(POUND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_57() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_167() {
    if (jj_3R_58()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_77() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_43() {
    if (jj_3R_59()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_56() {
    if (jj_scan_token(ATTR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_162() {
    if (jj_scan_token(op_ent)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_76() {
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_46() {
    if (jj_3R_60()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_75() {
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_73() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_161() {
    if (jj_scan_token(op_rng)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_scan_token(0)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_87() {
    if (jj_3R_99()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_3R_98()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_74() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_72() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_160() {
    if (jj_scan_token(op_dom)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_42() {
    if (jj_3R_58()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_31() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_159() {
    if (jj_scan_token(op_inv)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_158() {
    if (jj_scan_token(op_id)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_140()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_8() {
    if (jj_3R_24()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_147() {
    if (jj_3R_59()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_146() {
    if (jj_3R_58()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_145() {
    if (jj_3R_157()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_144() {
    if (jj_3R_156()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_20() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_155() {
    if (jj_scan_token(RCOMPOSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_154() {
    if (jj_scan_token(MOD)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_153() {
    if (jj_scan_token(PROJECT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_152() {
    if (jj_scan_token(CROSS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_151() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_150() {
    if (jj_scan_token(MULTIPLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_149() {
    if (jj_scan_token(COMPOSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_148() {
    if (jj_scan_token(INTERSECT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_140()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_125() {
    if (jj_3R_140()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_143() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_192() {
    if (jj_scan_token(IN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_142() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_191() {
    if (jj_scan_token(UE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_190() {
    if (jj_scan_token(ME)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_125()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_189() {
    if (jj_scan_token(GE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_188() {
    if (jj_scan_token(LE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_187() {
    if (jj_scan_token(GT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_120() {
    if (jj_3R_125()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_186() {
    if (jj_scan_token(LT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_185() {
    if (jj_scan_token(NE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_184() {
    if (jj_scan_token(EQ)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_119() {
    if (jj_scan_token(cmd_delete)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_182() {
    if (jj_3R_120()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_120()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_135() {
    if (jj_scan_token(IN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_134() {
    if (jj_scan_token(UE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_133() {
    if (jj_scan_token(ME)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_132() {
    if (jj_scan_token(GE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_131() {
    if (jj_scan_token(LE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_130() {
    if (jj_scan_token(GT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_129() {
    if (jj_scan_token(LT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_118() {
    if (jj_scan_token(cmd_help)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_128() {
    if (jj_scan_token(NE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_127() {
    if (jj_scan_token(EQ)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_120()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_3R_120()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_scan_token(PROJECT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_117() {
    if (jj_scan_token(cmd_print)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_101() {
    if (jj_scan_token(AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_100()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_92() {
    if (jj_3R_100()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_116() {
    if (jj_scan_token(cmd_exit)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_28() {
    if (jj_scan_token(COLUMN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_scan_token(OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_115() {
    if (jj_scan_token(cmd_quit)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_183() {
    if (jj_scan_token(AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_182()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_180() {
    if (jj_3R_182()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_30() {
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_3R_66()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_29() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_50() {
    if (jj_scan_token(ARGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_181() {
    if (jj_scan_token(OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_180()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_3R_55()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_179() {
    if (jj_3R_180()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_3R_28()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_22() {
    if (jj_3R_39()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_177() {
    if (jj_3R_179()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_178() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_28()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_176() {
    if (jj_3R_28()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_scan_token(INT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(INT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_175() {
    if (jj_scan_token(INT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_174() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_26() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_71() {
    if (jj_3R_39()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_97() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_39()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_139() {
    if (jj_3R_26()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_114() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_138() {
    if (jj_3R_94()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_113() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_107() {
    if (jj_3R_123()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_124() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_123()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_112() {
    if (jj_scan_token(FOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_95() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_111() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_137() {
    if (jj_scan_token(FALSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_136() {
    if (jj_scan_token(TRUE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_110() {
    if (jj_scan_token(IF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_38() {
    if (jj_scan_token(ASSIGN_DIVIDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_106() {
    if (jj_3R_28()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_105() {
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_scan_token(ASSIGN_MULTIPLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_104() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_3() {
    if (jj_3R_22()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_36() {
    if (jj_scan_token(ASSIGN_MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_109() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_102() {
    if (jj_scan_token(INT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_3R_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_35() {
    if (jj_scan_token(ASSIGN_PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_scan_token(ATTR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_63() {
    if (jj_scan_token(ATTR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public InterpTokenManager token_source;
  static ASCII_CharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[80];
  static final private int[] jj_la1_0 = {0x147d3e00,0x1d0000,0x10000000,0x2000000,0x2000000,0x200c000,0x200c000,0x1f0000,0x1d0000,0x20000,0x147d3e00,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x147d3e00,0x2000000,0x147d3e00,0x0,0x0,0x800000,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x4000000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14603e00,0x0,0x14603e00,0x44000000,0x0,0x2e9f0001,0x14603e00,0x0,0x44000000,0x0,0x0,0x10601e00,0x601e00,0x600000,0x800000,0x601e00,0x601e00,0x800000,0x14603e00,0x800000,0x14603e00,0x0,0x0,0x0,0x0,};
  static final private int[] jj_la1_1 = {0x6c048000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6c048000,0x0,0x0,0x0,0x48000000,0x48000000,0x0,0x0,0x6c048000,0x0,0x6c048000,0x48000000,0x48000000,0x0,0x48000000,0x48000000,0x0,0x48000000,0x48000000,0x48000000,0x48000000,0x0,0x48000000,0x48000000,0x48000000,0x1000000f,0x48000000,0x48000000,0x48000000,0x48000000,0x0,0x48000000,0x48000000,0x48000000,0x1000000f,0x40000000,0x2000,0x4000,0x1ff0,0x1ff0,0x60000,0x60000,0x3f90000,0x3f90000,0x24048000,0x48000000,0x24048000,0x48000000,0x220000,0x220000,0x4b3f0000,0x48000000,0x220000,0x220000,0x48000000,0x48000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6c048000,0x0,0x6c048000,0x2000,0x4000,0x1000000,0x1ff0,};
  static final private int[] jj_la1_2 = {0x7ff,0x3e0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ff,0x3e0,0x3e0,0x60,0x0,0x0,0x0,0x0,0x7ff,0x0,0x7ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1f,0x400,0x1f,0x400,0x0,0x0,0x7e0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x400,0x0,0x41f,0x0,0x41f,0x0,0x0,0x0,0x0,};
  static final private JJCalls[] jj_2_rtns = new JJCalls[12];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public Interp(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new InterpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Interp(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new InterpTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Interp(InterpTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(InterpTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 80; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enm = jj_expentries.elements(); enm.hasMoreElements();) {
        int[] oldentry = (int[])(enm.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[77];
    for (int i = 0; i < 77; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 80; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 77; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
