===== Git History Slicing Toolkit =====
   ______ _____  __ _                  
  / ____// ___/ / /(_)_____ ___   _____
 / /     \__ \ / // // ___// _ \ / ___/
/ /___  ___/ // // // /__ /  __// /
\____/ /____//_//_/ \___/ \___//_/

=======================================
[DEBUG] Original |H|: 365
[OUTPUT] Computing FUNC & COMP set ... 
[OUTPUT] Running coverage analysis ...
[DEBUG] FULL
[DEBUG] 248 classes have been analyzed.
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/gzip ...
[DEBUG] 	File: GzipCompressorOutputStream.java ...
[DEBUG] 	File: GzipCompressorInputStream.java ...
[DEBUG] 	File: GzipParameters.java ...
[DEBUG] 	File: GzipUtils.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/sevenz ...
[DEBUG] 	File: SevenZMethodConfiguration.java ...
[DEBUG] 	File: Coder.java ...
[DEBUG] 	File: AES256SHA256Decoder.java ...
[DEBUG] 	File: Archive.java ...
[DEBUG] 	File: BindPair.java ...
[DEBUG] 	File: SubStreamsInfo.java ...
[DEBUG] 	File: LZMA2Decoder.java ...
[DEBUG] 	File: CoderBase.java ...
[DEBUG] 	File: NID.java ...
[DEBUG] 	File: SevenZFile.java ...
[DEBUG] 	File: DeltaDecoder.java ...
[DEBUG] 	File: Folder.java ...
[DEBUG] 	File: StartHeader.java ...
[DEBUG] 	File: SevenZArchiveEntry.java ...
[DEBUG] 	File: Coders.java ...
[DEBUG] 	File: LZMADecoder.java ...
[DEBUG] 	File: CLI.java ...
[DEBUG] 	File: SevenZMethod.java ...
[DEBUG] 	File: BoundedSeekableByteChannelInputStream.java ...
[DEBUG] 	File: SevenZOutputFile.java ...
[DEBUG] 	File: StreamMap.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/utils ...
[DEBUG] 	File: Iterators.java ...
[DEBUG] 	File: CountingOutputStream.java ...
[DEBUG] 	File: SeekableInMemoryByteChannel.java ...
[DEBUG] 	File: ServiceLoaderIterator.java ...
[DEBUG] 	File: CountingInputStream.java ...
[DEBUG] 	File: IOUtils.java ...
[DEBUG] 	File: Charsets.java ...
[DEBUG] 	File: BoundedInputStream.java ...
[DEBUG] 	File: CharsetNames.java ...
[DEBUG] 	File: FlushShieldFilterOutputStream.java ...
[DEBUG] 	File: ChecksumVerifyingInputStream.java ...
[DEBUG] 	File: Lists.java ...
[DEBUG] 	File: CRC32VerifyingInputStream.java ...
[DEBUG] 	File: Sets.java ...
[DEBUG] 	File: BitInputStream.java ...
[DEBUG] 	File: ArchiveUtils.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers ...
[DEBUG] 	File: Lister.java ...
[DEBUG] 	File: ArchiveException.java ...
[DEBUG] 	File: ArchiveStreamFactory.java ...
[DEBUG] 	File: ArchiveOutputStream.java ...
[DEBUG] 	File: StreamingNotSupportedException.java ...
[DEBUG] 	File: ArchiveInputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/zip ...
[DEBUG] 	File: UnsupportedZipFeatureException.java ...
[DEBUG] 	File: BinaryTree.java ...
[DEBUG] 	File: ZipConstants.java ...
[DEBUG] 	File: ZipArchiveEntry.java ...
[DEBUG] 	File: UnicodeCommentExtraField.java ...
[DEBUG] 	File: ZipLong.java ...
[DEBUG] 	File: NioZipEncoding.java ...
[DEBUG] 	File: ZipArchiveEntryRequest.java ...
[DEBUG] 	File: X0014_X509Certificates.java ...
[DEBUG] 	File: AsiExtraField.java ...
[DEBUG] 	File: ScatterStatistics.java ...
[DEBUG] 	File: ZipEightByteInteger.java ...
[DEBUG] 	File: X7875_NewUnix.java ...
[DEBUG] 	File: UnicodePathExtraField.java ...
[DEBUG] 	File: Zip64RequiredException.java ...
[DEBUG] 	File: BitStream.java ...
[DEBUG] 	File: UnparseableExtraFieldData.java ...
[DEBUG] 	File: ZipShort.java ...
[DEBUG] 	File: ScatterZipOutputStream.java ...
[DEBUG] 	File: ExtraFieldUtils.java ...
[DEBUG] 	File: X0016_CertificateIdForCentralDirectory.java ...
[DEBUG] 	File: ZipEncodingHelper.java ...
[DEBUG] 	File: ZipMethod.java ...
[DEBUG] 	File: X0015_CertificateIdForFile.java ...
[DEBUG] 	File: PKWareExtraHeader.java ...
[DEBUG] 	File: ZipUtil.java ...
[DEBUG] 	File: ZipArchiveOutputStream.java ...
[DEBUG] 	File: CircularBuffer.java ...
[DEBUG] 	File: ParallelScatterZipCreator.java ...
[DEBUG] 	File: ExplodingInputStream.java ...
[DEBUG] 	File: X000A_NTFS.java ...
[DEBUG] 	File: X0019_EncryptionRecipientCertificateList.java ...
[DEBUG] 	File: UnshrinkingInputStream.java ...
[DEBUG] 	File: X0017_StrongEncryptionHeader.java ...
[DEBUG] 	File: Simple8BitZipEncoding.java ...
[DEBUG] 	File: GeneralPurposeBit.java ...
[DEBUG] 	File: X5455_ExtendedTimestamp.java ...
[DEBUG] 	File: StreamCompressor.java ...
[DEBUG] 	File: Zip64ExtendedInformationExtraField.java ...
[DEBUG] 	File: Zip64Mode.java ...
[DEBUG] 	File: ZipArchiveInputStream.java ...
[DEBUG] 	File: AbstractUnicodeExtraField.java ...
[DEBUG] 	File: UnrecognizedExtraField.java ...
[DEBUG] 	File: FallbackZipEncoding.java ...
[DEBUG] 	File: ZipFile.java ...
[DEBUG] 	File: JarMarker.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/parallel ...
[DEBUG] 	File: FileBasedScatterGatherBackingStore.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/ar ...
[DEBUG] 	File: ArArchiveEntry.java ...
[DEBUG] 	File: ArArchiveInputStream.java ...
[DEBUG] 	File: ArArchiveOutputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/pack200 ...
[DEBUG] 	File: StreamBridge.java ...
[DEBUG] 	File: TempFileCachingStreamBridge.java ...
[DEBUG] 	File: InMemoryCachingStreamBridge.java ...
[DEBUG] 	File: Pack200Strategy.java ...
[DEBUG] 	File: Pack200CompressorInputStream.java ...
[DEBUG] 	File: Pack200Utils.java ...
[DEBUG] 	File: Pack200CompressorOutputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/tar ...
[DEBUG] 	File: TarArchiveEntry.java ...
[DEBUG] 	File: TarArchiveOutputStream.java ...
[DEBUG] 	File: TarArchiveSparseEntry.java ...
[DEBUG] 	File: TarArchiveInputStream.java ...
[DEBUG] 	File: TarUtils.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/deflate ...
[DEBUG] 	File: DeflateParameters.java ...
[DEBUG] 	File: DeflateCompressorInputStream.java ...
[DEBUG] 	File: DeflateCompressorOutputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/jar ...
[DEBUG] 	File: JarArchiveEntry.java ...
[DEBUG] 	File: JarArchiveInputStream.java ...
[DEBUG] 	File: JarArchiveOutputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/bzip2 ...
[DEBUG] 	File: BZip2Utils.java ...
[DEBUG] 	File: BlockSort.java ...
[DEBUG] 	File: BZip2CompressorInputStream.java ...
[DEBUG] 	File: CRC.java ...
[DEBUG] 	File: BZip2CompressorOutputStream.java ...
[DEBUG] 	File: Rand.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/cpio ...
[DEBUG] 	File: CpioArchiveOutputStream.java ...
[DEBUG] 	File: CpioArchiveEntry.java ...
[DEBUG] 	File: CpioUtil.java ...
[DEBUG] 	File: CpioArchiveInputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/snappy ...
[DEBUG] 	File: SnappyCompressorInputStream.java ...
[DEBUG] 	File: FramedSnappyCompressorInputStream.java ...
[DEBUG] 	File: FramedSnappyDialect.java ...
[DEBUG] 	File: PureJavaCrc32C.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/changes ...
[DEBUG] 	File: Change.java ...
[DEBUG] 	File: ChangeSetPerformer.java ...
[DEBUG] 	File: ChangeSet.java ...
[DEBUG] 	File: ChangeSetResults.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors ...
[DEBUG] 	File: CompressorOutputStream.java ...
[DEBUG] 	File: FileNameUtil.java ...
[DEBUG] 	File: CompressorInputStream.java ...
[DEBUG] 	File: CompressorStreamFactory.java ...
[DEBUG] 	File: CompressorException.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/lzma ...
[DEBUG] 	File: LZMAUtils.java ...
[DEBUG] 	File: LZMACompressorOutputStream.java ...
[DEBUG] 	File: LZMACompressorInputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/dump ...
[DEBUG] 	File: DumpArchiveInputStream.java ...
[DEBUG] 	File: TapeInputStream.java ...
[DEBUG] 	File: UnrecognizedFormatException.java ...
[DEBUG] 	File: DumpArchiveSummary.java ...
[DEBUG] 	File: DumpArchiveUtil.java ...
[DEBUG] 	File: DumpArchiveEntry.java ...
[DEBUG] 	File: UnsupportedCompressionAlgorithmException.java ...
[DEBUG] 	File: ShortFileException.java ...
[DEBUG] 	File: DumpArchiveConstants.java ...
[DEBUG] 	File: Dirent.java ...
[DEBUG] 	File: InvalidFormatException.java ...
[DEBUG] 	File: DumpArchiveException.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/z ...
[DEBUG] 	File: ZCompressorInputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/lzw ...
[DEBUG] 	File: LZWInputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/arj ...
[DEBUG] 	File: ArjArchiveInputStream.java ...
[DEBUG] 	File: ArjArchiveEntry.java ...
[DEBUG] 	File: LocalFileHeader.java ...
[DEBUG] 	File: MainHeader.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/xz ...
[DEBUG] 	File: XZCompressorInputStream.java ...
[DEBUG] 	File: XZUtils.java ...
[DEBUG] 	File: XZCompressorOutputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress ...
[DEBUG] 	File: PasswordRequiredException.java ...
[DEBUG] Drawing static call graph ...
[OUTPUT] Scanning class files ...
[DEBUG] 0 Reading class file: Archive.class
[DEBUG] 1 Reading class file: Coders$DeflateDecoder$2.class
[DEBUG] 2 Reading class file: SevenZArchiveEntry.class
[DEBUG] 3 Reading class file: Coders$DummyByteAddingInputStream.class
[DEBUG] 4 Reading class file: CoderBase.class
[DEBUG] 5 Reading class file: Coders$BZIP2Decoder.class
[DEBUG] 6 Reading class file: SevenZOutputFile$OutputStreamWrapper.class
[DEBUG] 7 Reading class file: StreamMap.class
[DEBUG] 8 Reading class file: CLI$Mode$1.class
[DEBUG] 9 Reading class file: CLI$Mode.class
[DEBUG] 10 Reading class file: AES256SHA256Decoder$1.class
[DEBUG] 11 Reading class file: SubStreamsInfo.class
[DEBUG] 12 Reading class file: Coders.class
[DEBUG] 13 Reading class file: DeltaDecoder.class
[DEBUG] 14 Reading class file: CLI.class
[DEBUG] 15 Reading class file: SevenZMethod.class
[DEBUG] 16 Reading class file: SevenZOutputFile$1.class
[DEBUG] 17 Reading class file: NID.class
[DEBUG] 18 Reading class file: SevenZOutputFile.class
[DEBUG] 19 Reading class file: Coders$BCJDecoder.class
[DEBUG] 20 Reading class file: Coders$CopyDecoder.class
[DEBUG] 21 Reading class file: SevenZMethodConfiguration.class
[DEBUG] 22 Reading class file: BindPair.class
[DEBUG] 23 Reading class file: LZMA2Decoder.class
[DEBUG] 24 Reading class file: CLI$Mode$2.class
[DEBUG] 25 Reading class file: LZMADecoder.class
[DEBUG] 26 Reading class file: StartHeader.class
[DEBUG] 27 Reading class file: CLI$1.class
[DEBUG] 28 Reading class file: Folder.class
[DEBUG] 29 Reading class file: BoundedSeekableByteChannelInputStream.class
[DEBUG] 30 Reading class file: AES256SHA256Decoder.class
[DEBUG] 31 Reading class file: Coder.class
[DEBUG] 32 Reading class file: Coders$DeflateDecoder$1.class
[DEBUG] 33 Reading class file: Coders$1.class
[DEBUG] 34 Reading class file: Coders$DeflateDecoder.class
[DEBUG] 35 Reading class file: SevenZFile.class
[DEBUG] 36 Reading class file: Lister.class
[DEBUG] 37 Reading class file: ArchiveStreamFactory$2.class
[DEBUG] 38 Reading class file: ExplodingInputStream.class
[DEBUG] 39 Reading class file: ExtraFieldUtils.class
[DEBUG] 40 Reading class file: Simple8BitZipEncoding.class
[DEBUG] 41 Reading class file: X0014_X509Certificates.class
[DEBUG] 42 Reading class file: Simple8BitZipEncoding$Simple8BitChar.class
[DEBUG] 43 Reading class file: FallbackZipEncoding.class
[DEBUG] 44 Reading class file: AsiExtraField.class
[DEBUG] 45 Reading class file: ZipArchiveInputStream.class
[DEBUG] 46 Reading class file: NioZipEncoding.class
[DEBUG] 47 Reading class file: ParallelScatterZipCreator$2.class
[DEBUG] 48 Reading class file: X0019_EncryptionRecipientCertificateList.class
[DEBUG] 49 Reading class file: ParallelScatterZipCreator$1.class
[DEBUG] 50 Reading class file: ParallelScatterZipCreator$DefaultBackingStoreSupplier.class
[DEBUG] 51 Reading class file: UnparseableExtraFieldData.class
[DEBUG] 52 Reading class file: ZipArchiveInputStream$CurrentEntry.class
[DEBUG] 53 Reading class file: ZipEightByteInteger.class
[DEBUG] 54 Reading class file: ZipFile$OffsetEntry.class
[DEBUG] 55 Reading class file: ZipEncodingHelper$SimpleEncodingHolder.class
[DEBUG] 56 Reading class file: ZipFile$BoundedInputStream.class
[DEBUG] 57 Reading class file: X0015_CertificateIdForFile.class
[DEBUG] 58 Reading class file: AbstractUnicodeExtraField.class
[DEBUG] 59 Reading class file: BitStream.class
[DEBUG] 60 Reading class file: ParallelScatterZipCreator$3.class
[DEBUG] 61 Reading class file: GeneralPurposeBit.class
[DEBUG] 62 Reading class file: UnixStat.class
[DEBUG] 63 Reading class file: UnicodePathExtraField.class
[DEBUG] 64 Reading class file: ZipConstants.class
[DEBUG] 65 Reading class file: ScatterStatistics.class
[DEBUG] 66 Reading class file: ZipEncodingHelper.class
[DEBUG] 67 Reading class file: ZipArchiveOutputStream$UnicodeExtraFieldPolicy.class
[DEBUG] 68 Reading class file: ZipArchiveInputStream$1.class
[DEBUG] 69 Reading class file: ScatterZipOutputStream.class
[DEBUG] 70 Reading class file: ZipFile$2.class
[DEBUG] 71 Reading class file: ZipFile.class
[DEBUG] 72 Reading class file: Zip64Mode.class
[DEBUG] 73 Reading class file: X000A_NTFS.class
[DEBUG] 74 Reading class file: X0017_StrongEncryptionHeader.class
[DEBUG] 75 Reading class file: X7875_NewUnix.class
[DEBUG] 76 Reading class file: UnsupportedZipFeatureException$Feature.class
[DEBUG] 77 Reading class file: UnshrinkingInputStream.class
[DEBUG] 78 Reading class file: ZipArchiveInputStream$BoundedInputStream.class
[DEBUG] 79 Reading class file: X0016_CertificateIdForCentralDirectory.class
[DEBUG] 80 Reading class file: ZipArchiveOutputStream$1.class
[DEBUG] 81 Reading class file: ScatterZipOutputStream$CompressedEntry.class
[DEBUG] 82 Reading class file: ZipEncoding.class
[DEBUG] 83 Reading class file: StreamCompressor.class
[DEBUG] 84 Reading class file: ZipArchiveEntryRequestSupplier.class
[DEBUG] 85 Reading class file: StreamCompressor$ScatterGatherBackingStoreCompressor.class
[DEBUG] 86 Reading class file: Zip64RequiredException.class
[DEBUG] 87 Reading class file: PKWareExtraHeader$EncryptionAlgorithm.class
[DEBUG] 88 Reading class file: StreamCompressor$SeekableByteChannelCompressor.class
[DEBUG] 89 Reading class file: UnsupportedZipFeatureException.class
[DEBUG] 90 Reading class file: ExtraFieldUtils$UnparseableExtraField.class
[DEBUG] 91 Reading class file: CircularBuffer.class
[DEBUG] 92 Reading class file: X5455_ExtendedTimestamp.class
[DEBUG] 93 Reading class file: ZipArchiveEntry.class
[DEBUG] 94 Reading class file: Zip64ExtendedInformationExtraField.class
[DEBUG] 95 Reading class file: ZipArchiveEntryRequest.class
[DEBUG] 96 Reading class file: ZipMethod.class
[DEBUG] 97 Reading class file: ZipFile$3.class
[DEBUG] 98 Reading class file: ZipExtraField.class
[DEBUG] 99 Reading class file: ZipShort.class
[DEBUG] 100 Reading class file: ParallelScatterZipCreator.class
[DEBUG] 101 Reading class file: ZipArchiveEntryPredicate.class
[DEBUG] 102 Reading class file: BinaryTree.class
[DEBUG] 103 Reading class file: ZipFile$Entry.class
[DEBUG] 104 Reading class file: ZipFile$1.class
[DEBUG] 105 Reading class file: StreamCompressor$DataOutputCompressor.class
[DEBUG] 106 Reading class file: PKWareExtraHeader$HashAlgorithm.class
[DEBUG] 107 Reading class file: StreamCompressor$OutputStreamCompressor.class
[DEBUG] 108 Reading class file: ZipLong.class
[DEBUG] 109 Reading class file: ZipArchiveOutputStream.class
[DEBUG] 110 Reading class file: UnicodeCommentExtraField.class
[DEBUG] 111 Reading class file: PKWareExtraHeader.class
[DEBUG] 112 Reading class file: ZipUtil.class
[DEBUG] 113 Reading class file: ZipArchiveOutputStream$CurrentEntry.class
[DEBUG] 114 Reading class file: JarMarker.class
[DEBUG] 115 Reading class file: ZipFile$NameAndComment.class
[DEBUG] 116 Reading class file: UnrecognizedExtraField.class
[DEBUG] 117 Reading class file: JarArchiveOutputStream.class
[DEBUG] 118 Reading class file: JarArchiveInputStream.class
[DEBUG] 119 Reading class file: JarArchiveEntry.class
[DEBUG] 120 Reading class file: TapeInputStream.class
[DEBUG] 121 Reading class file: DumpArchiveSummary.class
[DEBUG] 122 Reading class file: DumpArchiveConstants.class
[DEBUG] 123 Reading class file: UnrecognizedFormatException.class
[DEBUG] 124 Reading class file: DumpArchiveEntry.class
[DEBUG] 125 Reading class file: Dirent.class
[DEBUG] 126 Reading class file: TapeInputStream$1.class
[DEBUG] 127 Reading class file: DumpArchiveEntry$PERMISSION.class
[DEBUG] 128 Reading class file: UnsupportedCompressionAlgorithmException.class
[DEBUG] 129 Reading class file: DumpArchiveInputStream.class
[DEBUG] 130 Reading class file: DumpArchiveException.class
[DEBUG] 131 Reading class file: ShortFileException.class
[DEBUG] 132 Reading class file: InvalidFormatException.class
[DEBUG] 133 Reading class file: DumpArchiveEntry$TapeSegmentHeader.class
[DEBUG] 134 Reading class file: DumpArchiveEntry$TYPE.class
[DEBUG] 135 Reading class file: DumpArchiveInputStream$1.class
[DEBUG] 136 Reading class file: DumpArchiveConstants$COMPRESSION_TYPE.class
[DEBUG] 137 Reading class file: DumpArchiveUtil.class
[DEBUG] 138 Reading class file: DumpArchiveConstants$SEGMENT_TYPE.class
[DEBUG] 139 Reading class file: ArchiveException.class
[DEBUG] 140 Reading class file: ArchiveStreamProvider.class
[DEBUG] 141 Reading class file: TarArchiveSparseEntry.class
[DEBUG] 142 Reading class file: TarUtils$1.class
[DEBUG] 143 Reading class file: TarUtils.class
[DEBUG] 144 Reading class file: TarConstants.class
[DEBUG] 145 Reading class file: TarArchiveEntry.class
[DEBUG] 146 Reading class file: TarArchiveInputStream.class
[DEBUG] 147 Reading class file: TarArchiveOutputStream.class
[DEBUG] 148 Reading class file: ArchiveOutputStream.class
[DEBUG] 149 Reading class file: CpioArchiveOutputStream.class
[DEBUG] 150 Reading class file: CpioArchiveInputStream.class
[DEBUG] 151 Reading class file: CpioConstants.class
[DEBUG] 152 Reading class file: CpioArchiveEntry.class
[DEBUG] 153 Reading class file: CpioUtil.class
[DEBUG] 154 Reading class file: ArchiveStreamFactory.class
[DEBUG] 155 Reading class file: ArchiveInputStream.class
[DEBUG] 156 Reading class file: ArchiveStreamFactory$1.class
[DEBUG] 157 Reading class file: ArchiveEntry.class
[DEBUG] 158 Reading class file: StreamingNotSupportedException.class
[DEBUG] 159 Reading class file: MainHeader$Flags.class
[DEBUG] 160 Reading class file: LocalFileHeader.class
[DEBUG] 161 Reading class file: MainHeader.class
[DEBUG] 162 Reading class file: ArjArchiveEntry$HostOs.class
[DEBUG] 163 Reading class file: LocalFileHeader$FileTypes.class
[DEBUG] 164 Reading class file: ArjArchiveEntry.class
[DEBUG] 165 Reading class file: ArjArchiveInputStream.class
[DEBUG] 166 Reading class file: LocalFileHeader$Methods.class
[DEBUG] 167 Reading class file: LocalFileHeader$Flags.class
[DEBUG] 168 Reading class file: ArArchiveInputStream.class
[DEBUG] 169 Reading class file: ArArchiveOutputStream.class
[DEBUG] 170 Reading class file: ArArchiveEntry.class
[DEBUG] 171 Reading class file: PasswordRequiredException.class
[DEBUG] 172 Reading class file: FileBasedScatterGatherBackingStore.class
[DEBUG] 173 Reading class file: ScatterGatherBackingStore.class
[DEBUG] 174 Reading class file: InputStreamSupplier.class
[DEBUG] 175 Reading class file: ScatterGatherBackingStoreSupplier.class
[DEBUG] 176 Reading class file: ChangeSetPerformer$ArchiveInputStreamIterator.class
[DEBUG] 177 Reading class file: Change.class
[DEBUG] 178 Reading class file: ChangeSetPerformer.class
[DEBUG] 179 Reading class file: ChangeSetPerformer$ArchiveEntryIterator.class
[DEBUG] 180 Reading class file: ChangeSetResults.class
[DEBUG] 181 Reading class file: ChangeSet.class
[DEBUG] 182 Reading class file: ChangeSetPerformer$ZipFileIterator.class
[DEBUG] 183 Reading class file: GzipCompressorInputStream.class
[DEBUG] 184 Reading class file: GzipCompressorOutputStream.class
[DEBUG] 185 Reading class file: GzipUtils.class
[DEBUG] 186 Reading class file: GzipParameters.class
[DEBUG] 187 Reading class file: LZMACompressorInputStream.class
[DEBUG] 188 Reading class file: LZMAUtils.class
[DEBUG] 189 Reading class file: LZMACompressorOutputStream.class
[DEBUG] 190 Reading class file: LZMAUtils$CachedAvailability.class
[DEBUG] 191 Reading class file: CompressorOutputStream.class
[DEBUG] 192 Reading class file: CompressorStreamFactory.class
[DEBUG] 193 Reading class file: ZCompressorInputStream.class
[DEBUG] 194 Reading class file: FileNameUtil.class
[DEBUG] 195 Reading class file: CompressorInputStream.class
[DEBUG] 196 Reading class file: BZip2CompressorInputStream.class
[DEBUG] 197 Reading class file: BZip2Utils.class
[DEBUG] 198 Reading class file: BlockSort.class
[DEBUG] 199 Reading class file: BZip2CompressorOutputStream.class
[DEBUG] 200 Reading class file: BZip2Constants.class
[DEBUG] 201 Reading class file: CRC.class
[DEBUG] 202 Reading class file: BZip2CompressorInputStream$Data.class
[DEBUG] 203 Reading class file: BZip2CompressorOutputStream$Data.class
[DEBUG] 204 Reading class file: Rand.class
[DEBUG] 205 Reading class file: XZUtils.class
[DEBUG] 206 Reading class file: XZCompressorOutputStream.class
[DEBUG] 207 Reading class file: XZUtils$CachedAvailability.class
[DEBUG] 208 Reading class file: XZCompressorInputStream.class
[DEBUG] 209 Reading class file: CompressorStreamFactory$2.class
[DEBUG] 210 Reading class file: LZWInputStream.class
[DEBUG] 211 Reading class file: CompressorStreamFactory$1.class
[DEBUG] 212 Reading class file: DeflateCompressorInputStream.class
[DEBUG] 213 Reading class file: DeflateCompressorOutputStream.class
[DEBUG] 214 Reading class file: DeflateParameters.class
[DEBUG] 215 Reading class file: Pack200Strategy.class
[DEBUG] 216 Reading class file: Pack200CompressorOutputStream.class
[DEBUG] 217 Reading class file: Pack200Utils.class
[DEBUG] 218 Reading class file: Pack200CompressorInputStream.class
[DEBUG] 219 Reading class file: InMemoryCachingStreamBridge.class
[DEBUG] 220 Reading class file: StreamBridge.class
[DEBUG] 221 Reading class file: TempFileCachingStreamBridge$1.class
[DEBUG] 222 Reading class file: TempFileCachingStreamBridge.class
[DEBUG] 223 Reading class file: Pack200Strategy$1.class
[DEBUG] 224 Reading class file: Pack200Strategy$2.class
[DEBUG] 225 Reading class file: Pack200CompressorInputStream$1.class
[DEBUG] 226 Reading class file: PureJavaCrc32C.class
[DEBUG] 227 Reading class file: FramedSnappyCompressorInputStream.class
[DEBUG] 228 Reading class file: FramedSnappyDialect.class
[DEBUG] 229 Reading class file: SnappyCompressorInputStream.class
[DEBUG] 230 Reading class file: CompressorException.class
[DEBUG] 231 Reading class file: CompressorStreamProvider.class
[DEBUG] 232 Reading class file: CharsetNames.class
[DEBUG] 233 Reading class file: BoundedInputStream.class
[DEBUG] 234 Reading class file: SeekableInMemoryByteChannel.class
[DEBUG] 235 Reading class file: ArchiveUtils.class
[DEBUG] 236 Reading class file: IOUtils.class
[DEBUG] 237 Reading class file: Iterators.class
[DEBUG] 238 Reading class file: FlushShieldFilterOutputStream.class
[DEBUG] 239 Reading class file: Sets.class
[DEBUG] 240 Reading class file: CountingInputStream.class
[DEBUG] 241 Reading class file: CRC32VerifyingInputStream.class
[DEBUG] 242 Reading class file: ChecksumVerifyingInputStream.class
[DEBUG] 243 Reading class file: ServiceLoaderIterator.class
[DEBUG] 244 Reading class file: CountingOutputStream.class
[DEBUG] 245 Reading class file: Charsets.class
[DEBUG] 246 Reading class file: Lists.class
[DEBUG] 247 Reading class file: BitInputStream.class
[DEBUG] 1: Done: org.apache.commons.compress.archivers.sevenz.DeltaDecoder
[DEBUG] 2: Done: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream
[DEBUG] 3: Done: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream
[DEBUG] 4: Done: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream
[DEBUG] 5: Done: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream
[DEBUG] 6: Done: org.apache.commons.compress.compressors.CompressorOutputStream
[DEBUG] 7: Done: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder
[DEBUG] 8: Done: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest
[DEBUG] 9: Done: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator
[DEBUG] 10: Done: org.apache.commons.compress.utils.Charsets
[DEBUG] 11: Done: org.apache.commons.compress.utils.CountingInputStream
[DEBUG] 12: Done: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE
[DEBUG] 13: Done: org.apache.commons.compress.archivers.zip.PKWareExtraHeader
[DEBUG] 14: Done: org.apache.commons.compress.archivers.jar.JarArchiveEntry
[DEBUG] 15: Done: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream
[DEBUG] 16: Done: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream
[DEBUG] 17: Done: org.apache.commons.compress.archivers.sevenz.StartHeader
[DEBUG] 18: Done: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream
[DEBUG] 19: Done: org.apache.commons.compress.archivers.dump.DumpArchiveUtil
[DEBUG] 20: Done: org.apache.commons.compress.compressors.z.ZCompressorInputStream
[DEBUG] 21: Done: org.apache.commons.compress.archivers.dump.TapeInputStream
[DEBUG] 22: Done: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
[DEBUG] 23: Done: org.apache.commons.compress.archivers.zip.StreamCompressor
[DEBUG] 24: Done: org.apache.commons.compress.compressors.FileNameUtil
[DEBUG] 25: Done: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream
[DEBUG] 26: Done: org.apache.commons.compress.archivers.ArchiveException
[DEBUG] 27: Done: org.apache.commons.compress.archivers.zip.ZipEncodingHelper
[DEBUG] 28: Done: org.apache.commons.compress.archivers.zip.BitStream
[DEBUG] 29: Done: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder
[DEBUG] 30: Done: org.apache.commons.compress.utils.Lists
[DEBUG] 31: Done: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge
[DEBUG] 32: Done: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry
[DEBUG] 33: Done: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C
[DEBUG] 34: Done: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding
[DEBUG] 35: Done: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder
[DEBUG] 36: Done: org.apache.commons.compress.archivers.zip.BinaryTree
[DEBUG] 37: Done: org.apache.commons.compress.compressors.bzip2.CRC
[DEBUG] 38: Done: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream
[DEBUG] 39: Done: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream
[DEBUG] 40: Done: org.apache.commons.compress.archivers.dump.DumpArchiveException
[DEBUG] 41: Done: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader
[DEBUG] 42: Done: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream
[DEBUG] 43: Done: org.apache.commons.compress.archivers.sevenz.StreamMap
[DEBUG] 44: Done: org.apache.commons.compress.utils.Iterators
[DEBUG] 45: Done: org.apache.commons.compress.archivers.sevenz.Coder
[DEBUG] 46: Done: org.apache.commons.compress.utils.FlushShieldFilterOutputStream
[DEBUG] 47: Done: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor
[DEBUG] 48: Done: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream
[DEBUG] 49: Done: org.apache.commons.compress.archivers.ArchiveInputStream
[DEBUG] 50: Done: org.apache.commons.compress.archivers.zip.UnicodePathExtraField
[DEBUG] 51: Done: org.apache.commons.compress.compressors.pack200.Pack200Strategy
[DEBUG] 52: Done: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder
[DEBUG] 53: Done: org.apache.commons.compress.archivers.tar.TarArchiveInputStream
[DEBUG] 54: Done: org.apache.commons.compress.archivers.jar.JarArchiveInputStream
[DEBUG] 55: Done: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability
[DEBUG] 56: Done: org.apache.commons.compress.compressors.xz.XZUtils
[DEBUG] 57: Done: org.apache.commons.compress.compressors.lzw.LZWInputStream
[DEBUG] 58: Done: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream
[DEBUG] 59: Done: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator
[DEBUG] 60: Done: org.apache.commons.compress.compressors.gzip.GzipUtils
[DEBUG] 61: Done: org.apache.commons.compress.archivers.dump.ShortFileException
[DEBUG] 62: Done: org.apache.commons.compress.archivers.dump.DumpArchiveEntry
[DEBUG] 63: Done: org.apache.commons.compress.archivers.cpio.CpioUtil
[DEBUG] 64: Done: org.apache.commons.compress.archivers.arj.ArjArchiveEntry
[DEBUG] 65: Done: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile
[DEBUG] 66: Done: org.apache.commons.compress.archivers.zip.ScatterStatistics
[DEBUG] 67: Done: org.apache.commons.compress.archivers.tar.TarUtils
[DEBUG] 68: Done: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField
[DEBUG] 69: Done: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData
[DEBUG] 70: Done: org.apache.commons.compress.archivers.dump.UnrecognizedFormatException
[DEBUG] 71: Done: org.apache.commons.compress.utils.CRC32VerifyingInputStream
[DEBUG] 72: Done: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException
[DEBUG] 73: Done: org.apache.commons.compress.archivers.sevenz.SevenZFile
[DEBUG] 74: Done: org.apache.commons.compress.archivers.ar.ArArchiveInputStream
[DEBUG] 75: Done: org.apache.commons.compress.compressors.bzip2.BZip2Utils
[DEBUG] 76: Done: org.apache.commons.compress.compressors.CompressorInputStream
[DEBUG] 77: Done: org.apache.commons.compress.compressors.bzip2.BlockSort
[DEBUG] 78: Done: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION
[DEBUG] 79: Done: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp
[DEBUG] 80: Done: org.apache.commons.compress.archivers.ar.ArArchiveEntry
[DEBUG] 81: Done: org.apache.commons.compress.archivers.zip.ZipArchiveEntry
[DEBUG] 82: Done: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry
[DEBUG] 83: Done: org.apache.commons.compress.archivers.sevenz.LZMADecoder
[DEBUG] 84: Done: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor
[DEBUG] 85: Done: org.apache.commons.compress.archivers.arj.MainHeader
[DEBUG] 86: Done: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream
[DEBUG] 87: Done: org.apache.commons.compress.archivers.sevenz.BindPair
[DEBUG] 88: Done: org.apache.commons.compress.archivers.zip.GeneralPurposeBit
[DEBUG] 89: Done: org.apache.commons.compress.archivers.sevenz.CoderBase
[DEBUG] 90: Done: org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile
[DEBUG] 91: Done: org.apache.commons.compress.compressors.CompressorException
[DEBUG] 92: Done: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator
[DEBUG] 93: Done: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor
[DEBUG] 94: Done: org.apache.commons.compress.archivers.zip.FallbackZipEncoding
[DEBUG] 95: Done: org.apache.commons.compress.utils.ServiceLoaderIterator
[DEBUG] 96: Done: org.apache.commons.compress.utils.ChecksumVerifyingInputStream
[DEBUG] 97: Done: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder
[DEBUG] 98: Done: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature
[DEBUG] 99: Done: org.apache.commons.compress.archivers.zip.JarMarker
[DEBUG] 100: Done: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream
[DEBUG] 101: Done: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream
[DEBUG] 102: Done: org.apache.commons.compress.compressors.CompressorStreamFactory
[DEBUG] 103: Done: org.apache.commons.compress.archivers.zip.ZipEightByteInteger
[DEBUG] 104: Done: org.apache.commons.compress.archivers.zip.X0014_X509Certificates
[DEBUG] 105: Done: org.apache.commons.compress.archivers.sevenz.Folder
[DEBUG] 106: Done: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability
[DEBUG] 107: Done: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration
[DEBUG] 108: Done: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream
[DEBUG] 109: Done: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField
[DEBUG] 110: Done: org.apache.commons.compress.archivers.sevenz.SevenZMethod
[DEBUG] 111: Done: org.apache.commons.compress.changes.ChangeSetPerformer
[DEBUG] 112: Done: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder
[DEBUG] 113: Done: org.apache.commons.compress.archivers.zip.Zip64Mode
[DEBUG] 114: Done: org.apache.commons.compress.compressors.xz.XZCompressorInputStream
[DEBUG] 115: Done: org.apache.commons.compress.archivers.StreamingNotSupportedException
[DEBUG] 116: Done: org.apache.commons.compress.archivers.dump.DumpArchiveConstants
[DEBUG] 117: Done: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream
[DEBUG] 118: Done: org.apache.commons.compress.changes.ChangeSet
[DEBUG] 119: Done: org.apache.commons.compress.utils.BitInputStream
[DEBUG] 120: Done: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo
[DEBUG] 121: Done: org.apache.commons.compress.archivers.zip.ZipFile
[DEBUG] 122: Done: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier
[DEBUG] 123: Done: org.apache.commons.compress.archivers.zip.ExtraFieldUtils
[DEBUG] 124: Done: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader
[DEBUG] 125: Done: org.apache.commons.compress.archivers.zip.ZipShort
[DEBUG] 126: Done: org.apache.commons.compress.archivers.dump.DumpArchiveSummary
[DEBUG] 127: Done: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField
[DEBUG] 128: Done: org.apache.commons.compress.archivers.zip.ZipFile.Entry
[DEBUG] 129: Done: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField
[DEBUG] 130: Done: org.apache.commons.compress.compressors.pack200.Pack200Utils
[DEBUG] 131: Done: org.apache.commons.compress.archivers.zip.X000A_NTFS
[DEBUG] 132: Done: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
[DEBUG] 133: Done: org.apache.commons.compress.compressors.deflate.DeflateParameters
[DEBUG] 134: Done: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream
[DEBUG] 135: Done: org.apache.commons.compress.archivers.tar.TarArchiveEntry
[DEBUG] 136: Done: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder
[DEBUG] 137: Done: org.apache.commons.compress.archivers.zip.NioZipEncoding
[DEBUG] 138: Done: org.apache.commons.compress.archivers.arj.MainHeader.Flags
[DEBUG] 139: Done: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment
[DEBUG] 140: Done: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge
[DEBUG] 141: Done: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream
[DEBUG] 142: Done: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data
[DEBUG] 143: Done: org.apache.commons.compress.archivers.zip.X7875_NewUnix
[DEBUG] 144: Done: org.apache.commons.compress.utils.ArchiveUtils
[DEBUG] 145: Done: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper
[DEBUG] 146: Done: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data
[DEBUG] 147: Done: org.apache.commons.compress.utils.IOUtils
[DEBUG] 148: Done: org.apache.commons.compress.archivers.zip.AsiExtraField
[DEBUG] 149: Done: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore
[DEBUG] 150: Done: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream
[DEBUG] 151: Done: org.apache.commons.compress.archivers.ArchiveOutputStream
[DEBUG] 152: Done: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream
[DEBUG] 153: Done: org.apache.commons.compress.compressors.gzip.GzipParameters
[DEBUG] 154: Done: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar
[DEBUG] 155: Done: org.apache.commons.compress.archivers.sevenz.Coders
[DEBUG] 156: Done: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy
[DEBUG] 157: Done: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream
[DEBUG] 158: Done: org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods
[DEBUG] 159: Done: org.apache.commons.compress.utils.CountingOutputStream
[DEBUG] 160: Done: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect
[DEBUG] 161: Done: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream
[DEBUG] 162: Done: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry
[DEBUG] 163: Done: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE
[DEBUG] 164: Done: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE
[DEBUG] 165: Done: org.apache.commons.compress.archivers.dump.Dirent
[DEBUG] 166: Done: org.apache.commons.compress.compressors.lzma.LZMAUtils
[DEBUG] 167: Done: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
[DEBUG] 168: Done: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField
[DEBUG] 169: Done: org.apache.commons.compress.archivers.zip.ZipMethod
[DEBUG] 170: Done: org.apache.commons.compress.utils.SeekableInMemoryByteChannel
[DEBUG] 171: Done: org.apache.commons.compress.PasswordRequiredException
[DEBUG] 172: Done: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory
[DEBUG] 173: Done: org.apache.commons.compress.archivers.sevenz.Archive
[DEBUG] 174: Done: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream
[DEBUG] 175: Done: org.apache.commons.compress.archivers.ArchiveStreamFactory
[DEBUG] 176: Done: org.apache.commons.compress.archivers.zip.ZipLong
[DEBUG] 177: Done: org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList
[DEBUG] 178: Done: org.apache.commons.compress.archivers.zip.ZipUtil
[DEBUG] 179: Done: org.apache.commons.compress.archivers.arj.LocalFileHeader
[DEBUG] 180: Done: org.apache.commons.compress.compressors.pack200.StreamBridge
[DEBUG] 181: Done: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream
[DEBUG] 182: Done: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream
[DEBUG] 183: Done: org.apache.commons.compress.archivers.zip.ExplodingInputStream
[DEBUG] 184: Done: org.apache.commons.compress.changes.ChangeSetResults
[DEBUG] 185: Done: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry
[DEBUG] 186: Done: org.apache.commons.compress.utils.BoundedInputStream
[DEBUG] 187: Done: org.apache.commons.compress.utils.Sets
[DEBUG] 188: Done: org.apache.commons.compress.archivers.zip.CircularBuffer
[DEBUG] 189: Done: org.apache.commons.compress.changes.Change
[DEBUG] 190: Done: org.apache.commons.compress.archivers.zip.ZipEncoding
[DEBUG] 191: Done: org.apache.commons.compress.parallel.InputStreamSupplier
[DEBUG] 192: Done: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator
[DEBUG] 193: Done: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm
[DEBUG] 194: Done: org.apache.commons.compress.archivers.zip.ZipExtraField
[DEBUG] 195: Done: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm
[DEBUG] 196: Done: org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException
[DEBUG] 197: Done: org.apache.commons.compress.archivers.ArchiveEntry
[DEBUG] 198: Done: org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor
[DEBUG] 199: Done: org.apache.commons.compress.parallel.ScatterGatherBackingStore
[DEBUG] 200: Done: org.apache.commons.compress.archivers.cpio.CpioConstants
[DEBUG] 201: Done: org.apache.commons.compress.archivers.dump.InvalidFormatException
[DEBUG] 202: Done: org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry
[DEBUG] 203: Done: org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier
[DEBUG] 204: Done: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs
[DEBUG] 205: Done: org.apache.commons.compress.compressors.CompressorStreamProvider
[DEBUG] 206: Done: org.apache.commons.compress.compressors.bzip2.Rand
[DEBUG] 207: Done: org.apache.commons.compress.compressors.bzip2.BZip2Constants
[DEBUG] 208: Done: org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate
[DEBUG] 209: Done: org.apache.commons.compress.archivers.tar.TarConstants
[DEBUG] 210: Done: org.apache.commons.compress.archivers.zip.UnixStat
[DEBUG] 211: Done: org.apache.commons.compress.archivers.zip.Zip64RequiredException
[DEBUG] 212: Done: org.apache.commons.compress.archivers.ArchiveStreamProvider
[DEBUG] 213: Done: org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags
[DEBUG] 214: Done: org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes
[DEBUG] Adding to touch set ...
[DEBUG] Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.SEGMENT_TYPE(int)
Test: org.apache.commons.compress.archivers.zip.JarMarker
Test: org.apache.commons.compress.archivers.zip.StreamCompressor
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes()
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
Test: org.apache.commons.compress.archivers.zip.ZipUtil
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(DataOutput)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(DataOutput)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[])
Test: org.apache.commons.compress.utils.Charsets.UTF_16BE : Charset
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(ZipEightByteInteger)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO : ZipShort
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(Date)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH : byte[]
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.buf : byte[]
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[])
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(byte[])
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(byte[])
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.SeekableByteChannelCompressor(Deflater,SeekableByteChannel)
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.UnparseableExtraFieldData()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(SevenZMethod)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.compressedCrc32 : CRC32
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode()
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String)
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.numberOptionOrDefault(Object,int)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(boolean)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.dataStart : long
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(byte[])
Test: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.PPMD : ZipMethod
Test: org.apache.commons.compress.compressors.xz.XZUtils.HEADER_MAGIC : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.compressionLevel : int
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map<String, String>,TarArchiveEntry)
Test: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag : boolean
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(int)
Test: org.apache.commons.compress.utils.Charsets.toCharset(String)
Test: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues()
Test: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField()
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.generateMTFValues_yy : byte[]
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(OutputStream)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.getAndMoveToFrontDecode_yy : char[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding : String
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.AES256SHA256 : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.hashCode()
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(InputStream,DeflateParameters)
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum()
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.ArchiveInputStream.getBytesRead()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.Feature(String)
Test: org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(DumpArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN : TYPE
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[])
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date)
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(ZipEightByteInteger)
Test: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE : CachedAvailability
Test: org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable()
Test: org.apache.commons.compress.archivers.jar.JarArchiveEntry
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry
Test: org.apache.commons.compress.archivers.zip.ZipFile.Entry
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.parent : int[]
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.name : String
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(OutputStream,GzipParameters)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(int)
Test: org.apache.commons.compress.archivers.zip.Zip64Mode.Never : Zip64Mode
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(DataOutput)
Test: org.apache.commons.compress.changes.Change.type()
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId()
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.getEncoding()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(long)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current : CurrentEntry
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,int,String)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETUID : PERMISSION
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor()
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(int)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.reset()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.SevenZMethod(byte[])
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(String)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.oneByte : byte[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(long)
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.oneByte : byte[]
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.writeOut(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.size : long
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(Date)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders()
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(int)
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(Class<?>)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.crc : CRC32
Test: org.apache.commons.compress.compressors.CompressorInputStream.count(int)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders()
Test: org.apache.commons.compress.utils.Charsets.US_ASCII : Charset
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EMPTY : byte[]
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_THUMB_FILTER : SevenZMethod
Test: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(OutputStream,String)
Test: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder
Test: org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finished : boolean
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean,boolean)
Test: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass()
Test: org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION : ZipMethod
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[],int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(SevenZMethod)
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.available()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(Date)
Test: org.apache.commons.compress.archivers.zip.ZipFile.wordBuf : byte[]
Test: org.apache.commons.compress.utils.Sets.newHashSet(E...)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.initTT(int)
Test: org.apache.commons.compress.archivers.zip.JarMarker.NULL : ZipShort
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.read()
Test: org.apache.commons.compress.utils.CountingOutputStream.write(int)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.WAVPACK : ZipMethod
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(DataOutput)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(File)
Test: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder
Test: org.apache.commons.compress.archivers.zip.BitStream.nextByte()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FIFO : TYPE
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(int)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2 : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE : FramedSnappyDialect
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh : int[]
Test: org.apache.commons.compress.archivers.zip.BitStream.nextBit()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream()
Test: org.apache.commons.compress.archivers.cpio.CpioUtil
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)
Test: org.apache.commons.compress.archivers.zip.CircularBuffer.available()
Test: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.getInputView()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(byte[],ZipEncoding)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES : TarArchiveEntry[]
Test: org.apache.commons.compress.archivers.ArchiveException.ArchiveException(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(DataOutput)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(boolean)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[])
Test: org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod()
Test: org.apache.commons.compress.archivers.ArchiveException.ArchiveException(String,Exception)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_WRITE : PERMISSION
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish()
Test: org.apache.commons.compress.archivers.zip.ZipShort.hashCode()
Test: org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead : long
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.flush()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map<String, String>)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryBytesRead : long
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(String)
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.crc : long
Test: org.apache.commons.compress.archivers.zip.JarMarker.ID : ZipShort
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive()
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Map<String, String>)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readSize()
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(int)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry)
Test: org.apache.commons.compress.archivers.arj.MainHeader.Flags.Flags()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,int)
Test: org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER : ZipLong
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCrc()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.get()
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.hasNext()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes()
Test: org.apache.commons.compress.changes.Change.Change(ArchiveEntry,InputStream,boolean)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(long)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders()
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel()
Test: org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(String)
Test: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getHeaderId()
Test: org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING : ZipEncoding
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.close()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongLinkEntry()
Test: org.apache.commons.compress.utils.Iterators
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.gid : long
Test: org.apache.commons.compress.archivers.sevenz.Coder.Coder()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(int)
Test: org.apache.commons.compress.archivers.sevenz.Coder
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder
Test: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CachedAvailability()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(String)
Test: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer : byte[]
Test: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.canEncode(String)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read()
Test: org.apache.commons.compress.archivers.zip.ZipLong.equals(Object)
Test: org.apache.commons.compress.archivers.zip.BinaryTree
Test: org.apache.commons.compress.utils.Charsets.ISO_8859_1 : Charset
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decodeByte(byte)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(OutputStream)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finalize()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(DataInputStream)
Test: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(InputStream)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH : byte[]
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[])
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.LZMADecoder()
Test: org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries : List
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,int,String)
Test: org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes : Attributes
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForNonAsciiNames : boolean
Test: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getNTRec()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated : boolean
Test: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.SubStreamsInfo()
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(boolean)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean)
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,int)
Test: org.apache.commons.compress.utils.BoundedInputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens : int[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean)
Test: org.apache.commons.compress.archivers.ArchiveInputStream.count(long)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.STORED : ZipMethod
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(byte[])
Test: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[])
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj()
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO : byte[]
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.tlScatterStreams : ThreadLocal
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE : CachedAvailability
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method : int
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate()
Test: org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG : ZipLong
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE : CachedAvailability
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.getKey()
Test: org.apache.commons.compress.compressors.FileNameUtil.compressSuffix : Map<String, String>
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE : PERMISSION
Test: org.apache.commons.compress.utils.BoundedInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(ZipLong)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset : int
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(int)
Test: org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],boolean)
Test: org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(int,int)
Test: org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)
Test: org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataLength()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int)
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability()
Test: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.cftab : int[]
Test: org.apache.commons.compress.utils.BitInputStream.clearBitCache()
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.OutputStreamCompressor(Deflater,OutputStream)
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.PureJavaCrc32C()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed : boolean
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.DeltaDecoder()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten()
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(long,long)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer : byte[]
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer()
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(DataOutput)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(long)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel()
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP : UnparseableExtraField
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close()
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.ArchiveInputStreamIterator(ArchiveInputStream)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException
Test: org.apache.commons.compress.archivers.zip.JarMarker.getInstance()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString()
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.available()
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmaj : long
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate()
Test: org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(ZipFile)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_code : int[][]
Test: org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(String)
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(ZipArchiveEntryRequest,long,long,long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short)
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readFully(DataInputStream,byte[])
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished : boolean
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selectorMtf : byte[]
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.currBlkIdx : int
Test: org.apache.commons.compress.archivers.dump.TapeInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry()
Test: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream()
Test: org.apache.commons.compress.utils.BitInputStream.BitInputStream(InputStream,ByteOrder)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID()
Test: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1 : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>)
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.HEX_DIGITS : byte[]
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset()
Test: org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream)
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.Dirent.getIno()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock()
Test: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(ZipShort)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory
Test: org.apache.commons.compress.archivers.zip.ZipMethod.JPEG : ZipMethod
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files : List
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.X0014_X509Certificates
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(boolean)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fmin(int,int)
Test: org.apache.commons.compress.compressors.bzip2.CRC.getFinalCRC()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry()
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[])
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(String)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.getInputStream()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG : byte[]
Test: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID : ZipShort
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(OutputStream,int)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getHeaderId()
Test: org.apache.commons.compress.compressors.bzip2.CRC.CRC()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin()
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.close()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName()
Test: org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(Coder)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(InputStream,FramedSnappyDialect)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader()
Test: org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf : ByteBuffer
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(String)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength()
Test: org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(InputStream,long,long)
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.NONE : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_SPARC_FILTER : SevenZMethod
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.flush()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField
Test: org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(long)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(ZipShort)
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipFile.Entry.Entry(OffsetEntry)
Test: org.apache.commons.compress.utils.CountingOutputStream.count(long)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Pack200Strategy)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.UnicodeExtraFieldPolicy(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes : int
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(BZip2CompressorOutputStream.Data,int,int,int,int)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(String,byte[],int,int)
Test: org.apache.commons.compress.changes.ChangeSetResults.deleted(String)
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream.init()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(BZip2CompressorOutputStream.Data,int,int,int,int)
Test: org.apache.commons.compress.changes.ChangeSetPerformer
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.longFileMode : int
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf : byte[]
Test: org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(InputStream,long)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.startedAt : long
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode()
Test: org.apache.commons.compress.utils.BitInputStream
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[])
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(ChangeSet)
Test: org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.compressionLevel : int
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[])
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag : boolean
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_cost : short[]
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(byte[])
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,boolean)
Test: org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(String)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable<? extends SevenZMethodConfiguration>)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.ASCII : ZipEncoding
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId()
Test: org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(String)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.closed : boolean
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(int)
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(File)
Test: org.apache.commons.compress.utils.ServiceLoaderIterator.getNextServiceLoader()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(int)
Test: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.compressors.pack200.StreamBridge
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.finish()
Test: org.apache.commons.compress.archivers.zip.UnicodePathExtraField
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG : byte[]
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(Date)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(int)
Test: org.apache.commons.compress.utils.CountingInputStream.read(byte[])
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int)
Test: org.apache.commons.compress.archivers.sevenz.StreamMap.StreamMap()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.PERMISSION(int)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(long)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.CircularBuffer.get()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(String)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(BigInteger)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names : Map<Integer, Dirent>
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummy()
Test: org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator : Comparator
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.crc : CRC32
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File)
Test: org.apache.commons.compress.archivers.zip.ZipFile.nameMap : Map<String, LinkedList>
Test: org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(byte[])
Test: org.apache.commons.compress.compressors.pack200.Pack200Strategy.Pack200Strategy()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method : int
Test: org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.INCS : int[]
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[])
Test: org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)
Test: org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders()
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.writeOut(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(ZipExtraField)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(Date)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)
Test: org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(long)
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.getComment()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(String)
Test: org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams : int
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields : UnicodeExtraFieldPolicy
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(DataInputStream)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(Object)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(GzipParameters)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(DataOutput)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getIno()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.unzftab : int[]
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(ScatterGatherBackingStoreSupplier)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData()
Test: org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(String)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime()
Test: org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize : int
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(Date)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND : BigInteger
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(ArchiveEntry)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData()
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream()
Test: org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.finalize()
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.crc : CRC32
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance : Calendar
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset()
Test: org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(String)
Test: org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(long)
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.reset()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.ZipLong.clone()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(DataOutput)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish()
Test: org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrcValue()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin()
Test: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.flush()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY : byte[]
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataData()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel()
Test: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream
Test: org.apache.commons.compress.archivers.sevenz.StreamMap
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getMetaData()
Test: org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(int)
Test: org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(SeekableByteChannel)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(InputStream,ByteOrder)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf : byte[]
Test: org.apache.commons.compress.changes.ChangeSetResults.ChangeSetResults()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor : int
Test: org.apache.commons.compress.changes.Change.getEntry()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(String,String)
Test: org.apache.commons.compress.archivers.dump.Dirent.getName()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(long)
Test: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.archivers.ArchiveInputStream.read()
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CachedAvailability()
Test: org.apache.commons.compress.archivers.sevenz.Archive.Archive()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finished : boolean
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.incrementCodeSize()
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(int)
Test: org.apache.commons.compress.PasswordRequiredException
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(long)
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.zlibHeader : boolean
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.dirFlag : boolean
Test: org.apache.commons.compress.archivers.StreamingNotSupportedException
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(BZip2CompressorOutputStream.Data)
Test: org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base : int[][]
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(boolean)
Test: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.close()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_EXEC : PERMISSION
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(int)
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.write(int)
Test: org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(int)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[])
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice()
Test: org.apache.commons.compress.utils.IOUtils.closeQuietly(Closeable)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters : GzipParameters
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_dd : int[]
Test: org.apache.commons.compress.compressors.bzip2.BZip2Utils
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize()
Test: org.apache.commons.compress.archivers.arj.LocalFileHeader
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_READ : PERMISSION
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()
Test: org.apache.commons.compress.archivers.zip.ZipMethod.LZMA : ZipMethod
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID()
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(Object)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(LocalFileHeader)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType()
Test: org.apache.commons.compress.archivers.zip.JarMarker.DEFAULT : JarMarker
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(ZipShort)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf : Inflater
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.unseqToSeq : byte[]
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream)
Test: org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(Class,ClassLoader)
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.count(long)
Test: org.apache.commons.compress.utils.ServiceLoaderIterator
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(byte)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.clone()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FILE : TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode)
Test: org.apache.commons.compress.utils.Charsets.UTF_16LE : Charset
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[])
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength()
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.getEntry(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(DataOutput)
Test: org.apache.commons.compress.archivers.ArchiveOutputStream
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8 : boolean
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawName()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(byte[])
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.Simple8BitChar(byte,char)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams : ArrayList
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.END : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize()
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.hasNext()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock()
Test: org.apache.commons.compress.archivers.zip.FallbackZipEncoding
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName()
Test: org.apache.commons.compress.archivers.zip.PKWareExtraHeader
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(SevenZArchiveEntry)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(byte[],int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(long)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum : PureJavaCrc32C
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize()
Test: org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(Archive)
Test: org.apache.commons.compress.utils.FlushShieldFilterOutputStream
Test: org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(byte[])
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.totalWrittenToOutputStream : long
Test: org.apache.commons.compress.archivers.sevenz.Folder.Folder()
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.TYPE(int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.COMPRESSION_TYPE(int)
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor : int
Test: org.apache.commons.compress.compressors.bzip2.CRC.crc32Table : int[]
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(int,int,InputStream)
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.endReached : boolean
Test: org.apache.commons.compress.utils.FlushShieldFilterOutputStream.FlushShieldFilterOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor
Test: org.apache.commons.compress.archivers.zip.CircularBuffer
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode()
Test: org.apache.commons.compress.archivers.sevenz.CoderBase
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2 : SevenZMethod
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(Callable)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize()
Test: org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock : Object
Test: org.apache.commons.compress.archivers.ArchiveInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len : byte[][]
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW : UnparseableExtraField
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(String)
Test: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream
Test: org.apache.commons.compress.compressors.CompressorInputStream
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.SPLITTING : Feature
Test: org.apache.commons.compress.utils.Charsets.UTF_16 : Charset
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(DataInputStream)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sentMTFValues4_inUse16 : boolean[]
Test: org.apache.commons.compress.archivers.zip.ScatterStatistics
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes()
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String)
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc : CRC
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(long)
Test: org.apache.commons.compress.compressors.bzip2.CRC
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[])
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD : Feature
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.shortBuf : byte[]
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm : int[][]
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available()
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.SimpleEncodingHolder(char[])
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,boolean)
Test: org.apache.commons.compress.archivers.zip.NioZipEncoding
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.close()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean)
Test: org.apache.commons.compress.archivers.zip.BitStream.BitStream(InputStream)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN : int
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.flush()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(long)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.DOS_TIME_MIN : byte[]
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(int)
Test: org.apache.commons.compress.compressors.pack200.Pack200Utils
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encodeHighChar(char)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues2_pos : byte[]
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees()
Test: org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG : ZipLong
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int)
Test: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.dump.UnrecognizedFormatException
Test: org.apache.commons.compress.compressors.CompressorStreamFactory
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength : int
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(int)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Calendar,long,byte[],int)
Test: org.apache.commons.compress.archivers.tar.TarUtils
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.close()
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(Coder)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getHeaderId()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.TapeSegmentHeader()
Test: org.apache.commons.compress.archivers.sevenz.Coder.properties : byte[]
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse : boolean[]
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[])
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close()
Test: org.apache.commons.compress.archivers.sevenz.Coders
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.temp_charArray2d : char[][]
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(long)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector : byte[]
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks()
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue()
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore
Test: org.apache.commons.compress.changes.ChangeSet.changes : Set
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData()
Test: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(Feature,ZipArchiveEntry)
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.close()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongNameEntry()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.tmpbuf : byte[]
Test: org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING : ZipEncoding
Test: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime()
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)
Test: org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(int,boolean)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.available()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close()
Test: org.apache.commons.compress.archivers.sevenz.Coders.CODER_MAP : Map<SevenZMethod, CoderBase>
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding : ZipEncoding
Test: org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.operatingSystem : int
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(String,long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(File)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.clone()
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object)
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream)
Test: org.apache.commons.compress.archivers.ArchiveInputStream.single : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name : String
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock()
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map<String, String>,String,byte,String)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes()
Test: org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)
Test: org.apache.commons.compress.utils.Lists
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(boolean)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(ZipLong)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getGroupId()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(long)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(Object)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.FramedSnappyDialect(boolean,boolean)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf : byte[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin : long
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer : CircularBuffer
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(int)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag : boolean
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[])
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.isCompressed : boolean
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(int)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionDoneAt : long
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.uid : int
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.entry : ZipArchiveEntry
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.crc : CRC32
Test: org.apache.commons.compress.utils.Charsets
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.entriesRead : int
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength : long
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.isLink()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(byte[])
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.WHITEOUT : TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry)
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.seqToUnseq : byte[]
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(boolean)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory()
Test: org.apache.commons.compress.archivers.zip.ZipMethod.AES_ENCRYPTED : ZipMethod
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream
Test: org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet : List
Test: org.apache.commons.compress.compressors.xz.XZUtils
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size : long
Test: org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(SeekableByteChannel)
Test: org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byte[])
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf : byte[]
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(DataOutput)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished : boolean
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(int)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(CpioArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.dataOffset : long
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,byte)
Test: org.apache.commons.compress.archivers.zip.ZipMethod
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.canAcceptOptions(Object)
Test: org.apache.commons.compress.archivers.zip.X0014_X509Certificates.X0014_X509Certificates()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(Iterable<? extends SevenZMethodConfiguration>)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink()
Test: org.apache.commons.compress.archivers.zip.ZipShort.clone()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(boolean)
Test: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.getHeaderId()
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer : byte[]
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(ExecutorService)
Test: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_EXEC : PERMISSION
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.offset : long
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.close()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(long)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names : HashMap<String, CpioArchiveEntry>
Test: org.apache.commons.compress.archivers.zip.NioZipEncoding.NioZipEncoding(Charset)
Test: org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.CLRI : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.SOCKET : TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isCompressed()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init()
Test: org.apache.commons.compress.compressors.CompressorException
Test: org.apache.commons.compress.archivers.dump.DumpArchiveSummary
Test: org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String,boolean)
Test: org.apache.commons.compress.compressors.FileNameUtil
Test: org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(String)
Test: org.apache.commons.compress.utils.CountingInputStream
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[],boolean)
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(OutputStream)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode : int
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf : ByteBuffer
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.STANDARD : FramedSnappyDialect
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : AtomicBoolean
Test: org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Pack200Strategy)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[])
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.reset()
Test: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG : byte[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish()
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields()
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.getInputStream()
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Zip64Mode)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField()
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel)
Test: org.apache.commons.compress.archivers.arj.MainHeader.Flags
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipShort
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(String)
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(Object)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.weight : int[]
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(long)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO : ZipEightByteInteger
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra()
Test: org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName : String
Test: org.apache.commons.compress.utils.CountingInputStream.getBytesRead()
Test: org.apache.commons.compress.archivers.arj.MainHeader
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map<String, String>,String,long,long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderInputStream : InputStream
Test: org.apache.commons.compress.archivers.zip.ZipLong.getBytes()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ScatterStatistics.ScatterStatistics(long,long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.longFileMode : int
Test: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream)
Test: org.apache.commons.compress.utils.Charsets.toCharset(Charset)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(InputStream,int)
Test: org.apache.commons.compress.utils.BoundedInputStream.read()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64 : boolean
Test: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_UNAVAILABLE : CachedAvailability
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object)
Test: org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[])
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getMode()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.streams : List
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(String)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close()
Test: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(SeekableByteChannel,long)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCount()
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB : COMPRESSION_TYPE
Test: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE : CachedAvailability
Test: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.headerOffset : long
Test: org.apache.commons.compress.utils.Sets
Test: org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(byte[],int)
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.count(int)
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(Date)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.deflate()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.toString()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.available()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName()
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.clearCode : int
Test: org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.X0019_EncryptionRecipientCertificateList()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.expectedChecksum : long
Test: org.apache.commons.compress.utils.IOUtils
Test: org.apache.commons.compress.archivers.zip.ZipFile.CFH_SIG : long
Test: org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator<? extends T>)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.ScatterGatherBackingStoreCompressor(Deflater,ScatterGatherBackingStore)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength()
Test: org.apache.commons.compress.utils.CountingInputStream.CountingInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.getCode()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(boolean)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(long)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.TAPE : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.sevenz.StartHeader
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize()
Test: org.apache.commons.compress.compressors.pack200.Pack200Strategy
Test: org.apache.commons.compress.archivers.dump.Dirent
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(Class)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Zip64Mode)
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(ZipExtraField)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCdata(int)
Test: org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(int)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.hasStreamIdentifier()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile()
Test: org.apache.commons.compress.utils.ArchiveUtils
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.crc32 : CRC32
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,String)
Test: org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.utils.CountingInputStream.read()
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes()
Test: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.TempFileCachingStreamBridge()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(java.util.zip.ZipEntry)
Test: org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes : byte[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2 : SevenZMethod
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry : boolean
Test: org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(String)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse()
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream)
Test: org.apache.commons.compress.compressors.bzip2.CRC.initialiseCRC()
Test: org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC : ZipLong
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_PPC_FILTER : SevenZMethod
Test: org.apache.commons.compress.compressors.pack200.StreamBridge.stop()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime : ZipEightByteInteger
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly()
Test: org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.bytesRead : long
Test: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.X0017_StrongEncryptionHeader()
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream.read()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[])
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR : Feature
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER : UnicodeExtraFieldPolicy
Test: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_4 : ZipMethod
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(int)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag : boolean
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.compareTo(Simple8BitChar)
Test: org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>)
Test: org.apache.commons.compress.archivers.zip.Zip64Mode.Always : Zip64Mode
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy)
Test: org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders : byte[][]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform : int
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod
Test: org.apache.commons.compress.archivers.zip.ZipMethod.DEFLATED : ZipMethod
Test: org.apache.commons.compress.utils.CountingOutputStream.bytesWritten : long
Test: org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ZipShort.equals(Object)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap<String, ArchiveStreamProvider>)
Test: org.apache.commons.compress.utils.CountingOutputStream.write(byte[])
Test: org.apache.commons.compress.compressors.CompressorOutputStream
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(InputStream)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.recvDecodingTables_pos : byte[]
Test: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb : GeneralPurposeBit
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic : String
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING : ZipEncoding
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField()
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.close()
Test: org.apache.commons.compress.changes.ChangeSet.delete(String)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(ArchiveEntry)
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean)
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.oneByte : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf : ByteBuffer
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataLength()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getVolume()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(BZip2CompressorOutputStream.Data,int)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(Deflater)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize()
Test: org.apache.commons.compress.utils.Lists.newArrayList()
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder
Test: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.maj : long
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.X5455_ExtendedTimestamp()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName : String
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipFile.getEntries()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(Date)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(Date)
Test: org.apache.commons.compress.archivers.sevenz.BindPair
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,int,String)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long)
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncode(String)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished : boolean
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.inode : long
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.nlink : long
Test: org.apache.commons.compress.changes.ChangeSet.deleteDir(String)
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.HEADER_MAGIC : byte[]
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(int)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING : ZipMethod
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)
Test: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.InMemoryCachingStreamBridge()
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.skip(long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.med3(byte,byte,byte)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary : DumpArchiveSummary
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.BITS : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(long)
Test: org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.gid : int
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry()
Test: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature : byte[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(String,long)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int)
Test: org.apache.commons.compress.compressors.CompressorException.CompressorException(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(long)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(File,Pack200Strategy)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeTrailer()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
Test: org.apache.commons.compress.changes.Change.targetFile()
Test: org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2 : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged : boolean
Test: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.encode(String)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF : boolean
Test: org.apache.commons.compress.changes.ChangeSet.addAddition(Change)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime : ZipEightByteInteger
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(TYPE)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(DataOutput)
Test: org.apache.commons.compress.utils.CountingInputStream.count(long)
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream()
Test: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID : ZipShort
Test: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory()
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION : Feature
Test: org.apache.commons.compress.utils.ArchiveUtils.sanitize(String)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.utils.BitInputStream.bitsCachedSize : int
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON : CompressorStreamFactory
Test: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(DataOutput)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.BLKDEV : TYPE
Test: org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(InputStream,long)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders()
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ : UnparseableExtraField
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.crc : long
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(String)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(BigInteger)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(long)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(DataInputStream)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes : Map<SevenZArchiveEntry, long[]>
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checksig(byte[],byte[])
Test: org.apache.commons.compress.changes.Change.Change(String,int)
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters()
Test: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.decode(byte[])
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,short,int,String)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord()
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE : CachedAvailability
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG : byte[]
Test: org.apache.commons.compress.archivers.arj.MainHeader.MainHeader()
Test: org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()
Test: org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(ZipArchiveEntry,OffsetEntry,int)
Test: org.apache.commons.compress.archivers.zip.BinaryTree.BinaryTree(int)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_bigDone : boolean[]
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.bigNumberMode : int
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveException
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.X7875_NewUnix()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry : ArArchiveEntry
Test: org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.CAFE_DOOD : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment : String
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(Map<String, String>)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.getId()
Test: org.apache.commons.compress.archivers.sevenz.BindPair.BindPair()
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getHeaderId()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.version : int
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inf : Inflater
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer : ByteBuffer
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(int)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(boolean)
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(SevenZMethod,Object)
Test: org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.markSupported()
Test: org.apache.commons.compress.utils.BitInputStream.MASKS : long[]
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(boolean)
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.pushEncodedChar(ByteBuffer,char)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.storeNum : AtomicInteger
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.DIRECTORY : TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type : TYPE
Test: org.apache.commons.compress.utils.Lists.newArrayList(Iterator<? extends E>)
Test: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.BZIP2Decoder()
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(GeneralPurposeBit)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.DefaultBackingStoreSupplier()
Test: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(TarArchiveEntry)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(String,String,int,TYPE)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close()
Test: org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded : Zip64Mode
Test: org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.mtfFreq : int[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipLong.getValue()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(Map<String, String>)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem()
Test: org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.dump.Dirent.getParentIno()
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.SIG_LENGTH : int
Test: org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream)
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.getTableSize()
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.oneByte : byte[]
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState : int
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField()
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map<String, String>)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions : Set
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(String)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read()
Test: org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.UnrecognizedFormatException()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getZipArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.ZipFile.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(int)
Test: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(byte[])
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC()
Test: org.apache.commons.compress.archivers.zip.ZipFile.Entry.hashCode()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)
Test: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoder()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.LINK : TYPE
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decode(byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(long)
Test: org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[])
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf : byte[]
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit : int[][]
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.localDataStart : long
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String,boolean)
Test: org.apache.commons.compress.archivers.sevenz.StartHeader.StartHeader()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.contentMethods : Iterable<? extends SevenZMethodConfiguration>
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.bufUsed : int
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ONE : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader()
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(Checksum,InputStream,long,long)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets : Map<ZipArchiveEntry, Long>
Test: org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf : byte[]
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closed : boolean
Test: org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int)
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(DataInputStream)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[])
Test: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.jarMarkerAdded : boolean
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated()
Test: org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(byte[])
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(byte[])
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(boolean)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar : int
Test: org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getHeaderId()
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(boolean)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read()
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(ZipEightByteInteger)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close()
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize : int
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders : Map<String, String>
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS : UnicodeExtraFieldPolicy
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(boolean)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_copy : int[]
Test: org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.causedUseOfZip64 : boolean
Test: org.apache.commons.compress.changes.ChangeSetResults
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures : List<Future>
Test: org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.close()
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.entryOffset : long
Test: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256Decoder()
Test: org.apache.commons.compress.changes.Change.isReplaceMode()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_runningOrder : int[]
Test: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.noExtraFields : ZipExtraField[]
Test: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG : ZipShort
Test: org.apache.commons.compress.archivers.zip.CircularBuffer.put(int)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(Date)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])
Test: org.apache.commons.compress.archivers.dump.ShortFileException.ShortFileException()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte()
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(String)
Test: org.apache.commons.compress.archivers.zip.ZipFile.getEntries(String)
Test: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(BZip2CompressorOutputStream.Data,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(String)
Test: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(String,byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(int)
Test: org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry
Test: org.apache.commons.compress.archivers.zip.BinaryTree.read(BitStream)
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.clone()
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.BZLIB : COMPRESSION_TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO : COMPRESSION_TYPE
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)
Test: org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.X0015_CertificateIdForFile()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier)
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.close()
Test: org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod)
Test: org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(String)
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.getValue()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,byte,boolean)
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getUnicodeName()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_X86_FILTER : SevenZMethod
Test: org.apache.commons.compress.compressors.bzip2.BlockSort
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream
Test: org.apache.commons.compress.compressors.CompressorInputStream.count(long)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.isDirectory()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.link : String
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.hitCentralDirectory : boolean
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T : int[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(ZipArchiveEntry)
Test: org.apache.commons.compress.compressors.pack200.StreamBridge.getInput()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(ZipEightByteInteger)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.PKWARE_IMPLODING : ZipMethod
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.crc : CRC32
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(Object)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_READ : PERMISSION
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending : Map<Integer, DumpArchiveEntry>
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(Date)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON : ArchiveStreamFactory
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(DataOutput)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[])
Test: org.apache.commons.compress.utils.BitInputStream.bitsCached : long
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,String)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[])
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Map<String, String>)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf : byte[]
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(int)
Test: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(byte[],int)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex : int
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummyByte : boolean
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset : long
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment
Test: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.BCJDecoder(FilterOptions)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getType()
Test: org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int)
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream)
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_WRITE : PERMISSION
Test: org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.Methods()
Test: org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(String)
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(Coder,InputStream)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(BZip2CompressorOutputStream.Data,int)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date)
Test: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.getInputView()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(File)
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.reset()
Test: org.apache.commons.compress.changes.ChangeSetPerformer.perform(ZipFile,ArchiveOutputStream)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(boolean)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)
Test: org.apache.commons.compress.archivers.ArchiveException
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord()
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(byte[],int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(String)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend()
Test: org.apache.commons.compress.utils.CRC32VerifyingInputStream
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(Coder)
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder
Test: org.apache.commons.compress.changes.Change
Test: org.apache.commons.compress.archivers.zip.Zip64Mode
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream
Test: org.apache.commons.compress.changes.ChangeSetResults.addedFromStream : List
Test: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)
Test: org.apache.commons.compress.changes.ChangeSet.getChanges()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf : byte[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.uid : long
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(Date)
Test: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor : boolean
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(InputStream,boolean)
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters
Test: org.apache.commons.compress.archivers.zip.ZipFile.entries : List
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readLittleEndianInt(DataInputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode : long
Test: org.apache.commons.compress.archivers.zip.ZipLong.AED_SIG : ZipLong
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.sevenz.Archive
Test: org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE : SevenZMethod
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory()
Test: org.apache.commons.compress.archivers.zip.ZipShort.getValue()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String)
Test: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer : byte[]
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int)
Test: org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod()
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.EMPTY : byte[]
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders()
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(long)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(InputStream)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator()
Test: org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipLong
Test: org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(byte)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(ZipArchiveEntry)
Test: org.apache.commons.compress.utils.IOUtils.toByteArray(InputStream)
Test: org.apache.commons.compress.utils.BitInputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Date)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength()
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.UnparseableExtraField(int)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.utils.FlushShieldFilterOutputStream.flush()
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.heap : int[]
Test: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.X0016_CertificateIdForCentralDirectory()
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(char[])
Test: org.apache.commons.compress.utils.ServiceLoaderIterator.hasNext()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer()
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(int)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(ZipLong)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,File,String)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.ADDR : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS()
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(byte[],ZipEncoding)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min : long
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflateBuffer : byte[]
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(int)
Test: org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandCopy(long,int)
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.JarMarker.NO_BYTES : byte[]
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header : TapeSegmentHeader
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName()
Test: org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.mode : int
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
Test: org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(long)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId : long
Test: org.apache.commons.compress.PasswordRequiredException.PasswordRequiredException(String)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSize()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(int)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getNameCRC32()
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.close()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[])
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(File)
Test: org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.chksum : long
Test: org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord()
Test: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod()
Test: org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(int)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBuffer(ByteBuffer,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry : ByteArrayInputStream
Test: org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode : Zip64Mode
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten : long
Test: org.apache.commons.compress.utils.CountingOutputStream
Test: org.apache.commons.compress.utils.BitInputStream.readBits(int)
Test: org.apache.commons.compress.archivers.arj.LocalFileHeader.LocalFileHeader()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_EXEC : PERMISSION
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll : int[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closed : boolean
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(DataOutput)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,String)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(ZipEightByteInteger)
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.getInputStream()
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(int)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File,byte[])
Test: org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_rfreq : int[][]
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getHeaderId()
Test: org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(String)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.haveUnclosedEntry : boolean
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName()
Test: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefixesLength()
Test: org.apache.commons.compress.archivers.ArchiveInputStream.count(int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(boolean)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime : ZipEightByteInteger
Test: org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.DD : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.filesize : long
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(boolean)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary()
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.ZipFileIterator(ZipFile)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(String)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String)
Test: org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(String)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode : long
Test: org.apache.commons.compress.archivers.dump.ShortFileException
Test: org.apache.commons.compress.archivers.zip.BitStream.nextBits(int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data
Test: org.apache.commons.compress.compressors.CompressorInputStream.getBytesRead()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(int)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders()
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.cdata : byte[]
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentInputStream : InputStream
Test: org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.endReached : boolean
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader : LocalFileHeader
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(int)
Test: org.apache.commons.compress.changes.Change.getInput()
Test: org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,short)
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.utils.IOUtils.SKIP_BUF : byte[]
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[])
Test: org.apache.commons.compress.archivers.zip.Zip64Mode.Zip64Mode()
Test: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(byte[],byte[])
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int)
Test: org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(InputStream,boolean)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String)
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(Object)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.STICKY : PERMISSION
Test: org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(ZipEightByteInteger)
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting()
Test: org.apache.commons.compress.changes.ChangeSet
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(ArArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level : int
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.usesChecksumWithCompressedChunks()
Test: org.apache.commons.compress.archivers.zip.JarMarker.getHeaderId()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closed : boolean
Test: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.CopyDecoder()
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator()
Test: org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(String)
Test: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability
Test: org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(String)
Test: org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(String)
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)
Test: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32()
Test: org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(String)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.fill(long,long,char)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String,boolean,boolean)
Test: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.ftab : int[]
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber()
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(String,long,int,int,int,long)
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(Class<?>...)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(long)
Test: org.apache.commons.compress.archivers.zip.ZipFile
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_READ : PERMISSION
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items : Queue
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream)
Test: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.addDummyByte : boolean
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream()
Test: org.apache.commons.compress.changes.ChangeSetResults.getDeleted()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selectorMtf : byte[]
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.totalCodesRead : long
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName()
Test: org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(int)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream)
Test: org.apache.commons.compress.archivers.dump.Dirent.Dirent(int,int,int,String)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ArchiveEntry,boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock()
Test: org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.clone()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.version : String
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mtime : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(boolean)
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(ScatterGatherBackingStore,StreamCompressor)
Test: org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE : Pack200Strategy
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy()
Test: org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY : Pack200Strategy
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fileBytesWritten : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(long)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(InputStream)
Test: org.apache.commons.compress.compressors.gzip.GzipUtils
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO : byte[]
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(String)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.inUse : boolean[]
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.appendSurrogate(ByteBuffer,char)
Test: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream)
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream()
Test: org.apache.commons.compress.utils.BoundedInputStream
Test: org.apache.commons.compress.changes.ChangeSet.addDeletion(Change)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector : byte[]
Test: org.apache.commons.compress.changes.ChangeSetResults.deleted : List
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode)
Test: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getHeaderId()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(int)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.getClearCode()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(char)
Test: org.apache.commons.compress.archivers.zip.ZipShort.getBytes()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.SZ_SIGNATURE : byte[]
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode()
Test: org.apache.commons.compress.utils.ServiceLoaderIterator.next()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[])
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(Object)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG : byte[]
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getMode()
Test: org.apache.commons.compress.archivers.zip.JarMarker.JarMarker()
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended()
Test: org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[])
Test: org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead()
Test: org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()
Test: org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates : Certificate[]
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[])
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs()
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getUserId()
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(ArchiveEntry)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE : UnicodeExtraFieldPolicy
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int)
Test: org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int)
Test: org.apache.commons.compress.archivers.zip.BitStream
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(Object)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator
Test: org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(OutputStream)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(OutputStream,DeflateParameters)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getHeaderId()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(long)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(Object)
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.LZMA2Decoder()
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncodeChar(char)
Test: org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod()
Test: org.apache.commons.compress.archivers.zip.ZipLong.hashCode()
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Pack200Strategy,Map<String, String>)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE : ZipShort
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.getCodeSize()
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(OutputStream)
Test: org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(Map<String, String>,String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderIndex : int
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime()
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf : ByteBuffer
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries()
Test: org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG : ZipLong
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName : byte[]
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encode(String)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,String,long)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry : long
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(Date)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(ExecutorService,ScatterGatherBackingStoreSupplier)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3 : ZipMethod
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETGUI : PERMISSION
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.CHRDEV : TYPE
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.peek()
Test: org.apache.commons.compress.archivers.sevenz.Folder
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(String)
Test: org.apache.commons.compress.archivers.StreamingNotSupportedException.getFormat()
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataLength()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.oneByte : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra : UnparseableExtraFieldData
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Pack200Strategy,Map<String, String>)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS
Test: org.apache.commons.compress.compressors.CompressorInputStream.bytesRead : long
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.flush()
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders()
Test: org.apache.commons.compress.changes.ChangeSet.ChangeSet()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag : boolean
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(InputStream,boolean)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice()
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_fave : int[]
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(long)
Test: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc : CRC
Test: org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(String)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.bytesRead : long
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream)
Test: org.apache.commons.compress.utils.Charsets.UTF_8 : Charset
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.$VALUES : SEGMENT_TYPE[]
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream
Comp: org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongLinkEntry()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm : int[][]
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value : BigInteger
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.reset()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf : byte[]
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode()
Comp: org.apache.commons.compress.archivers.zip.ScatterStatistics.compressionElapsed : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.encoding : String
Comp: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[])
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fmin(int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionMadeBy : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int)
Comp: org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$302(ZipArchiveOutputStream.CurrentEntry,boolean)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.hostOS : int
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.method : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper()
Comp: org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(String)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.closed : boolean
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.zlibHeader : boolean
Comp: org.tukaani.xz.XZOutputStream.flush()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.firstrec : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields : UnicodeExtraFieldPolicy
Comp: org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf : ByteBuffer
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(boolean)
Comp: org.apache.commons.compress.changes.Change.type()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,short)
Comp: org.apache.commons.compress.utils.BoundedInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.{...}
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsWritten : int
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_bigDone : boolean[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$408(DumpArchiveEntry.TapeSegmentHeader)
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getHeaderId()
Comp: org.apache.commons.compress.compressors.bzip2.Rand.rNums(int)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(ZipArchiveOutputStream.UnicodeExtraFieldPolicy)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.file : File
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen()
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.Simple8BitChar(byte,char)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Utils.fileNameUtil : FileNameUtil
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry()
Comp: org.apache.commons.compress.archivers.dump.ShortFileException
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream()
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean,boolean)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(InputStream,ByteOrder)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(DataOutput)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsBuff : int
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.1.{...}
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,int,String)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$202(ZipFile.OffsetEntry,long)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.flush()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entryFormat : short
Comp: org.tukaani.xz.LZMA2Options.LZMA2Options()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.creationDate : long
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.bytesRemaining : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.written : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(InputStream)
Comp: org.apache.commons.compress.changes.Change.entry : ArchiveEntry
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.count(int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.characters : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.nlink : long
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32 : long
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.UnparseableExtraFieldData()
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStore.closeForWriting()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasLastModifiedDate : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setVersionMadeBy(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isCompressed()
Comp: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map)
Comp: org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields : ZipExtraField[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(long)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(DumpArchiveEntry.TYPE)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveException.initCause(Throwable)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedBlockCRC : int
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE : CachedAvailability
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE[]
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary : DumpArchiveSummary
Comp: org.apache.commons.compress.archivers.zip.ZipShort
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap.packStreamOffsets : long[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate()
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items : Queue
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.implementations : Map
Comp: org.apache.commons.compress.archivers.zip.ZipFile.3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod : int[]
Comp: org.apache.commons.compress.changes.ChangeSet.getChanges()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()
Comp: org.tukaani.xz.XZOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(byte[])
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.inode : long
Comp: org.apache.commons.compress.compressors.bzip2.CRC.getFinalCRC()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.Flags
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID : ZipShort
Comp: org.apache.commons.compress.archivers.dump.Dirent.getName()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(int,int,InputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.firstAttempt : boolean
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.volume : int
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem : boolean
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.fill(long,long,char)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(DataOutput)
Comp: org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries()
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.read()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.utils.CountingOutputStream
Comp: org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int)
Comp: org.tukaani.xz.XZ.HEADER_MAGIC : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.entryOffset : long
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(OutputStream)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.bits : BitStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields()
Comp: org.apache.commons.compress.compressors.CompressorException.CompressorException(String,Throwable)
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.compressionLevel : int
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(boolean)
Comp: org.tukaani.xz.LZMAOutputStream.LZMAOutputStream(OutputStream,LZMA2Options,long)
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(BZip2CompressorOutputStream.Data,int,int,int,int)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf : byte[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getHoles()
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.last : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.entry : ZipArchiveEntry
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry)
Comp: org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,int,String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(int)
Comp: org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.encoding : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent()
Comp: org.apache.commons.compress.archivers.zip.X0014_X509Certificates.X0014_X509Certificates()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_count : int
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader
Comp: org.apache.commons.compress.changes.Change.targetFile : String
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base : int[][]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.TapeSegmentHeader()
Comp: org.apache.commons.compress.archivers.zip.Zip64Mode.Never : Zip64Mode
Comp: char[][]
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.method : SevenZMethod
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.input : InputStream
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checksig(byte[],byte[])
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.WHITEOUT : TYPE
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])
Comp: org.apache.commons.compress.compressors.FileNameUtil.uncompressSuffix : Map
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.scatterDoneAt : long
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.getInput()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature,ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selectorMtf : byte[]
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.peek()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED : ZipMethod
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.lastChapter : int
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(Callable)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inf : Inflater
Comp: char[]
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.{...}
Comp: org.apache.commons.compress.archivers.zip.UnicodePathExtraField
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.cachedLZMAAvailability : CachedAvailability
Comp: org.apache.commons.compress.archivers.dump.Dirent.ino : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int)
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode()
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentInputStream : InputStream
Comp: org.apache.commons.compress.archivers.zip.BitStream.readBits(int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.service : Class
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry : ArArchiveEntry
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.tt : int[]
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(int)
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.close()
Comp: org.apache.commons.compress.archivers.zip.ScatterStatistics.ScatterStatistics(long,long)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.close()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getEntry(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(int)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeLength : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw : TapeInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.DIRECTORY : TYPE
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.crc : long
Comp: org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE[]
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(long)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader()
Comp: org.apache.commons.compress.archivers.dump.Dirent.parentIno : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names : Map
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCodeFirstChar : byte
Comp: org.apache.commons.compress.archivers.zip.JarMarker
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag : boolean
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T : int[]
Comp: org.apache.commons.compress.archivers.StreamingNotSupportedException.getFormat()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closed : boolean
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.zipArchiveEntryRequest : ZipArchiveEntryRequest
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags : int
Comp: org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.getBytesRead()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.ZipFileIterator(ZipFile)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.volume : int
Comp: org.apache.commons.compress.archivers.zip.BitStream.BitStream(InputStream)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount()
Comp: org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(String)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int)
Comp: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read()
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.getClearCode()
Comp: org.apache.commons.compress.archivers.sevenz.Archive.folders : Folder[]
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS
Comp: org.apache.commons.compress.utils.BoundedInputStream.bytesRemaining : long
Comp: org.apache.commons.compress.archivers.sevenz.Folder.crc : long
Comp: org.apache.commons.compress.utils.BitInputStream.byteOrder : ByteOrder
Comp: org.apache.commons.compress.archivers.zip.ZipFile.archive : SeekableByteChannel
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.modificationTime : long
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.incrementCodeSize()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry
Comp: org.apache.commons.compress.utils.IOUtils
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[])
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(long)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.resetPreviousCode()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.BCJDecoder(FilterOptions)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,String)
Comp: org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[])
Comp: org.apache.commons.compress.compressors.bzip2.Rand.RNUMS : int[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER : SevenZMethod
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(String)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array()
Comp: org.apache.commons.compress.archivers.dump.Dirent
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$002(ZipArchiveOutputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(Checksum,InputStream,long,long)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$400(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.name : String
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$202(ZipArchiveInputStream.CurrentEntry,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.subStreamsInfo : SubStreamsInfo
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.isUsed : boolean[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY : SevenZMethod
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(Class)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.hashCode()
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.size : int
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes()
Comp: org.apache.commons.compress.changes.Change
Comp: org.apache.commons.compress.utils.CountingOutputStream.out : OutputStream
Comp: org.tukaani.xz.XZInputStream
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE
Comp: org.apache.commons.compress.archivers.jar.JarArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(DataOutput)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int)
Comp: org.tukaani.xz.DeltaOptions.DeltaOptions(int)
Comp: org.apache.commons.compress.compressors.FileNameUtil.shortestCompressedSuffix : int
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.hasStreamIdentifier()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG : byte[]
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.recvDecodingTables_pos : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(TarArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(InputStream,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(byte[])
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$002(DumpArchiveEntry.TapeSegmentHeader,DumpArchiveConstants.SEGMENT_TYPE)
Comp: org.apache.commons.compress.archivers.zip.BinaryTree
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime : ZipEightByteInteger
Comp: org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY : Pack200Strategy
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.starSparse : boolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId : long
Comp: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Zip64Mode)
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(Object)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.channel : SeekableByteChannel
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCompressedSize(long)
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees()
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures : List
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[])
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.readIndex : int
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_4 : ZipMethod
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.getValue()
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.fileNameUtil : FileNameUtil
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData()
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(char[])
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb : GeneralPurposeBit
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag : boolean
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7()
Comp: org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$402(ZipArchiveOutputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor()
Comp: org.apache.commons.compress.archivers.sevenz.Archive.packPos : long
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.available()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.payloadSupplier : InputStreamSupplier
Comp: org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.ftab : int[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream
Comp: org.apache.commons.compress.archivers.sevenz.BindPair.outIndex : long
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream)
Comp: org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet : List
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.in : BitInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.AES_ENCRYPTED : ZipMethod
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(byte[],ZipEncoding)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.2.{...}
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setTime(long)
Comp: org.apache.commons.compress.archivers.dump.Dirent.name : String
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setVersionRequired(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName()
Comp: org.tukaani.xz.LZMA2Options.setLcLp(int,int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory()
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.name()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Pack200Strategy,Map)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.checkSumOK : boolean
Comp: org.apache.commons.compress.archivers.sevenz.Coder.properties : byte[]
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.DD : byte[]
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders()
Comp: org.apache.commons.compress.archivers.zip.X0014_X509Certificates
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin : long
Comp: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(ZipLong)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(DumpArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.fileSpecPosition : int
Comp: org.apache.commons.compress.archivers.sevenz.Archive.packCrcsDefined : BitSet
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer : ByteBuffer
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf : byte[]
Comp: org.apache.commons.compress.archivers.StreamingNotSupportedException
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(int)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[])
Comp: org.apache.commons.compress.archivers.zip.ZipFile
Comp: org.apache.commons.compress.archivers.sevenz.Folder.totalOutputStreams : long
Comp: org.apache.commons.compress.archivers.arj.MainHeader.lastChapter : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getPrefixesLength()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)
Comp: org.apache.commons.compress.compressors.FileNameUtil.longestCompressedSuffix : int
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FIFO : TYPE
Comp: org.apache.commons.compress.archivers.arj.MainHeader.arjProtectionFactor : int
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.groupId : int
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(byte[])
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.SOCKET : TYPE
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2 : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int)
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(long)
Comp: org.apache.commons.compress.changes.ChangeSet.addAddition(Change)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name : String
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current : CurrentEntry
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor : boolean
Comp: org.tukaani.xz.XZInputStream.XZInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(BigInteger)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders()
Comp: org.apache.commons.compress.compressors.CompressorInputStream.count(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.flush()
Comp: org.apache.commons.compress.compressors.CompressorStreamProvider
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability[]
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$100(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.size : int
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.hostOS : int
Comp: org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(int)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_UNAVAILABLE : CachedAvailability
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.isClosed : boolean
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encode(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sentMTFValues4_inUse16 : boolean[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.$assertionsDisabled : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipShort.hashCode()
Comp: org.apache.commons.compress.archivers.dump.Dirent.type : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(String)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.os : OutputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[])
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForNonAsciiNames : boolean
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextZipEntry()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.compressedSize : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(long)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.changes.ChangeSet.delete(String)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_X86_FILTER : SevenZMethod
Comp: org.apache.commons.compress.utils.IOUtils.toByteArray(InputStream)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(Date)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(InputStream,Coders.1)
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.close()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(long)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode()
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8 : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes : int
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime : ZipLong
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.count(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(DataOutput)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.distanceTree : BinaryTree
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.dialect : FramedSnappyDialect
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FILE : TYPE
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream()
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(ZipShort)
Comp: org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.X0015_CertificateIdForFile()
Comp: org.apache.commons.compress.utils.FlushShieldFilterOutputStream.FlushShieldFilterOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.inUncompressedChunk : boolean
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.endReached : boolean
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize()
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(Class[])
Comp: org.apache.commons.compress.compressors.FileNameUtil.longestUncompressedSuffix : int
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.hasNext()
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.password : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[])
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer : byte[]
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getCodeSize()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.getClearCode()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(Date)
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.compressionLevel : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.noExtraFields : ZipExtraField[]
Comp: org.apache.commons.compress.compressors.pack200.Pack200Strategy
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.this$0 : SevenZOutputFile
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(String,byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getNTRec()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.create(ScatterGatherBackingStore)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$400(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMergedFields()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entrySize : long
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(byte[])
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipUtils
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI()
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(int)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest)
Comp: org.apache.commons.compress.archivers.dump.UnrecognizedFormatException
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry[]
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp
Comp: org.apache.commons.compress.parallel.InputStreamSupplier
Comp: org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.startedAt : long
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(BZip2CompressorOutputStream.Data,int)
Comp: org.apache.commons.compress.archivers.sevenz.BindPair.inIndex : long
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.numberOptionOrDefault(Object,int)
Comp: org.apache.commons.compress.compressors.bzip2.CRC.crc32Table : int[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.size : long
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1 : ZipMethod
Comp: org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.combinedCRC : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.level : int
Comp: org.apache.commons.compress.compressors.CompressorException
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$300(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.getCodeSize()
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.key : int
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(ZipLong)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(boolean)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream
Comp: org.tukaani.xz.LZMA2Options.getOutputStream(FinishableOutputStream)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength : long
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes : long
Comp: org.apache.commons.compress.changes.ChangeSet
Comp: org.apache.commons.compress.archivers.arj.MainHeader.archiverVersionNumber : int
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.2.{...}
Comp: org.apache.commons.compress.archivers.zip.JarMarker.NULL : ZipShort
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Map)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.current : ZipArchiveEntry
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.initializeTables(int)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.DefaultBackingStoreSupplier(ParallelScatterZipCreator.1)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionRequired : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream
Comp: org.tukaani.xz.FinishableWrapperOutputStream.FinishableWrapperOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize()
Comp: org.tukaani.xz.XZOutputStream
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_dd : int[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[])
Comp: org.apache.commons.compress.compressors.FileNameUtil.shortestUncompressedSuffix : int
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncode(String)
Comp: org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE : Pack200Strategy
Comp: org.apache.commons.compress.archivers.StreamingNotSupportedException.format : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawName()
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent : boolean
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag : byte
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.haveUnclosedEntry : boolean
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.lengthTree : BinaryTree
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(int)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.flush()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH : byte[]
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.dirFlag : boolean
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.accessDate : long
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten()
Comp: org.tukaani.xz.LZMA2Options.setPb(int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(String)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block : byte[]
Comp: org.apache.commons.compress.utils.Lists.newArrayList(Iterator)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStack : byte[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long)
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.encoding : Simple8BitZipEncoding
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.headerSize : int
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(InputStream,DeflateParameters)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.cachedXZAvailability : CachedAvailability
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.generation : int
Comp: org.apache.commons.compress.archivers.arj.MainHeader.securityVersion : int
Comp: org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.encoding : String
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setExtra(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[])
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,String)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.expectedChecksum : long
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.ntrec : int
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipEncoding.encode(String)
Comp: org.apache.commons.compress.archivers.zip.Zip64Mode[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,File,String)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawFlag : int
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.count(int)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf : byte[]
Comp: org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.packSizes : long[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$408(SevenZOutputFile)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.values()
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap.fileFolderIndex : int[]
Comp: org.apache.commons.compress.archivers.ArchiveException
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[])
Comp: org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten()
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.uid : int
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data : Data
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(String,String)
Comp: org.apache.commons.compress.archivers.sevenz.Folder.Folder()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String,boolean,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets : Map
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.blockMode : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(boolean)
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(Class,ClassLoader)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)
Comp: org.apache.commons.compress.utils.Iterators
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry : long
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags()
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(int,boolean)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.getBytesWritten()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)
Comp: org.apache.commons.compress.archivers.sevenz.Coder.Coder()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rTPos : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(Map)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG : ZipLong
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(ArchiveEntry)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.hasNext()
Comp: org.apache.commons.compress.compressors.bzip2.CRC.initialiseCRC()
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.jarMarkerAdded : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset : long
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.numberOfShannonFanoTrees : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setMethod(int)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.SIG_LENGTH : int
Comp: org.apache.commons.compress.utils.BitInputStream.MASKS : long[]
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString()
Comp: org.apache.commons.compress.changes.ChangeSet.changes : Set
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.f : File
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(ExecutorService,ScatterGatherBackingStoreSupplier)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currName : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Pack200Strategy,Map)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry : boolean
Comp: org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSorter : BlockSort
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.fileFormat : short
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Utils
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer()
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(byte)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.X0017_StrongEncryptionHeader()
Comp: org.apache.commons.compress.archivers.sevenz.Folder.bindPairs : BindPair[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.BITS : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(int)
Comp: org.apache.commons.compress.compressors.FileNameUtil.defaultExtension : String
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.buffer : ByteBuffer
Comp: org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes : byte[]
Comp: org.apache.commons.compress.archivers.dump.Dirent.getParentIno()
Comp: org.apache.commons.compress.archivers.arj.MainHeader
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize()
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ArchiveEntry,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(int)
Comp: org.apache.commons.compress.compressors.bzip2.Rand
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.out : OutputStream
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_SPARC_FILTER : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol()
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsLive : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.label : String
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.SZ_SIGNATURE : byte[]
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.compressorOutputStreamProviders : SortedMap
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.in : InputStream
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStore.close()
Comp: org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(Coder)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.blockSize : int
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.getKey()
Comp: org.apache.commons.compress.archivers.sevenz.Folder.packedStreams : long[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[],boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.crc : CRC32
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.values()
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(Object)
Comp: org.apache.commons.compress.utils.ArchiveUtils
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(BZip2CompressorOutputStream.Data)
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String)
Comp: org.apache.commons.compress.changes.Change.Change(ArchiveEntry,InputStream,boolean)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$302(DumpArchiveEntry.TapeSegmentHeader,int)
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finished : boolean
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf : byte[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.longFileMode : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.highChars : char[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtra()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String)
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD : Feature
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.code : int
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.code : int
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf : ByteBuffer
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.compressedCrc32 : CRC32
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.origPtr : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readIdx : int
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.getInputView()
Comp: org.apache.commons.compress.utils.BitInputStream.bitsCachedSize : int
Comp: org.apache.commons.compress.archivers.zip.ZipShort.value : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.crc : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(byte[])
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(boolean)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[])
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderHoles()
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.channel : SeekableByteChannel
Comp: org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Constants
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.EMPTY : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(SevenZMethod)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS : UnicodeExtraFieldPolicy
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG : byte[]
Comp: org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_READ : PERMISSION
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.decompressConcatenated : boolean
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.bytesRead : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry : TarArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.codeToEnum : Map
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_PPC_FILTER : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.buffer : byte[]
Comp: org.apache.commons.compress.utils.Charsets.ISO_8859_1 : Charset
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.dataOffset : long
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_EXEC : PERMISSION
Comp: org.apache.commons.compress.archivers.sevenz.Folder.unpackSizes : long[]
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.setEncoding(String)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[])
Comp: org.apache.commons.compress.utils.Lists.newArrayList()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(int)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.setClearCode(int)
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$722(ZipArchiveInputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.originalName : String
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN : TYPE
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.{...}
Comp: org.apache.commons.compress.archivers.zip.ZipShort.getValue()
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(ZipShort)
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordSize : int
Comp: org.apache.commons.compress.utils.BitInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid : BigInteger
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.flush()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate.test(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.blockSize : int
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.encode(OutputStream,Object)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mtime : long
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.bzip2.CRC.globalCrc : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf : ByteBuffer
Comp: org.apache.commons.compress.compressors.xz.XZUtils.HEADER_MAGIC : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified()
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.storeNum : AtomicInteger
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.def : Deflater
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[])
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getBytesRead()
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getHeaderId()
Comp: org.apache.commons.compress.compressors.pack200.Pack200Strategy[]
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getMetaData()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry()
Comp: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.InMemoryCachingStreamBridge()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.BLKDEV : TYPE
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams : ArrayList
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstPackStreamIndex : int[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(Date)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime : ZipLong
Comp: org.apache.commons.compress.archivers.zip.ZipFile.CFH_SIG : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(int)
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.PKWARE_IMPLODING : ZipMethod
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON : CompressorStreamFactory
Comp: org.apache.commons.compress.utils.BitInputStream.bitsCached : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode)
Comp: org.apache.commons.compress.changes.Change.replaceMode : boolean
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finished : boolean
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.charsetName : String
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.maj : long
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.available()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.code : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.def : Deflater
Comp: org.tukaani.xz.LZMA2Options.getPb()
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(byte[])
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.compareTo(Simple8BitZipEncoding.Simple8BitChar)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.reset()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemLen : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.in : InputStream
Comp: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.out : OutputStream
Comp: org.tukaani.xz.DeltaOptions.getOutputStream(FinishableOutputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.PPMD : ZipMethod
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.closed : boolean
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandCopy(long,int)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(InputStream)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close()
Comp: org.apache.commons.compress.changes.ChangeSetResults.deleted(String)
Comp: org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(String,OutputStream)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord()
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.uncompressedBytesRemaining : int
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset : long
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA : SevenZMethod
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(int)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.headerId : ZipShort
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_j2 : int
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish()
Comp: org.apache.commons.compress.archivers.zip.JarMarker.NO_BYTES : byte[]
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.arjFlags : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY : byte[]
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.packCrcs : long[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic : String
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.workDone : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(boolean)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.charsetName : String
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(int)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[])
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(boolean)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.streams : List
Comp: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(String,byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currSize : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry : ByteArrayInputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime()
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.stop()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes : int[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.$VALUES : PERMISSION[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data
Comp: org.apache.commons.compress.utils.IOUtils.SKIP_BUF : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(byte[],byte[],ZipFile.1)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock()
Comp: org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[])
Comp: org.apache.commons.compress.archivers.sevenz.Coders
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$102(ZipArchiveOutputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.numberOfTrees : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.type : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.reserved : int
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION : Feature
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(BZip2CompressorOutputStream.Data,int,int,int,int)
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(Date)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(int)
Comp: int[][]
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.{...}
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close()
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.getInputView()
Comp: org.apache.commons.compress.archivers.zip.ZipLong.equals(Object)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(Map)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(long)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.longFileMode : int
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.es : ExecutorService
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.channel : SeekableByteChannel
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(SevenZMethod,Object)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.{...}
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.highChars : char[]
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStore
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_rfreq : int[][]
Comp: org.apache.commons.compress.archivers.zip.BitStream.nextByte()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSize()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(long)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflateBuffer : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.close()
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.oneByte : byte[]
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(InputStream,boolean)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.crc : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int)
Comp: org.apache.commons.compress.changes.ChangeSetResults.getDeleted()
Comp: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField()
Comp: org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(SeekableByteChannel,long)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.DEFLATED : ZipMethod
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setGeneralPurposeBit(GeneralPurposeBit)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(String)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$714(ZipArchiveInputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2 : SevenZMethod
Comp: org.tukaani.xz.LZMAInputStream
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.size : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.count(long)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldUtils.UnparseableExtraField)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setExternalAttributes(long)
Comp: org.apache.commons.compress.archivers.zip.BinaryTree.read(BitStream)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[])
Comp: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID : ZipShort
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(ZipExtraField)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummyByte : boolean
Comp: org.apache.commons.compress.utils.CountingOutputStream.write(int)
Comp: org.apache.commons.compress.archivers.zip.BitStream
Comp: org.apache.commons.compress.archivers.arj.MainHeader.minVersionToExtract : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode()
Comp: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID()
Comp: org.apache.commons.compress.changes.ChangeSetResults.ChangeSetResults()
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.available()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is : InputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$502(ZipArchiveOutputStream.CurrentEntry,boolean)
Comp: org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode : int
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.crc : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,String,long)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.DOS_TIME_MIN : byte[]
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.finish()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int)
Comp: org.apache.commons.compress.archivers.sevenz.Coder
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2 : int
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.maxCodeSize : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE[]
Comp: org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(InputStream,long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.comment : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len : byte[][]
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset()
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap.StreamMap()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.values()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EMPTY : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.clearCode : int
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE : CachedAvailability
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR : Feature
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod()
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(Iterable)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte)
Comp: org.apache.commons.compress.utils.BoundedInputStream.close()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long)
Comp: boolean[]
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String)
Comp: org.apache.commons.compress.archivers.sevenz.Folder.numUnpackSubStreams : int
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.perform(ChangeSetPerformer.ArchiveEntryIterator,ArchiveOutputStream)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(SeekableByteChannel)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.files : SevenZArchiveEntry[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode : long
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int)
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.write(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed : boolean
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData()
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.oneByte : byte[]
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE : CachedAvailability
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(Date)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int)
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.next()
Comp: org.apache.commons.compress.archivers.zip.JarMarker.JarMarker()
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.serviceLoaderIterator : Iterator
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB : COMPRESSION_TYPE
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_READ : PERMISSION
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP : UnparseableExtraField
Comp: org.apache.commons.compress.archivers.zip.Zip64RequiredException
Comp: org.tukaani.xz.DeltaOptions.getInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.lastModifiedDate : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished : boolean
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE[].clone()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.properties : Map
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_i2 : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$200(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER : UnicodeExtraFieldPolicy
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(long)
Comp: org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close()
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.LZMA2Decoder()
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect[]
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(DataInputStream)
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.skip(long)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.hasNext()
Comp: org.apache.commons.compress.archivers.dump.Dirent.getIno()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.access$400(ZipFile.NameAndComment)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse()
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding : String
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(Date)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$300(SevenZOutputFile)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(long)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_z : char
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name : String
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize()
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.LocalFileHeader()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.usesChecksumWithCompressedChunks()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_THUMB_FILTER : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.close()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(String)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.name : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.backingStoreSupplier : ScatterGatherBackingStoreSupplier
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders : Map
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.oneByte : byte[]
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.reason : Feature
Comp: org.apache.commons.compress.utils.Charsets.UTF_16BE : Charset
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCrc(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(char)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished : boolean
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.minVersionToExtract : int
Comp: org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(GzipParameters)
Comp: org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[])
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.encode(String)
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_code : int[][]
Comp: org.apache.commons.compress.archivers.sevenz.Archive
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedCrc : long
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder)
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.write(int)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.arjFlags2 : int
Comp: org.apache.commons.compress.changes.ChangeSet.addDeletion(Change)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(InputStream,FramedSnappyDialect)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(long)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.{...}
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(int)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close()
Comp: org.tukaani.xz.FilterOptions.getOutputStream(FinishableOutputStream)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files : List
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[])
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.origPtr : int
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.streamCompressor : StreamCompressor
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decode(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.getInputStream()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryData()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.fileName : String
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.cdata : byte[]
Comp: org.tukaani.xz.LZMAInputStream.LZMAInputStream(InputStream,long,byte,int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setInternalAttributes(int)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.sevenz.Folder[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$900(ZipArchiveInputStream)
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(int)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read()
Comp: org.apache.commons.compress.archivers.sevenz.Folder.hasCrc : boolean
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.readNextCode()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor : int
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.os : FileOutputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive)
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out : XZOutputStream
Comp: org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.UnrecognizedFormatException()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.version : int
Comp: org.apache.commons.compress.archivers.sevenz.StartHeader.StartHeader()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(String)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.CopyDecoder()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry(ZipFile.1)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.count(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA()
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper(SevenZOutputFile.1)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory : boolean
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.dumpDate : long
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.hashCode()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.1.{...}
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSize100k : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entryOffset : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entry : CpioArchiveEntry
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$300(DumpArchiveEntry.TapeSegmentHeader)
Comp: org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates : Certificate[]
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.changes : Set
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETGUI : PERMISSION
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.slidingDictionarySize : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)
Comp: org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.originalInput : InputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(ZipEntry)
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.put(int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[])
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedFilePosition : int
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.next()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream()
Comp: org.apache.commons.compress.compressors.CompressorInputStream.count(int)
Comp: org.tukaani.xz.UnsupportedOptionsException.getMessage()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.entriesRead : int
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(ZipArchiveEntryRequest,long,long,long)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.prevEntry : ArArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.X0019_EncryptionRecipientCertificateList()
Comp: org.apache.commons.compress.archivers.zip.ScatterStatistics
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$000(ZipFile.OffsetEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel : SeekableByteChannel
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc()
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry[]
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.code : byte
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(Coder,InputStream)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ONE : byte[]
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalCountingStreams : CountingOutputStream[]
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(ChangeSet)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.compressedSize : long
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream
Comp: org.apache.commons.compress.archivers.sevenz.BindPair
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.decompressConcatenated : boolean
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(File)
Comp: byte[][]
Comp: org.apache.commons.compress.archivers.zip.ZipEncoding
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(Coder)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount()
Comp: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setPlatform(int)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG : ZipLong
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeFilePosition : int
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock : Object
Comp: org.apache.commons.compress.archivers.zip.ZipEncoding.decode(byte[])
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.Feature(String)
Comp: org.apache.commons.compress.utils.BitInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hostname : String
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(String)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(Class)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary
Comp: org.apache.commons.compress.utils.BitInputStream.clearBitCache()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.utils.CountingInputStream.read()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(Date)
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.canAcceptOptions(Object)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.HEX_DIGITS : byte[]
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.crc : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf : Inflater
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry()
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue()
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.JPEG : ZipMethod
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.close()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment
Comp: org.tukaani.xz.UnsupportedOptionsException
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[])
Comp: org.apache.commons.compress.archivers.ArchiveEntry
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.unseqToSeq : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION[].clone()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_fave : int[]
Comp: org.apache.commons.compress.archivers.zip.JarMarker.DEFAULT : JarMarker
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes : Map
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF : boolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(ArchiveEntry)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.headerOffset : long
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime()
Comp: org.apache.commons.compress.archivers.zip.JarMarker.ID : ZipShort
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.LINK : TYPE
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSize : long
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.firstChapter : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods()
Comp: org.apache.commons.compress.utils.CountingInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[])
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.MainHeader()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.hasHitEOF : boolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.getTableSize()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory
Comp: org.apache.commons.compress.archivers.zip.ZipLong.getValue()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeModified : int
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.HEADER_MAGIC : byte[]
Comp: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(String,byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setRawFlag(int)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.available()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.bs : ScatterGatherBackingStore
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[])
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent : boolean
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm[]
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.toString()
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.LZMADecoder()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.parent : int[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4()
Comp: org.tukaani.xz.LZMA2InputStream.LZMA2InputStream(InputStream,int)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.numberOptionOrDefault(Object,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(DataOutput)
Comp: org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encodeHighChar(char)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.count(long)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.addRepeatOfPreviousCode()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordSize : int
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(DataOutput)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(SevenZMethod)
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStore.getInputStream()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.clone()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.useUnicodeExtraFields : boolean
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderSize : long
Comp: org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(InputStream,long,long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getIno()
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncodeChar(char)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.blockSize : int
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setTableSize(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.in : ZipFile
Comp: org.apache.commons.compress.archivers.dump.InvalidFormatException
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.oneByte : byte[]
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32()
Comp: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.crcs : long[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.causedUseOfZip64 : boolean
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size()
Comp: org.apache.commons.compress.archivers.ArchiveException.initCause(Throwable)
Comp: org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature : byte[]
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long)
Comp: org.apache.commons.compress.utils.FlushShieldFilterOutputStream
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG : byte[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.userId : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(Throwable)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(Map)
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(long)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(DataInputStream)
Comp: org.tukaani.xz.XZOutputStream.XZOutputStream(OutputStream,FilterOptions)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.archive : Archive
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(String,long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.expandCodeToOutputStack(int,boolean)
Comp: org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.in : BitInputStream
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.DeltaDecoder()
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.PureJavaCrc32C()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(String)
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting()
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.X7875_NewUnix()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.dataStart : long
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getPrefix(int)
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long)
Comp: org.apache.commons.compress.utils.CRC32VerifyingInputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.crc : CRC32
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Date)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.length : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init()
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer : CircularBuffer
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addRepeatOfPreviousCode()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions : Set
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoder()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(LocalFileHeader)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName : String
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.uid : int
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(long)
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent()
Comp: org.tukaani.xz.LZMA2Options
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmaj : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.temp_charArray2d : char[][]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8 : boolean
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated : boolean
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.expandCodeToOutputStack(int,boolean)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry)
Comp: org.apache.commons.compress.archivers.ArchiveException.ArchiveException(String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.filesys : String
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry : CurrentEntry
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry)
Comp: org.apache.commons.compress.changes.Change.Change(String,int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(ZipArchiveEntry)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next()
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.init()
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.getComment()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength : long
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(File,Pack200Strategy,Map)
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.getEncoding()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.contentMethods : Iterable
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(String,Throwable)
Comp: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(Date)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.reserved : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(long)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readSize()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasWindowsAttributes : boolean
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.originalCrc32 : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setComment(String)
Comp: org.tukaani.xz.SingleXZInputStream.SingleXZInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.weight : int[]
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.alignmentBoundary : int
Comp: org.apache.commons.compress.changes.ChangeSetResults.deleted : List
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBuffer(ByteBuffer,int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.getInputStream()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING : ZipMethod
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING : ZipEncoding
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(Date)
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding.NioZipEncoding(Charset)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordBuf : byte[]
Comp: org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.paxGNUSparse : boolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize : int
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead : long
Comp: org.apache.commons.compress.archivers.zip.ZipLong
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.this$0 : ZipArchiveInputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer : ByteBuffer
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(Object)
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getInstance()
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.ArchiveInputStreamIterator(ArchiveInputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.tableSize : int
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object)
Comp: org.apache.commons.compress.utils.BoundedInputStream
Comp: org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.streamMap : StreamMap
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(File,String)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters : GzipParameters
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(String)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER : ZipLong
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selectorMtf : byte[]
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit : int[][]
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.available()
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData()
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength()
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.access$500(ZipFile.NameAndComment)
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryData()
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setClearCode(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream
Comp: org.apache.commons.compress.archivers.zip.BinaryTree.tree : int[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.preserveLeadingSlashes : boolean
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.OutputStreamCompressor(Deflater,OutputStream)
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.compressors.bzip2.CRC.CRC()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(Object)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$402(DumpArchiveEntry.TapeSegmentHeader,int)
Comp: org.tukaani.xz.XZOutputStream.close()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG : byte[]
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER : SevenZMethod
Comp: org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream)
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.filepos : long
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.link : String
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Calendar,long,byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.fileSpecPosition : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.realSize : long
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.initTT(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.allowableBlockSize : int
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currBytes : long
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.INCS : int[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$002(ZipFile.OffsetEntry,long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream
Comp: org.apache.commons.compress.archivers.ArchiveInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method : int
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(Object)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(BZip2CompressorOutputStream.Data,int)
Comp: org.tukaani.xz.LZMA2Options.getDictSize()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(boolean)
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename()
Comp: org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[])
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ordinal()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.nlink : int
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getNameCRC32()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.devname : String
Comp: org.apache.commons.compress.compressors.xz.XZUtils
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.decompressNextSymbol()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map,TarArchiveEntry)
Comp: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)
Comp: org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fileBytesWritten : long
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING : ZipMethod
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION : ZipMethod
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readLittleEndianInt(DataInputStream)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart : ZipLong
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC()
Comp: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(boolean)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(String,long)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[])
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(long)
Comp: org.apache.commons.compress.changes.Change.targetFile()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasAccessDate : boolean
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.wordBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.offsetEntry : OffsetEntry
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod()
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : AtomicBoolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish()
Comp: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getHeaderId()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.Folder
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.dateTimeModified : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(String)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$000(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.id : byte[]
Comp: org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.markSupported()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,boolean)
Comp: org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes : Attributes
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readIndex : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(Date)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.tmpbuf : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf : byte[]
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.name : String
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.name : byte[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closed : boolean
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out : OutputStream
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished : boolean
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.chksum : long
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(int)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.{...}
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.ScatterGatherBackingStoreCompressor(Deflater,ScatterGatherBackingStore)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode : long
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.TarArchiveSparseEntry(byte[])
Comp: org.apache.commons.compress.utils.BitInputStream.readBits(int)
Comp: org.apache.commons.compress.utils.CountingOutputStream[]
Comp: int[]
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.input : InputStream
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getClearCode()
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(Date)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(int)
Comp: org.apache.commons.compress.archivers.ArchiveException.ArchiveException(String,Exception)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.STANDARD : FramedSnappyDialect
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.{...}
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.uid : long
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.code : int
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.in : DataInputStream
Comp: org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstFileIndex : int[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.getName()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc : CRC
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sfmap : char[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.value : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO : ZipShort
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.getTableSize()
Comp: org.apache.commons.compress.utils.Sets
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(DataOutput)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater : Deflater
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(int)
Comp: org.tukaani.xz.LZMA2Options.getLp()
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.archiverVersionNumber : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCompressedSize(long)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.oneByte : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment : String
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finished : boolean
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(int)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.tlScatterStreams : ThreadLocal
Comp: org.apache.commons.compress.archivers.sevenz.Coder.numOutStreams : long
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(byte[])
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.encoding : String
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag : boolean
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(DataOutput)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.getAndMoveToFrontDecode_yy : char[]
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.heap : int[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.utils.Lists
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(boolean)
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable()
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(String)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[])
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(boolean)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID()
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream
Comp: org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO : byte[]
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Pack200Strategy)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB()
Comp: org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveException
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO : COMPRESSION_TYPE
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(String,String,int,DumpArchiveEntry.TYPE)
Comp: org.apache.commons.compress.archivers.sevenz.BindPair.BindPair()
Comp: org.apache.commons.compress.archivers.dump.ShortFileException.ShortFileException()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(SevenZArchiveEntry)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.uncompressedBytesRemaining : int
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(String)
Comp: org.apache.commons.compress.archivers.cpio.CpioConstants
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry()
Comp: org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[])
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryData()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.crc : CRC32
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte()
Comp: org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum : PureJavaCrc32C
Comp: org.apache.commons.compress.archivers.zip.ZipFile.shortBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData()
Comp: org.apache.commons.compress.changes.ChangeSet.deleteDir(String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.recordOffset : int
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String,boolean)
Comp: org.apache.commons.compress.archivers.cpio.CpioUtil
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()
Comp: org.apache.commons.compress.changes.ChangeSetResults.addedFromStream : List
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(String)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.fileNameUtil : FileNameUtil
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.closed : boolean
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(Object)
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid : BigInteger
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO : byte[]
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(int)
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.appendSurrogate(ByteBuffer,char)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getTime()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(long)
Comp: org.apache.commons.compress.compressors.CompressorInputStream
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.END : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(long)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader : LocalFileHeader
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField[]
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.rawCentralDirectoryData : byte[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockCRC : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$102(DumpArchiveEntry.TapeSegmentHeader,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.max : long
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date)
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.filename : String
Comp: byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCdata(int)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders()
Comp: org.apache.commons.compress.utils.Charsets.UTF_16LE : Charset
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.mode : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector : byte[]
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE : ZipShort
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.mtfFreq : int[]
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getHeaderId()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getType()
Comp: org.tukaani.xz.LZMAOutputStream.LZMAOutputStream(OutputStream,LZMA2Options,boolean)
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(byte[],ZipEncoding)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getMode()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.endReached : boolean
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long)
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCrc()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.gid : int
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File)
Comp: org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(int)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord()
Comp: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.getInputView()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK()
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSizeEvenForVolumes : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,short,int,String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime()
Comp: org.apache.commons.compress.utils.CountingInputStream.bytesRead : long
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(int)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(boolean)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,int,String)
Comp: org.apache.commons.compress.compressors.CompressorInputStream.bytesRead : long
Comp: org.apache.commons.compress.archivers.sevenz.Folder.totalInputStreams : long
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.comment : String
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.localDataStart : long
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int)
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.close()
Comp: short[]
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getHeaderId()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$414(SevenZOutputFile,long)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryBytesRead : long
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(String,long,int,int,int,long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$1000(ZipArchiveInputStream,int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[])
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens : int[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.name : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.single : byte[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc : CRC
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE[].clone()
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.$VALUES : TYPE[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.summary : DumpArchiveSummary
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setName(String,byte[])
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.nextServiceLoader : Object
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.volume : int
Comp: org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.originalOutput : OutputStream
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closed : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(ArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(ZipEightByteInteger)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],BZip2CompressorOutputStream.Data,int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.crc : CRC32
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.blockSize : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.compressorInputStreamProviders : SortedMap
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getGroupId()
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.reset()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close()
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.comment : byte[]
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.clone()
Comp: org.apache.commons.compress.archivers.sevenz.Coder.numInStreams : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.seqToUnseq : byte[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(ZipExtraField)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(int)
Comp: char[].clone()
Comp: org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet()
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap
Comp: org.tukaani.xz.SingleXZInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.out : OutputStream
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_EXEC : PERMISSION
Comp: org.apache.commons.compress.archivers.arj.MainHeader.dateTimeCreated : int
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry(ZipArchiveInputStream.1)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature)
Comp: org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.zipArchiveEntry : ZipArchiveEntry
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_chPrev : int
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.deflater : Deflater
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.literalTree : BinaryTree
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(boolean)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.writeIndex : int
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int)
Comp: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(DataOutput)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(File,String)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(boolean)
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.remaining : long
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Map)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.inflater : Inflater
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable)
Comp: org.apache.commons.compress.archivers.zip.Zip64Mode.Always : Zip64Mode
Comp: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(Object)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size : long
Comp: org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.STICKY : PERMISSION
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps()
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder
Comp: org.apache.commons.compress.archivers.sevenz.Folder.coders : Coder[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor : StreamCompressor
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.queue : Queue
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.checksumWithCompressedChunks : boolean
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB()
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.TAPE : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.out : DeflaterOutputStream
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream
Comp: org.apache.commons.compress.utils.BoundedInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$200(ZipFile.OffsetEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.nameMap : Map
Comp: org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.unzftab : int[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$500(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.totalWrittenToOutputStream : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entry : CpioArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveOutputStreamProviders : SortedMap
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.count : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.finalize()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.initializeTables(int)
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.unicode : char
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getHeaderId()
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(int)
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength()
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE : UnicodeExtraFieldPolicy
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.values()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags : byte
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.out : OutputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord()
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.ordinal()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCreationDate : boolean
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in : InputStream
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.getBytesRead()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix()
Comp: org.tukaani.xz.LZMAOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method : int
Comp: org.apache.commons.compress.archivers.dump.Dirent.Dirent(int,int,int,String)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.arjFlags : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode()
Comp: org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.offset : long
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(Date)
Comp: org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(int,int)
Comp: org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(String,String)
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[])
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.inUse : boolean[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrcValue()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getUserId()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.fileType : int
Comp: org.apache.commons.compress.utils.CountingOutputStream.bytesWritten : long
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.Entry(ZipFile.OffsetEntry)
Comp: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.unpackSizes : long[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod
Comp: org.apache.commons.compress.compressors.CompressorInputStream.getBytesRead()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefixesLength()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.last : int
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(Coder)
Comp: org.tukaani.xz.XZ
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode : int
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getHeaderId()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.blockBuffer : byte[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBytesRead()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$202(DumpArchiveEntry.TapeSegmentHeader,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[])
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCentralDirectoryExtra(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra : UnparseableExtraFieldData
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount()
Comp: org.apache.commons.compress.utils.ArchiveUtils.sanitize(String)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(File)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$500(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_WRITE : PERMISSION
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(long)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.decompressUntilEOF : Boolean
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent : boolean
Comp: org.apache.commons.compress.utils.Charsets
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.windowsAttributes : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.bigNumberMode : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries : List
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode : Zip64Mode
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int
Comp: org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(String)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.numberOptionOrDefault(Object,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.version : String
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending : Map
Comp: org.apache.commons.compress.compressors.FileNameUtil
Comp: org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_EXEC : PERMISSION
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.get()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(int)
Comp: org.apache.commons.compress.compressors.gzip.GzipUtils.fileNameUtil : FileNameUtil
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams : int
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.decompressBuf : byte[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.name : String
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(OutputStream,int)
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nMTF : int
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader : LocalFileHeader
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData()
Comp: org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.reverseMapping : List
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.bytesRemaining : long
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream
Comp: org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader()
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getMode()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(DataOutput)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.writeOut(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ArchiveStreamProvider
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(OutputStream,GzipParameters)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.simpleName : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFields()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(boolean)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.crc : CRC32
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.writeOut(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.code : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderIndex : int
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in : PushbackInputStream
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(ZipArchiveEntry,ZipArchiveOutputStream.1)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$200(SevenZOutputFile)
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability
Comp: org.apache.commons.compress.archivers.zip.ZipFile.encoding : String
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.eclass : int[]
Comp: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.hasCrc : BitSet
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.target : File
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.gid : int
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(byte[])
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.NONE : byte[]
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,byte)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setComment(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive : int
Comp: org.tukaani.xz.LZMA2InputStream
Comp: org.apache.commons.compress.archivers.arj.MainHeader.comment : String
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readFully(DataInputStream,byte[])
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,byte,boolean)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.filesize : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entryOffset : long
Comp: org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf : ByteBuffer
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.crc32 : CRC32
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass()
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getHeaderId()
Comp: org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[])
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm
Comp: org.apache.commons.compress.archivers.sevenz.BindPair[]
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.STORED : ZipMethod
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.encoding : String
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeCreated : int
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.getInputStream()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.get()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding : String
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$402(ZipArchiveInputStream.CurrentEntry,boolean)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.reset()
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2 : ZipMethod
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedCombinedCRC : int
Comp: org.apache.commons.compress.archivers.ArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.SPLITTING : Feature
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge : StreamBridge
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.fileType : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG : byte[]
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier.get()
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(int)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge : StreamBridge
Comp: org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(ZipFile)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mtime : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,int)
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.acceptableOptions : Class[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$614(ZipArchiveInputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256Decoder()
Comp: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.X0016_CertificateIdForCentralDirectory()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.CLRI : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.getId()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.2.{...}
Comp: org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)
Comp: org.tukaani.xz.LZMAOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(ZipLong)
Comp: org.tukaani.xz.FinishableWrapperOutputStream
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out : OutputStream
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag : boolean
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names : HashMap
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.close()
Comp: org.apache.commons.compress.changes.Change.isReplaceMode()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.ADDR : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(DataInputStream)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE : int[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.generateMTFValues_yy : byte[]
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer : byte[]
Comp: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE : CachedAvailability
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.hashCode()
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.in : ArchiveInputStream
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_READ : PERMISSION
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.pack200.Pack200Strategy.newStreamBridge()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(DataInputStream)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID()
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveInputStreamProviders : SortedMap
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data : Data
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.name : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra()
Comp: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId()
Comp: org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded : Zip64Mode
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.encryptionVersion : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(byte[],byte[])
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.UnixStat
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ctime : long
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.previousDumpDate : long
Comp: org.apache.commons.compress.changes.ChangeSetResults
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[]
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.med3(byte,byte,byte)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.AES256SHA256 : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.closed : boolean
Comp: org.tukaani.xz.DeltaOptions
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(long)
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getUnicodeName()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding : ZipEncoding
Comp: long[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.entries : List
Comp: org.apache.commons.compress.utils.BitInputStream.BitInputStream(InputStream,ByteOrder)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE : FramedSnappyDialect
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime : ZipLong
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer : byte[]
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(CpioArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(ScatterGatherBackingStoreSupplier)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.buf : byte[]
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding.charset : Charset
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor()
Comp: org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,String)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.finish()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close()
Comp: org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_tPos : int
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater()
Comp: org.apache.commons.compress.archivers.sevenz.Coder[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.fileAccessMode : int
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW : UnparseableExtraField
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entrySize : long
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.endReached : boolean
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(ExecutorService)
Comp: org.tukaani.xz.FilterOptions
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(String)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN : ZipMethod
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended : boolean
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.encoding : String
Comp: org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header : TapeSegmentHeader
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue()
Comp: org.apache.commons.compress.archivers.sevenz.Coder.decompressionMethodId : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[])
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER : SevenZMethod
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf : byte[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos : long
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.currBlkIdx : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETUID : PERMISSION
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.name : String
Comp: org.apache.commons.compress.archivers.zip.ZipMethod[]
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getEntries(String)
Comp: org.apache.commons.compress.utils.Charsets.US_ASCII : Charset
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.size : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES : TarArchiveEntry[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName : String
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeTrailer()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedCombinedCRC : int
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor()
Comp: org.tukaani.xz.FilterOptions.getInputStream(InputStream)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$500(DumpArchiveEntry.TapeSegmentHeader)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE : CachedAvailability
Comp: org.apache.commons.compress.archivers.zip.ZipLong.getBytes()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(long)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(InputStream,long)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Pack200Strategy)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead()
Comp: org.apache.commons.compress.utils.CountingOutputStream.flush()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.bufUsed : int
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte()
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.out : OutputStream
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(int)
Comp: org.apache.commons.compress.compressors.CompressorException.CompressorException(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64 : boolean
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName()
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.isLink()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream : boolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$600(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.count(int)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.totalCodesRead : long
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getZipArchiveEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipLong.AED_SIG : ZipLong
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(InputStream,int)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.currentCompressedChunk : SnappyCompressorInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2 : ZipMethod
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.isCompressed : boolean
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime()
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.LZMA : ZipMethod
Comp: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING : ZipEncoding
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.archivers.zip.BitStream.nextBit()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector : byte[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsPerBlock : int
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_copy : int[]
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.SeekableByteChannelCompressor(Deflater,SeekableByteChannel)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.{...}
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStackLocation : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues2_pos : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(int)
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.gid : long
Comp: org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int)
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.headerId : ZipShort
Comp: org.tukaani.xz.LZMAInputStream.LZMAInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.quadrant : char[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.entry : ZipArchiveEntry
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.ASCII : ZipEncoding
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.loc : long
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[])
Comp: org.apache.commons.compress.compressors.CompressorOutputStream
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(byte[],int)
Comp: org.apache.commons.compress.utils.CountingInputStream.count(long)
Comp: org.apache.commons.compress.archivers.sevenz.StartHeader
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionDoneAt : long
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(String)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(Archive)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION[]
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.localFileData : byte[]
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(Object)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(long)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ : UnparseableExtraField
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.currentOutputStream : CountingOutputStream
Comp: org.apache.commons.compress.changes.Change.type : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out : OutputStream
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.incrementCodeSize()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock()
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.getNextServiceLoader()
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.operatingSystem : int
Comp: org.apache.commons.compress.compressors.bzip2.CRC
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_WRITE : PERMISSION
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(ScatterGatherBackingStore,StreamCompressor)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.hitCentralDirectory : boolean
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int)
Comp: org.apache.commons.compress.changes.Change.input : InputStream
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(BZip2CompressorOutputStream.Data,int)
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.decode(byte[])
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(String)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(DataOutput)
Comp: org.tukaani.xz.LZMA2Options.getLc()
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.TempFileCachingStreamBridge()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$300(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderInputStream : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance : Calendar
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.read()
Comp: org.apache.commons.compress.archivers.zip.BinaryTree.BinaryTree(int)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.count(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar : int
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.pushEncodedChar(ByteBuffer,char)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize()
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.centralData : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummy()
Comp: org.apache.commons.compress.archivers.tar.TarUtils
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON : ArchiveStreamFactory
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate()
Comp: org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(DataOutput)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getVolume()
Comp: org.apache.commons.compress.archivers.sevenz.Archive.Archive()
Comp: org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC : ZipLong
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ino : int
Comp: org.apache.commons.compress.parallel.InputStreamSupplier.get()
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.archiveSize : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(boolean)
Comp: org.apache.commons.compress.compressors.FileNameUtil.compressSuffix : Map
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset : int
Comp: org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockSize100k : int
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(Object)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.size : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3 : ZipMethod
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$302(ZipArchiveInputStream.CurrentEntry,InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(long,long)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger)
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closed : boolean
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getBytesRead()
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.minimumMatchLength : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill()
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName : String
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.streamIdentifier : boolean
Comp: org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderCrc : long
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(ArArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getTableSize()
Comp: org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(JarEntry)
Comp: org.apache.commons.compress.archivers.zip.Zip64Mode
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.getCodeSize()
Comp: org.apache.commons.compress.utils.BitInputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime()
Comp: org.apache.commons.compress.archivers.zip.ScatterStatistics.mergingElapsed : long
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh : int[]
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.mainHeader : MainHeader
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive)
Comp: org.apache.commons.compress.utils.BoundedInputStream.read()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.mode : int
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next : ArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer()
Comp: org.apache.commons.compress.utils.CountingInputStream.getBytesRead()
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(int)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(byte)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream)
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.checksum : Checksum
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getComment()
Comp: org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(InputStream,long,int)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(Deflater)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCrc : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(DataOutput)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map)
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.SimpleEncodingHolder(char[])
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.backingStore : ScatterGatherBackingStore
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(byte[])
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate()
Comp: org.apache.commons.compress.archivers.tar.TarConstants
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setSize(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField()
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.UnparseableExtraField(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.lastModified : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.nInUse : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_cost : short[]
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(BigInteger)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock()
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decodeByte(byte)
Comp: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor()
Comp: org.apache.commons.compress.changes.Change.getEntry()
Comp: org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(String)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.resetCodeSize()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.holes : int
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.bytesRead : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rNToGo : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeAccessed : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(ZipArchiveEntry,ZipFile.OffsetEntry,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(ZipShort)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.WAVPACK : ZipMethod
Comp: org.tukaani.xz.LZMAOutputStream
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.centralDirectoryData : byte[]
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.useUnicodeExtraFields : boolean
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(OutputStream,String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Zip64Mode)
Comp: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.SubStreamsInfo()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(int)
Comp: org.apache.commons.compress.changes.ChangeSet.ChangeSet()
Comp: org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(String)
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.getInputStream()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.BZIP2Decoder()
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll : int[]
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.CAFE_DOOD : byte[]
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.setTableSize(int)
Comp: org.apache.commons.compress.utils.CountingOutputStream.count(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE[].clone()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND : BigInteger
Comp: org.apache.commons.compress.archivers.sevenz.Coders.CODER_MAP : Map
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(long)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry : ZipArchiveEntry
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.method : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap : int[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.name : String
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_runningOrder : int[]
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.expectedChecksum : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(GeneralPurposeBit)
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(ZipEightByteInteger)
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(long)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(boolean)
Comp: org.apache.commons.compress.utils.Charsets.UTF_8 : Charset
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isStarSparse()
Comp: org.apache.commons.compress.archivers.zip.ZipShort.getBytes()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.contentMethods : Iterable
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel : SeekableByteChannel
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getHeaderId()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator : Comparator
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE : PERMISSION
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.CHRDEV : TYPE
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(InputStream,boolean)
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(ZipMethod,ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.1.{...}
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse : boolean[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedSize : long
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(DataOutput)
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out : LZMAOutputStream
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(DataInputStream)
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader()
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.dictionarySize : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink()
Comp: org.apache.commons.compress.utils.Charsets.UTF_16 : Charset
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(boolean)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.deflate()
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File,byte[])
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders : byte[][]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged : boolean
Comp: org.tukaani.xz.LZMA2Options.setDictSize(int)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG : ZipLong
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry()
Comp: org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING : ZipEncoding
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder()
Comp: org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.$VALUES : COMPRESSION_TYPE[]
Comp: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.ino : int
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.writeIndex : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.this$0 : ZipFile
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.hasNext()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.getCode()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.hasHitEOF : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nInUse : int
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.localData : byte[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.getHeaderId()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.offset : long
Comp: org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short)
Comp: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform : int
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader()
Comp: org.apache.commons.compress.archivers.zip.ZipShort.equals(Object)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.addDummyByte : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipFile.archiveName : String
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type : TYPE
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mode : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator
Comp: org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder
Comp: org.apache.commons.compress.utils.CountingOutputStream.close()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.options : Object
Comp: org.apache.commons.compress.archivers.zip.ZipFile.access$600(ZipFile)
Comp: org.apache.commons.compress.changes.Change.getInput()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.encoding : String
Comp: org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException(String)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.opts : FilterOptions
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setPrefix(int,int)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.atime : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedBlockCRC : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongNameEntry()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finalize()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.nestedEnum : Enumeration
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG : ZipShort
Comp: org.apache.commons.compress.archivers.zip.Zip64RequiredException.Zip64RequiredException(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.cftab : int[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream
Comp: org.apache.commons.compress.utils.Sets.newHashSet(Object[])
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockRandomised : boolean
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min : long
Comp: org.apache.commons.compress.utils.IOUtils.closeQuietly(Closeable)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding()
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.simpleEncodings : Map
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.active : DumpArchiveEntry
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.BZLIB : COMPRESSION_TYPE
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.workLimit : int
Comp: org.apache.commons.compress.archivers.zip.BitStream.nextBits(int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(int)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.UnicodeExtraFieldPolicy(String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCount()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(OutputStream,DeflateParameters)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,String)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.incrementCodeSize()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA()
Comp: org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderOffset : long
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int


[OUTPUT] Initial |S| = 365
[OUTPUT] Analysing Commits ... 
[DEBUG] === Inspecting commit: 5e3ed8ce : [b29395d bump release version, use latest release apidocs] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2ed72319 : [cd6de3a embrace parent 42] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 9f8f3b9f : [cd6de3a embrace parent 42] .travis.yml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6f8d19a3 : [35891d3 bump version] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 534811d3 : [35891d3 bump version] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 335bbd8d : [4543847 fix release notes] RELEASE-NOTES.txt ===
[DEBUG] 
[DEBUG] === Inspecting commit: 42591a10 : [8c6c659 prepare RC1 of Commons Compress 1.13] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: bf4b5960 : [8c6c659 prepare RC1 of Commons Compress 1.13] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5de04f54 : [e87e838 re-generated various generated pages] src/site/xdoc/mail-lists.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: c4469a71 : [e87e838 re-generated various generated pages] src/site/xdoc/issue-tracking.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 014a9b7f : [e87e838 re-generated various generated pages] CONTRIBUTING.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 0c7d15e1 : [592dac7 Updated download page in preparation for 1.13 release.] src/site/xdoc/download_compress.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 485b0db8 : [b9acd7c update release notes for 1.13] RELEASE-NOTES.txt ===
[DEBUG] 
[DEBUG] === Inspecting commit: 9fd0a36a : [810883c use jacoco for coveralls report] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: bb732782 : [810883c use jacoco for coveralls report] .travis.yml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 3144e1ef : [72f048d make JIRA report more useful] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: c23c6f81 : [71df15e use latest version of japicmp] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: a72fcf42 : [1bc62d6 no reason to specify newVersion in japicmp] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: c0968f62 : [b3d0c26 use jacoco instead of cobertura, use japicmp] src/site/resources/profile.japicmp ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1cf101bc : [b3d0c26 use jacoco instead of cobertura, use japicmp] src/site/resources/profile.jacoco ===
[DEBUG] 
[DEBUG] === Inspecting commit: 4bdabafe : [b3d0c26 use jacoco instead of cobertura, use japicmp] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2910ad88 : [bf88f6d false positives] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 3f1b5160 : [bf88f6d false positives] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 95a8e1d9 : [ea35f64 remove unused code] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictSize(Object) : org.apache.commons.compress.archivers.sevenz.LZMADecoder : (83, 88)
[DEBUG] 
[DEBUG] === Inspecting commit: b45ff68c : [c497504 COMPRESS-372 record changes] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7c2809fc : [0f4caeb COMPRESS-372 add latest release API doc link] src/site/site.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 0fa393e3 : [85184c3 COMPRESS-377 properly close StreamCompressor] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close() : org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close() : (121, 128) --> (121, 129)
[DEBUG] 
[DEBUG] === Inspecting commit: d2508df9 : [85184c3 COMPRESS-377 properly close StreamCompressor] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 8d2254c6 : [ce6c33a flag false positive] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 5acf6912 : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(int) : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(int) : (98, 101) --> (98, 101)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(byte[],int,int) : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(byte[],int,int) : (57, 96) --> (57, 96)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_1_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (108, 108)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_4_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (111, 111)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_3_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (110, 110)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_2_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (109, 109)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_7_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (114, 114)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_0_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (107, 107)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_5_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (112, 112)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_6_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (113, 113)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_4_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (111, 111)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_0_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (107, 107)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_3_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (110, 110)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_6_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (113, 113)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_2_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (109, 109)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_1_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (108, 108)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_7_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (114, 114)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_5_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (112, 112)
[DEBUG] 
[DEBUG] === Inspecting commit: 44daff99 : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf : byte[] : org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf : byte[] : (61, 61) --> (61, 63)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer : byte[] : org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer : byte[] : (60, 60) --> (60, 61)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.StreamCompressor.BUFFER_SIZE : int : org.apache.commons.compress.archivers.zip.StreamCompressor : (59, 59)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.StreamCompressor.bufferSize : int : org.apache.commons.compress.archivers.zip.StreamCompressor : (59, 59)
[DEBUG] 
[DEBUG] === Inspecting commit: f6ac459a : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.peek() : org.apache.commons.compress.archivers.dump.TapeInputStream.peek() : (211, 230) --> (211, 230)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord() : org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord() : (232, 248) --> (232, 248)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int) : org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int) : (107, 151) --> (107, 151)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : (153, 197) --> (153, 197)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.read() : org.apache.commons.compress.archivers.dump.TapeInputStream.read() : (97, 105) --> (97, 105)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean) : org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean) : (53, 83) --> (53, 83)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.dump.TapeInputStream.RECORD_SIZE : int : org.apache.commons.compress.archivers.dump.TapeInputStream : (41, 41)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.dump.TapeInputStream.recordSize : int : org.apache.commons.compress.archivers.dump.TapeInputStream : (41, 41)
[DEBUG] 
[DEBUG] === Inspecting commit: b62d01b5 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.StreamBridge.stop() : org.apache.commons.compress.compressors.pack200.StreamBridge.stop() : (63, 74) --> (63, 74)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.StreamBridge.getInput() : org.apache.commons.compress.compressors.pack200.StreamBridge.getInput() : (46, 56) --> (46, 56)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock : Object : org.apache.commons.compress.compressors.pack200.StreamBridge : (36, 36)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.pack200.StreamBridge.INPUT_LOCK : Object : org.apache.commons.compress.compressors.pack200.StreamBridge : (36, 36)
[DEBUG] 
[DEBUG] === Inspecting commit: f687dfe0 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32() : (926, 939) --> (925, 938)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]) : org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]) : (954, 996) --> (953, 995)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory() : (867, 895) --> (866, 894)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>) : (633, 725) --> (632, 724)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader() : org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader() : (1073, 1082) --> (1072, 1081)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder() : org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder() : (350, 364) --> (349, 363)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64() : (897, 924) --> (896, 923)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : (597, 631) --> (596, 630)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String) : org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String) : (398, 414) --> (397, 413)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : (1026, 1071) --> (1025, 1070)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.shortBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (148, 148)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (150, 150)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator : Comparator<ZipArchiveEntry> : org.apache.commons.compress.archivers.zip.ZipFile : (1188, 1216)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (149, 149)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (151, 151)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (145, 145)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (147, 147)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.wordBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (146, 146)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (152, 152)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (148, 148)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.OFFSET_COMPARATOR : Comparator<ZipArchiveEntry> : org.apache.commons.compress.archivers.zip.ZipFile : (1189, 1217)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.WORD_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (146, 146)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.CFH_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (147, 147)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.CFH_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (151, 151)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (145, 145)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.WORD_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (150, 150)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (149, 149)
[DEBUG] 
[DEBUG] === Inspecting commit: 4b8aae1a : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor() : (730, 761) --> (730, 761)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long) : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long) : (532, 562) --> (532, 562)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive() : (912, 926) --> (912, 926)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long) : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long) : (965, 987) --> (965, 987)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry() : (219, 325) --> (219, 325)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (156, 156)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (159, 159)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (157, 157)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (155, 155)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (158, 158)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.TWO_DWORD_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (159, 159)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.SHORT_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (157, 157)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.WORD_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (158, 158)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.SKIP_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (156, 156)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (155, 155)
[DEBUG] 
[DEBUG] === Inspecting commit: f2fd66b1 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData() : org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData() : (350, 381) --> (350, 381)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf : byte[] : org.apache.commons.compress.archivers.tar.TarArchiveInputStream : (52, 52)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.SMALL_BUF : byte[] : org.apache.commons.compress.archivers.tar.TarArchiveInputStream : (52, 52)
[DEBUG] 
[DEBUG] === Inspecting commit: 73319ba5 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int) : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int) : (276, 281) --> (276, 281)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry() : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry() : (223, 274) --> (223, 274)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (86, 86)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (85, 85)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (87, 87)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.SIX_BYTES_BUF : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (87, 87)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.TWO_BYTES_BUF : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (85, 85)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.FOUR_BYTES_BUF : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (86, 86)
[DEBUG] 
[DEBUG] === Inspecting commit: 568792c7 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry() : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry() : (75, 166) --> (75, 166)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (62, 62)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (59, 59)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (61, 61)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (60, 60)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (58, 58)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.NAME_BUF : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (58, 58)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LAST_MODIFIED_BUF : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (59, 59)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ID_BUF : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (60, 60)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LENGTH_BUF : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (62, 62)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.FILE_MODE_BUF : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (61, 61)
[DEBUG] 
[DEBUG] === Inspecting commit: 8704590f : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveInputStream.read() : org.apache.commons.compress.archivers.ArchiveInputStream.read() : (66, 83) --> (66, 83)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveInputStream.single : byte[] : org.apache.commons.compress.archivers.ArchiveInputStream : (42, 42)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ArchiveInputStream.SINGLE : byte[] : org.apache.commons.compress.archivers.ArchiveInputStream : (42, 42)
[DEBUG] 
[DEBUG] === Inspecting commit: 9ca675a9 : [5e0980f whitelist byte-arrays deliberately shared in package] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 737e3154 : [5e0980f whitelist byte-arrays deliberately shared in package] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 36e3ded7 : [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean) : org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean) : (180, 199) --> (180, 199)
[DEBUG] 
[DEBUG] === Inspecting commit: 36c88347 : [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : (153, 197) --> (153, 197)
[DEBUG] 
[DEBUG] === Inspecting commit: f45b860a : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: ff0c293a : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: b01fe9cf : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 11220ace : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 2e1e21e6 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 1d6b83bd : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: d2b20571 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 6e4da783 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 5c5e189e : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: fe6bf789 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 9413ed9e : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 96b392d2 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 502d6356 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 503a500e : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 748967ac : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 8f25a546 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 6cc52283 : [b03521d whitespace] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 5676144a : [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object) : org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object) : (102, 113) --> (98, 105)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream) : org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream) : (68, 85) --> (68, 81)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object) : org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object) : (54, 66) --> (54, 66)
[DEBUG] 
[DEBUG] === Inspecting commit: 77d3f98a : [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(Coder,InputStream) : org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(Coder,InputStream) : (57, 62) --> (57, 62)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(Object) : org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(Object) : (50, 55) --> (50, 55)
[DEBUG] 
[DEBUG] === Inspecting commit: 2b562eac : [587430d properly make UnsupportedZipFeatureException Serializable] src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry : ZipArchiveEntry : org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry : ZipArchiveEntry : (31, 31) --> (31, 32)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.serialVersionUID : long : org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.serialVersionUID : long : (32, 32) --> (32, 34)
[DEBUG] 
[DEBUG] === Inspecting commit: 069e07fd : [5294726 improve null-safety] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry) : org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry) : (371, 380) --> (371, 380)
[DEBUG] 
[DEBUG] === Inspecting commit: 46375d0b : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 452b019b : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 5deeea00 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 823371a1 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: e2c4cd11 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: f5b403ec : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: fb357437 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock() : org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock() : (181, 221) --> (181, 221)
[DEBUG] 
[DEBUG] === Inspecting commit: e61b7b3c : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish() : org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish() : (126, 145) --> (126, 145)
[DEBUG] 
[DEBUG] === Inspecting commit: 46b863b7 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass() : org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass() : (448, 451) --> (448, 453)
[DEBUG] 
[DEBUG] === Inspecting commit: 07e6343b : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next() : org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next() : (274, 277) --> (274, 278)
[DEBUG] 
[DEBUG] === Inspecting commit: dc536c42 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.LFH_OFFSET_FOR_FILENAME_LENGTH : long : org.apache.commons.compress.archivers.zip.ZipFile.LFH_OFFSET_FOR_FILENAME_LENGTH : long : (1010, 1023) --> (1010, 1025)
[DEBUG] 
[DEBUG] === Inspecting commit: 8e45a6fd : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory() : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory() : (1354, 1420) --> (1354, 1420)
[DEBUG] 
[DEBUG] === Inspecting commit: 82e1403d : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive() : (911, 925) --> (911, 925)
[DEBUG] 
[DEBUG] === Inspecting commit: f67086ea : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream) : org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream) : (222, 254) --> (222, 254)
[DEBUG] 
[DEBUG] === Inspecting commit: b40c73f1 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean) : org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean) : (180, 199) --> (180, 199)
[DEBUG] 
[DEBUG] === Inspecting commit: cdefac3d : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map<String, String>,String,byte,String) : org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map<String, String>,String,byte,String) : (642, 693) --> (642, 693)
[DEBUG] 
[DEBUG] === Inspecting commit: 66d63f42 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry) : (431, 445) --> (431, 445)
[DEBUG] 
[DEBUG] === Inspecting commit: bb7708a1 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : (153, 197) --> (153, 197)
[DEBUG] 
[DEBUG] === Inspecting commit: 9bcd95e5 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry() : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry() : (228, 319) --> (228, 319)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI() : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI() : (171, 193) --> (171, 193)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS() : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS() : (195, 217) --> (195, 217)
[DEBUG] 
[DEBUG] === Inspecting commit: 4e3cf00d : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry) : org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry) : (308, 336) --> (308, 336)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean) : org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean) : (338, 367) --> (338, 367)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int) : org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int) : (509, 533) --> (509, 533)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry) : org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry) : (275, 306) --> (275, 306)
[DEBUG] 
[DEBUG] === Inspecting commit: 041776c1 : [d5867f1 run rat check on travis] .travis.yml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1ba27b9b : [a172b4b Move apache-rat configuration from site to pluginManagement section, so that it also applies when mvn apache-rat:check is run.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 100b0040 : [726ba6f COMPRESS-367 record Mike Mole's patch] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 28b45b57 : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/resources/invalid-zip.zip ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5923484a : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7fbe2d54 : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: a20d40a8 : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry() : (219, 324) --> (219, 325)
[DEBUG] 
[DEBUG] === Inspecting commit: 394184f4 : [e0c83d2 add a few more patterns to .gitattributes] .gitattributes ===
[DEBUG] 
[DEBUG] === Inspecting commit: 67a2a276 : [8de4b8a line-ends] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: fc6b61a4 : [8de4b8a line-ends] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 65a7626b : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 26aa88b9 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 8d464374 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7645e745 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: bee02007 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 49bdafb7 : [ffe346a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 555eb118 : [6c52318 Don't need local var.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry) : org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry) : (530, 552) --> (530, 551)
[DEBUG] 
[DEBUG] === Inspecting commit: 3456dc7d : [c3d2cec [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry) : org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry) : (530, 558) --> (530, 552)
[DEBUG] 
[DEBUG] === Inspecting commit: 693f4a44 : [05415c0 Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 92de6a81 : [7b7f490 Formatting.] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: c4dc4dd2 : [eda3a02 Typo.] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 80aef266 : [5c9661c param name 'input' should not hide field.] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[]) : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[]) : (189, 191) --> (189, 191)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,boolean) : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,boolean) : (205, 211) --> (205, 211)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int) : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int) : (201, 203) --> (201, 203)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],boolean) : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],boolean) : (197, 199) --> (197, 199)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[]) : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[]) : (193, 195) --> (193, 195)
[DEBUG] 
[DEBUG] === Inspecting commit: 69a60a47 : [f1a5821 Better local variable name.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : (462, 543) --> (462, 543)
[DEBUG] 
[DEBUG] === Inspecting commit: 9f6b4b8a : [a428e42 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : (460, 541) --> (462, 543)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR_HEADER_SIZE : int : org.apache.commons.compress.archivers.ArchiveStreamFactory : (91, 91)
[DEBUG] 
[DEBUG] === Inspecting commit: 6ccebe8d : [03239b0 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : (458, 539) --> (460, 541)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP_SIGNATURE_SIZE : int : org.apache.commons.compress.archivers.ArchiveStreamFactory : (91, 91)
[DEBUG] 
[DEBUG] === Inspecting commit: c2af0559 : [7145b4a Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : (456, 537) --> (458, 539)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.SIGNATURE_SIZE : int : org.apache.commons.compress.archivers.ArchiveStreamFactory : (91, 91)
[DEBUG] 
[DEBUG] === Inspecting commit: 8b1c3635 : [a214d4c Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 8d1f9fbe : [3fc9325 Unnecessary cast from int to int.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[]) : org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[]) : (35, 44) --> (35, 44)
[DEBUG] 
[DEBUG] === Inspecting commit: 7cd1f913 : [8954230 Format nit.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: d042d3bd : [35523dd Fix Javadoc warning.] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: fc77f1cb : [703715e [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 7b015fc5 : [3fdcafd [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 261db7b3 : [b9153ca [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>) : org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>) : (109, 161) --> (109, 151)
[DEBUG] 
[DEBUG] === Inspecting commit: 366e50ad : [2be44aa Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 28e210de : [4d55183 In-line local variable.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : (119, 123) --> (119, 122)
[DEBUG] 
[DEBUG] === Inspecting commit: 6c267dbc : [9f468f1 [COMPRESS-362] Bullet-proof code using try-with-resources statements] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader() : org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader() : (214, 267) --> (214, 267)
[DEBUG] 
[DEBUG] === Inspecting commit: 7dc95295 : [fe5ffa6 Document new service loader feature.] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: d93425eb : [fe5ffa6 Document new service loader feature.] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: f5b70b77 : [735ba6d Document the 'current' (next) release is 1.13 and requires Java 7.] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 3dadc491 : [1686712 Rename section for 1.13.] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 29d6392a : [332b7a3 Reverse order of what's new subsections: the latest comes first.] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 278cf99d : [398c102 Link to 1.13 Javadocs.] src/site/site.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2f077534 : [427d742 Update maven-pmd-plugin from 3.6 to 3.7.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: d9f7c82d : [c55c6c8 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 7bf4d95e : [d4c3261 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 21d0e2e7 : [696dbe9 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 54ad50c8 : [dd9f895 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : (119, 122) --> (119, 123)
[DEBUG] 
[DEBUG] === Inspecting commit: 347171d6 : [7e69189 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 26efd2f4 : [fa4f029 Formatting.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: f225057d : [c7c2fe4 Update findbugs-maven-plugin from 3.0.3 to 3.0.4.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5d00f537 : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.FlushShieldFilterOutputStream : org.apache.commons.compress.utils.FlushShieldFilterOutputStream : (26, 40)
[DEBUG] 
[DEBUG] === Inspecting commit: 49699e7d : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object) : org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object) : (46, 55) --> (46, 51)
[DEBUG] 
[DEBUG] === Inspecting commit: 1c967120 : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : (119, 127) --> (119, 122)
[DEBUG] 
[DEBUG] === Inspecting commit: 3eba30ad : [99eb4cb Remove unused imports.] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 91901633 : [99eb4cb Remove unused imports.] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: b390e8a7 : [99eb4cb Remove unused imports.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: fcdd43f1 : [d5f3062 the new ServiceLoader stuff is worth a special notice] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 957285f8 : [66726ea COMPRESS-375 record changes made by Plamen] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: f9474b52 : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier : org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier : (24, 40)
[DEBUG] 
[DEBUG] === Inspecting commit: 423e7002 : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: a483c190 : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier) : org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator : (196, 220)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier) : org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator : (139, 150)
[DEBUG] 
[DEBUG] === Inspecting commit: d5f325b2 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.archivers.sevenz.LZMADecoder : org.apache.commons.compress.archivers.sevenz.LZMADecoder : (30, 121)
[DEBUG] 
[DEBUG] === Inspecting commit: c37bf3a7 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 60479f34 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfigurationTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 4970f3b4 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: b2fdc0e3 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/limitations.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 31351506 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 4ef19ace : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5e517f4a : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] Delete: CLASS: org.apache.commons.compress.archivers.sevenz.Coders.LZMADecoder : org.apache.commons.compress.archivers.sevenz.Coders : (102, 116)
[DEBUG] 
[DEBUG] === Inspecting commit: a73ecd8f : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 822ab02a : [e8cee81 copy paste error] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: fbb851f4 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream : org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream : (28, 80)
[DEBUG] 
[DEBUG] === Inspecting commit: 5c1e0a8a : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: e16b3e98 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/limitations.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: c33ff53b : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: b919cf53 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: fb569846 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames() : org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames() : (577, 580) --> (582, 585)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream) : org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream) : (493, 545) --> (494, 550)
[DEBUG] 
[DEBUG] === Inspecting commit: 8640e5b7 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1c62128a : [1a31dec upgrade XZ for Java dependency] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 0a94f921 : [c1e7372 CONTRIBUTING.md: replace references to commons-text with references to commons-compress] CONTRIBUTING.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7d789707 : [cf1362e add CONTRIBUTING.md to fix link in README.md] CONTRIBUTING.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6214dc77 : [5dab55a README.md: fix javadoc link] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6cc07141 : [0b04d80 README.md: use latest released version in dependency declaration example] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: d313d417 : [14441db README.md: fix jira link] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 049ff547 : [7c93eb1 Update README.md.] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 63512bf6 : [a99b6bb Add badges.] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 054f5ae4 : [e126bf9 Add README.md as generated by 'mvn commons:readme-md'] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: b1bcb077 : [db8bdf6 Enable TravisCI.] .travis.yml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 74870e91 : [db8bdf6 Enable TravisCI.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 37138089 : [350f01c [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: f16fc825 : [350f01c [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: e466cba2 : [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean) : org.apache.commons.compress.compressors.CompressorStreamProvider : (34, 57)
[DEBUG] Delete: METHOD: org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream) : org.apache.commons.compress.compressors.CompressorStreamProvider : (34, 52)
[DEBUG] 
[DEBUG] === Inspecting commit: 8ac721a0 : [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream) : org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream) : (415, 486) --> (415, 435)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders() : (160, 199) --> (160, 199)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders() : (201, 241) --> (201, 241)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>) : org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>) : (286, 291) --> (286, 291)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean) : org.apache.commons.compress.compressors.CompressorStreamFactory : (437, 491)
[DEBUG] 
[DEBUG] === Inspecting commit: f7ebee2e : [545c399 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: abd8cf55 : [22edc12 [COMPRESS-369]] src/test/resources/META-INF/services/org.apache.commons.compress.archivers.ArchiveStreamProvider ===
[DEBUG] 
[DEBUG] === Inspecting commit: 8b4b0a1b : [22edc12 [COMPRESS-369]] src/test/java/org/apache/commons/compress/archivers/TestArchiveStreamProvider.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: a69e214a : [22edc12 [COMPRESS-369]] src/test/java/org/apache/commons/compress/archivers/ArchiveServiceLoaderTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5e63a225 : [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.archivers.ArchiveStreamProvider : org.apache.commons.compress.archivers.ArchiveStreamProvider : (26, 88)
[DEBUG] 
[DEBUG] === Inspecting commit: afd821bc : [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream) : (182, 250) --> (300, 315)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding : String : org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding : String : (127, 130) --> (149, 154)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream) : (252, 306) --> (380, 395)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String) : org.apache.commons.compress.archivers.ArchiveStreamFactory : (164, 166)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set<String>,ArchiveStreamProvider,TreeMap<String, ArchiveStreamProvider>) : org.apache.commons.compress.archivers.ArchiveStreamFactory : (154, 159)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (209, 248)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (160, 162)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (547, 550)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (531, 537)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String) : org.apache.commons.compress.archivers.ArchiveStreamFactory : (317, 378)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (150, 152)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (539, 545)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String) : org.apache.commons.compress.archivers.ArchiveStreamFactory : (397, 446)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (168, 207)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (552, 555)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveInputStreamProviders : SortedMap<String, ArchiveStreamProvider> : org.apache.commons.compress.archivers.ArchiveStreamFactory : (146, 146)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveOutputStreamProviders : SortedMap<String, ArchiveStreamProvider> : org.apache.commons.compress.archivers.ArchiveStreamFactory : (148, 148)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON : ArchiveStreamFactory : org.apache.commons.compress.archivers.ArchiveStreamFactory : (91, 91)
[DEBUG] 
[DEBUG] === Inspecting commit: 7efd6342 : [22edc12 [COMPRESS-369]] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 16f9dca1 : [a61a952 Better assert failure message.] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 3310678d : [c4a5b14 Add org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString()] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 761fe199 : [c49ccc9 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 20b89940 : [263513a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 4194acc9 : [f98b32e [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 872a5a3c : [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Sets.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/Sets.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.Sets : org.apache.commons.compress.utils.Sets : (25, 48)
[DEBUG] 
[DEBUG] === Inspecting commit: fb69dd53 : [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames() : org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames() : (279, 284) --> (277, 280)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames() : org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames() : (272, 277) --> (272, 275)
[DEBUG] 
[DEBUG] === Inspecting commit: 7c920710 : [f965bc2 [COMPRESS-368]] src/test/resources/META-INF/services/org.apache.commons.compress.compressors.CompressorStreamProvider ===
[DEBUG] 
[DEBUG] === Inspecting commit: 306ada02 : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: b8e95a67 : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorServiceLoaderTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 19c9e5ae : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/ServiceLoaderIterator.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/ServiceLoaderIterator.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.ServiceLoaderIterator : org.apache.commons.compress.utils.ServiceLoaderIterator : (27, 91)
[DEBUG] 
[DEBUG] === Inspecting commit: 86487f49 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Lists.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/Lists.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.Lists : org.apache.commons.compress.utils.Lists : (25, 59)
[DEBUG] 
[DEBUG] === Inspecting commit: 2e1ad7ff : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Iterators.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/Iterators.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.Iterators : org.apache.commons.compress.utils.Iterators : (26, 59)
[DEBUG] 
[DEBUG] === Inspecting commit: 5bd260c7 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.compressors.CompressorStreamProvider : org.apache.commons.compress.compressors.CompressorStreamProvider : (26, 86)
[DEBUG] 
[DEBUG] === Inspecting commit: c527c906 : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 12eeebef : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream) : org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream) : (325, 371) --> (490, 542)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream) : org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream) : (261, 323) --> (413, 484)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getPack200() : org.apache.commons.compress.compressors.CompressorStreamFactory : (561, 563)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton() : org.apache.commons.compress.compressors.CompressorStreamFactory : (549, 551)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getBzip2() : org.apache.commons.compress.compressors.CompressorStreamFactory : (553, 555)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory : (593, 599)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String) : org.apache.commons.compress.compressors.CompressorStreamFactory : (486, 488)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory : (601, 607)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyRaw() : org.apache.commons.compress.compressors.CompressorStreamFactory : (577, 579)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getGzip() : org.apache.commons.compress.compressors.CompressorStreamFactory : (557, 559)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate() : org.apache.commons.compress.compressors.CompressorStreamFactory : (585, 587)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator() : org.apache.commons.compress.compressors.CompressorStreamFactory : (286, 288)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames() : org.apache.commons.compress.compressors.CompressorStreamFactory : (279, 284)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyFramed() : org.apache.commons.compress.compressors.CompressorStreamFactory : (573, 575)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory : (189, 228)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory : (230, 270)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>) : org.apache.commons.compress.compressors.CompressorStreamFactory : (182, 187)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getZ() : org.apache.commons.compress.compressors.CompressorStreamFactory : (581, 583)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getXz() : org.apache.commons.compress.compressors.CompressorStreamFactory : (565, 567)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getLzma() : org.apache.commons.compress.compressors.CompressorStreamFactory : (569, 571)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory : (290, 292)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames() : org.apache.commons.compress.compressors.CompressorStreamFactory : (272, 277)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressUntilEOF() : org.apache.commons.compress.compressors.CompressorStreamFactory : (589, 591)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.CompressorStreamFactory.compressorInputStreamProviders : SortedMap<String, CompressorStreamProvider> : org.apache.commons.compress.compressors.CompressorStreamFactory : (172, 172)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.CompressorStreamFactory.compressorOutputStreamProviders : SortedMap<String, CompressorStreamProvider> : org.apache.commons.compress.compressors.CompressorStreamFactory : (173, 173)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON : CompressorStreamFactory : org.apache.commons.compress.compressors.CompressorStreamFactory : (88, 88)
[DEBUG] 
[DEBUG] === Inspecting commit: 5636d6ed : [f965bc2 [COMPRESS-368]] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 54a42ad4 : [f538f38 avoid overflow when resizing] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : (131, 145) --> (133, 153)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int) : (160, 169) --> (168, 181)
[DEBUG] Insert: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.NAIVE_RESIZE_LIMIT : int : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (40, 40)
[DEBUG] 
[DEBUG] === Inspecting commit: d5693738 : [46f57bf properly return -1 from read on EOF] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 8ca20057 : [46f57bf properly return -1 from read on EOF] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : (104, 116) --> (104, 119)
[DEBUG] 
[DEBUG] === Inspecting commit: 128a6ceb : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 37ebcccf : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 3e54cc76 : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(int) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (64, 73)
[DEBUG] 
[DEBUG] === Inspecting commit: f1e5900c : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel) : org.apache.commons.compress.archivers.zip.ZipFile : (222, 237)
[DEBUG] 
[DEBUG] === Inspecting commit: 08381e0f : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (104, 117)
[DEBUG] 
[DEBUG] === Inspecting commit: 1d5e93ba : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 8aec9d00 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 08da4833 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/site/xdoc/zip.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: f4e6382e : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: c87838af : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String) : org.apache.commons.compress.archivers.zip.ZipFile : (222, 240)
[DEBUG] 
[DEBUG] === Inspecting commit: 9bec5ca6 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: cd73ab44 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 2852148a : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (104, 121)
[DEBUG] 
[DEBUG] === Inspecting commit: 7832d5ed : [d8d9294 class is no longer used] src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java ===
[DEBUG] --- Delete File: src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java ---
[DEBUG] Delete: CLASS: org.apache.commons.compress.archivers.sevenz.BoundedRandomAccessFileInputStream : org.apache.commons.compress.archivers.sevenz.BoundedRandomAccessFileInputStream : (24, 63)
[DEBUG] 
[DEBUG] === Inspecting commit: 9df7919d : [3d509a0 array is exposed intentionally] findbugs-exclude-filter.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: a88124c6 : [652343f fix eol-style] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: b41f22b4 : [e958122 missing license headers] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5bcd5b9a : [e958122 missing license headers] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: fb2518c2 : [72b1789 COMPRESS-327 tests and tweaks for SeekableInMemoryByteChannel] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: ae310114 : [72b1789 COMPRESS-327 tests and tweaks for SeekableInMemoryByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : (104, 120) --> (101, 115)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : (79, 92) --> (77, 89)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long) : (54, 61) --> (53, 61)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long) : (68, 77) --> (68, 75)
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (141, 145)
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (135, 139)
[DEBUG] 
[DEBUG] === Inspecting commit: 54d75fd6 : [a2976b6 modify SeekableInMemoryByteChannel based on feedback by Maciej and Bernd Eckenfels] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : (104, 122) --> (104, 120)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : (77, 92) --> (79, 92)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen() : (99, 102) --> (99, 102)
[DEBUG] Update: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int : (36, 36) --> (38, 39)
[DEBUG] Update: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[] : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[] : (34, 34) --> (36, 36)
[DEBUG] Update: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int : (36, 36) --> (38, 39)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close() : (94, 97) --> (94, 97)
[DEBUG] Insert: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : AtomicBoolean : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (37, 37)
[DEBUG] Delete: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : boolean : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (35, 35)
[DEBUG] 
[DEBUG] === Inspecting commit: 25332b60 : [d9fe818 also compare file contents, patch by Maciej N] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: bb6b30ca : [1e0957d typo] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: f406ae1c : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 9fbc12dd : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: ceeeb794 : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : (91, 94) --> (104, 122)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : (63, 78) --> (77, 92)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long) : (46, 50) --> (52, 59)
[DEBUG] Update: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[] : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[] : (32, 32) --> (33, 34)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long) : (57, 61) --> (66, 75)
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (124, 129)
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (43, 45)
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (131, 140)
[DEBUG] Insert: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (36, 36)
[DEBUG] Insert: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (36, 36)
[DEBUG] Delete: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : long : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (34, 34)
[DEBUG] Delete: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : long : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (34, 34)
[DEBUG] 
[DEBUG] === Inspecting commit: 1d4f728d : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.SeekableInMemoryByteChannel : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (27, 95)
[DEBUG] 
[DEBUG] === Inspecting commit: cf4d48ec : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 34c229a3 : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 9767e3a9 : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : (991, 1035) --> (991, 1036)
[DEBUG] 
[DEBUG] === Inspecting commit: 08febea4 : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int) : (766, 772) --> (766, 773)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int) : (779, 786) --> (780, 792)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer : ByteBuffer : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper : (765, 765)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.BUF_SIZE : int : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper : (764, 764)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish() : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish() : (236, 288) --> (237, 286)
[DEBUG] 
[DEBUG] === Inspecting commit: fa799e10 : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]) : (204, 258) --> (204, 251)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (521, 598)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (614, 627)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (964, 978)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (438, 519)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (266, 292)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (629, 785)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (362, 389)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (1007, 1018)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (305, 334)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (980, 982)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (336, 360)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (600, 612)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (391, 436)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (294, 303)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(DataInput,int) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (606, 618)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(DataInput) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (527, 604)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (397, 442)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (444, 525)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (272, 298)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(DataInput,int) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (620, 633)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(DataInput) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (970, 984)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(DataInput,long) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (1009, 1031)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (311, 340)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (635, 791)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (368, 395)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(DataInput) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (300, 309)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (342, 366)
[DEBUG] 
[DEBUG] === Inspecting commit: 6c35ec70 : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/zip.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6e659286 : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/limitations.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 3b58212f : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: d583769a : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 802a3d89 : [57511f5 COMPRESS-327 update documentation] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 59f12a8a : [57511f5 COMPRESS-327 update documentation] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: c4ff1854 : [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable() : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable() : (299, 310) --> (320, 331)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(OutputStream) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(OutputStream) : (265, 274) --> (268, 277)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean) : (1010, 1074) --> (1031, 1095)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean) : (636, 686) --> (657, 707)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean) : (508, 515) --> (529, 536)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode) : (772, 800) --> (793, 821)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode) : (802, 822) --> (823, 843)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry) : (1507, 1522) --> (1528, 1543)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy() : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy() : (1534, 1548) --> (1555, 1569)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode) : (570, 611) --> (591, 632)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry) : (1112, 1130) --> (1133, 1151)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(File) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(File) : (276, 297) --> (279, 305)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(int) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(int) : (1438, 1440) --> (1459, 1461)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(SeekableByteChannel) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream : (307, 318)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel : SeekableByteChannel : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream : (233, 236)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.raf : RandomAccessFile : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream : (230, 233)
[DEBUG] 
[DEBUG] === Inspecting commit: e37d1f1a : [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater) : org.apache.commons.compress.archivers.zip.StreamCompressor : (99, 109)
[DEBUG] Insert: CLASS: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor : org.apache.commons.compress.archivers.zip.StreamCompressor : (325, 339)
[DEBUG] 
[DEBUG] === Inspecting commit: f2249147 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: f439fce9 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: ba6053f6 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: eb3a6032 : [cd235a8 remove reference to RandomAccessFile] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 273b3867 : [d8fc27b COMPRESS-327 read zip archives from arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32() : (848, 860) --> (890, 903)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String,boolean) : org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String,boolean) : (196, 227) --> (204, 220)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]) : org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]) : (875, 913) --> (918, 960)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory() : (793, 820) --> (831, 859)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(byte[],int,int) : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(byte[],int,int) : (1037, 1065) --> (1088, 1125)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(long,long) : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(long,long) : (1017, 1020) --> (1059, 1067)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read() : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read() : (1022, 1035) --> (1069, 1086)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(int) : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream : (1127, 1132)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.MAX_BUF_LEN : int : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream : (1053, 1053)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream : (1054, 1054)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int) : org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int) : (915, 928) --> (962, 973)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>) : (560, 651) --> (597, 689)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader() : org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader() : (997, 1005) --> (1036, 1045)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64() : (822, 846) --> (861, 888)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : (526, 558) --> (561, 595)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : (945, 995) --> (990, 1034)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean) : org.apache.commons.compress.archivers.zip.ZipFile : (222, 239)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean,boolean) : org.apache.commons.compress.archivers.zip.ZipFile : (241, 262)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (152, 152)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.CFH_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (151, 151)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.archive : SeekableByteChannel : org.apache.commons.compress.archivers.zip.ZipFile : (129, 132)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.WORD_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (150, 150)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (149, 149)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.archive : RandomAccessFile : org.apache.commons.compress.archivers.zip.ZipFile : (125, 128)
[DEBUG] 
[DEBUG] === Inspecting commit: d6efe105 : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: ccafb31b : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/utils/IOUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/IOUtils.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer) : org.apache.commons.compress.utils.IOUtils : (172, 199)
[DEBUG] 
[DEBUG] === Inspecting commit: 9e588b39 : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer) : (1032, 1044) --> (1032, 1036)
[DEBUG] 
[DEBUG] === Inspecting commit: 411b0f5d : [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream : org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream : (25, 92)
[DEBUG] 
[DEBUG] === Inspecting commit: cf5222c3 : [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]) : (279, 308) --> (310, 339)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry) : org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry) : (855, 879) --> (886, 910)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File,byte[]) : (86, 113) --> (90, 102)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.close() : org.apache.commons.compress.archivers.sevenz.SevenZFile.close() : (125, 142) --> (150, 167)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long) : (229, 238) --> (259, 269)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]) : (178, 227) --> (203, 257)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[],boolean) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (119, 138)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (104, 117)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (1032, 1044)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZFile.channel : SeekableByteChannel : org.apache.commons.compress.archivers.sevenz.SevenZFile : (77, 77)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZFile.file : RandomAccessFile : org.apache.commons.compress.archivers.sevenz.SevenZFile : (73, 73)
[DEBUG] 
[DEBUG] === Inspecting commit: 49d23da3 : [87f0f2e COMPRESS-327 write 7z archives to arbirary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int) : (741, 746) --> (765, 771)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int) : (753, 759) --> (778, 785)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish() : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish() : (219, 263) --> (235, 287)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close() : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close() : (104, 115) --> (120, 131)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(File) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(File) : (59, 68) --> (63, 73)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(SeekableByteChannel) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile : (75, 84)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel : SeekableByteChannel : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile : (50, 50)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.file : RandomAccessFile : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile : (46, 46)
[DEBUG] 
[DEBUG] === Inspecting commit: 6bd51f85 : [9e32a2c record fix for COMPRESS-364] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 17d29185 : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/test/resources/archive_with_bytes_after_data.zip ===
[DEBUG] 
[DEBUG] === Inspecting commit: 768ab7f8 : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 43ba0eb3 : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry() : (592, 646) --> (592, 651)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (653, 663)
[DEBUG] 
[DEBUG] === Inspecting commit: 6b4e1fac : [f010260 COMPRESS-366 clarify TarArchiveEntry javadocs] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: b3e22739 : [f010260 COMPRESS-366 clarify TarArchiveEntry javadocs] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: b0aff96c : [7ee18aa Use try with resources.] src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 270ecd45 : [e71827b Use try with resources.] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6173d9a1 : [159d9c6 Avoid unclosed stream warnings] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: a5a9a75a : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5609f836 : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/main/java/org/apache/commons/compress/utils/BitInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/BitInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.BitInputStream.readBits(int) : org.apache.commons.compress.utils.BitInputStream.readBits(int) : (71, 108) --> (71, 136)
[DEBUG] 
[DEBUG] === Inspecting commit: 458cd423 : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: e349a34d : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6875b9e8 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: e566a570 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 15682c44 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: fb79d93b : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/ZTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: ec5be007 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/XZTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: de5aa3f7 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6497900b : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 400bded1 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 99269e66 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 8245b33d : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: e5799b91 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: a8beadf4 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7853e5bc : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: b27297ca : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/Lister.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 117349cc : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 4c7f71d9 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 76738413 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 8ff8e6ef : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 8756ba73 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 77c143a1 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: ac063011 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: bd748348 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: af64af2d : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/AbstractTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1f25252f : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : (258, 295) --> (258, 293)
[DEBUG] 
[DEBUG] === Inspecting commit: 9c4ca2ec : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField) : org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField) : (122, 194) --> (122, 192)
[DEBUG] 
[DEBUG] === Inspecting commit: 1067bf9f : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]) : (279, 311) --> (279, 308)
[DEBUG] 
[DEBUG] === Inspecting commit: e445b7d0 : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry() : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry() : (223, 270) --> (223, 274)
[DEBUG] 
[DEBUG] === Inspecting commit: 8366ff3a : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 99b4b1b4 : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: d9465f97 : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: fa7d33b6 : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: c374440e : [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : (258, 295) --> (258, 295)
[DEBUG] 
[DEBUG] === Inspecting commit: 5f214c5d : [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock() : org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock() : (180, 220) --> (180, 220)
[DEBUG] 
[DEBUG] === Inspecting commit: 483e6a2d : [4865194 Add final modifier to method parameters.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : (258, 295) --> (258, 295)
[DEBUG] 
[DEBUG] === Inspecting commit: dc76e10e : [4865194 Add final modifier to method parameters.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyDialect.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyDialect.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 13063b23 : [7f110cf Javadoc.] src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: cfa1174c : [0714e10 Statement unnecessarily nested within else clause.] src/main/java/org/apache/commons/compress/archivers/Lister.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/Lister.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream) : org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream) : (57, 64) --> (57, 63)
[DEBUG] 
[DEBUG] === Inspecting commit: 7df06233 : [dee8220 Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: cc36c17d : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: d463b096 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 494c277b : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1f54690b : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: daafc75d : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 400efc58 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7d332c64 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 755dc0e6 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: bba3adfa : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: fd397c37 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 003fb67d : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/LongPathTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: b8b9e011 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 23fa6868 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 713d20ec : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/ArchiveReadTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: bf341fa4 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/AbstractTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 14eb9d99 : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>) : org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>) : (168, 192) --> (168, 191)
[DEBUG] 
[DEBUG] === Inspecting commit: dfe869b3 : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest) : org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest) : (88, 103) --> (88, 100)
[DEBUG] 
[DEBUG] === Inspecting commit: f212854f : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream() : org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream() : (901, 919) --> (895, 913)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long) : (229, 244) --> (229, 238)
[DEBUG] 
[DEBUG] === Inspecting commit: 4d6bf1c3 : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream) : org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream) : (105, 120) --> (105, 121)
[DEBUG] 
[DEBUG] === Inspecting commit: 70945cd0 : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.CLI.main(String[]) : org.apache.commons.compress.archivers.sevenz.CLI.main(String[]) : (119, 139) --> (116, 133)
[DEBUG] 
[DEBUG] === Inspecting commit: 1451849e : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/Lister.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/Lister.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.Lister.main(String[]) : org.apache.commons.compress.archivers.Lister.main(String[]) : (37, 61) --> (37, 55)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream) : org.apache.commons.compress.archivers.Lister : (57, 64)
[DEBUG] 
[DEBUG] === Inspecting commit: bc856b49 : [f52ecf8 Format nits.] src/main/java/org/apache/commons/compress/archivers/Lister.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/Lister.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: e5ee236c : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 5a2aa26b : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>) : org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>) : (109, 161) --> (109, 161)
[DEBUG] 
[DEBUG] === Inspecting commit: 7c94ecc8 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 60ccf15b : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 44728bae : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: b43815d5 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.compressors.FileNameUtil.compressSuffix : Map<String, String> : org.apache.commons.compress.compressors.FileNameUtil.compressSuffix : Map<String, String> : (33, 38) --> (33, 38)
[DEBUG] 
[DEBUG] === Inspecting commit: db849423 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.changes.ChangeSetResults.deleted : List<String> : org.apache.commons.compress.changes.ChangeSetResults.deleted : List<String> : (30, 30) --> (29, 30)
[DEBUG] Update: FIELD: org.apache.commons.compress.changes.ChangeSetResults.addedFromStream : List<String> : org.apache.commons.compress.changes.ChangeSetResults.addedFromStream : List<String> : (29, 29) --> (28, 29)
[DEBUG] Update: FIELD: org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet : List<String> : org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet : List<String> : (28, 28) --> (28, 28)
[DEBUG] 
[DEBUG] === Inspecting commit: 7b9cfd8d : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream) : org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream) : (96, 176) --> (96, 176)
[DEBUG] 
[DEBUG] === Inspecting commit: 6b697d93 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSet.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/changes/ChangeSet.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.changes.ChangeSet.changes : Set<Change> : org.apache.commons.compress.changes.ChangeSet.changes : Set<Change> : (37, 37) --> (37, 37)
[DEBUG] Update: METHOD: org.apache.commons.compress.changes.ChangeSet.getChanges() : org.apache.commons.compress.changes.ChangeSet.getChanges() : (158, 165) --> (158, 165)
[DEBUG] 
[DEBUG] === Inspecting commit: 4ef44ef0 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 233fb2a5 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.entries : List<ZipArchiveEntry> : org.apache.commons.compress.archivers.zip.ZipFile.entries : List<ZipArchiveEntry> : (88, 93) --> (88, 93)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.nameMap : Map<String, LinkedList<ZipArchiveEntry>> : org.apache.commons.compress.archivers.zip.ZipFile.nameMap : Map<String, LinkedList<ZipArchiveEntry>> : (95, 99) --> (93, 99)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : (526, 558) --> (526, 558)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : (945, 995) --> (945, 995)
[DEBUG] 
[DEBUG] === Inspecting commit: a9353fa8 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 3c566e68 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets : Map<ZipArchiveEntry, Long> : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets : Map<ZipArchiveEntry, Long> : (200, 204) --> (198, 204)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries : List<ZipArchiveEntry> : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries : List<ZipArchiveEntry> : (170, 174) --> (170, 174)
[DEBUG] 
[DEBUG] === Inspecting commit: 42c158db : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort) : org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort) : (463, 483) --> (463, 483)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]) : org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]) : (319, 334) --> (319, 334)
[DEBUG] 
[DEBUG] === Inspecting commit: 148724aa : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(char[]) : org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(char[]) : (101, 118) --> (101, 118)
[DEBUG] 
[DEBUG] === Inspecting commit: 96f207cd : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items : Queue<CompressedEntry> : org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items : Queue<CompressedEntry> : (49, 49) --> (49, 49)
[DEBUG] 
[DEBUG] === Inspecting commit: 5989c516 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures : List<Future<Object>> : org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures : List<Future<Object>> : (58, 58) --> (58, 58)
[DEBUG] 
[DEBUG] === Inspecting commit: 9c7c867d : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: b97c6a2e : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField) : org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField) : (122, 194) --> (122, 194)
[DEBUG] 
[DEBUG] === Inspecting commit: 75b8dcfd : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry) : org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry) : (259, 322) --> (259, 322)
[DEBUG] 
[DEBUG] === Inspecting commit: c5c3c919 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders : Map<String, String> : org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders : Map<String, String> : (82, 82) --> (82, 82)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream) : org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream) : (452, 504) --> (452, 504)
[DEBUG] 
[DEBUG] === Inspecting commit: 1f03a5da : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files : List<SevenZArchiveEntry> : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files : List<SevenZArchiveEntry> : (47, 47) --> (47, 47)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream() : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream() : (277, 317) --> (277, 317)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes : Map<SevenZArchiveEntry, long[]> : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes : Map<SevenZArchiveEntry, long[]> : (57, 57) --> (56, 57)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable<T>) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable<T>) : (732, 738) --> (732, 738)
[DEBUG] 
[DEBUG] === Inspecting commit: 05625f09 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry) : org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry) : (864, 888) --> (864, 888)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams : ArrayList<InputStream> : org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams : ArrayList<InputStream> : (80, 80) --> (80, 80)
[DEBUG] 
[DEBUG] === Inspecting commit: 386763c5 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable<? extends SevenZMethodConfiguration>) : org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable<? extends SevenZMethodConfiguration>) : (442, 466) --> (442, 466)
[DEBUG] 
[DEBUG] === Inspecting commit: 30323a8b : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders() : org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders() : (48, 63) --> (48, 63)
[DEBUG] 
[DEBUG] === Inspecting commit: 04ac5dea : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending : Map<Integer, DumpArchiveEntry> : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending : Map<Integer, DumpArchiveEntry> : (69, 69) --> (68, 69)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String) : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String) : (93, 150) --> (93, 150)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry) : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry) : (409, 451) --> (409, 451)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names : Map<Integer, Dirent> : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names : Map<Integer, Dirent> : (66, 66) --> (66, 66)
[DEBUG] 
[DEBUG] === Inspecting commit: 2cc357dd : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 95771966 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names : HashMap<String, CpioArchiveEntry> : org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names : HashMap<String, CpioArchiveEntry> : (79, 80) --> (79, 80)
[DEBUG] 
[DEBUG] === Inspecting commit: a268ece5 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader() : org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader() : (214, 267) --> (214, 267)
[DEBUG] 
[DEBUG] === Inspecting commit: f49016b4 : [f5a9851 [COMPRESS-360] Update Java requirement from 6 to 7.] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: b0c369de : [f8e0994 [COMPRESS-360] Update Java requirement from 6 to 7.] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: efa2e7a3 : [f8e0994 [COMPRESS-360] Update Java requirement from 6 to 7.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 91d605fe : [6c8345b Tests for [COMPRESS-359] Pack200 is broken.] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2bfb50bb : [9e6f0b3 commons-parent 39 -> 40.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 87a3a21e : [9a677fb Bump to next development version] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 55c94545 : [9a677fb Bump to next development version] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5e80e371 : [9a677fb Bump to next development version] RELEASE-NOTES.txt ===
[DEBUG] 

[OUTPUT] Analysing Hunk Dependency ... 
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java
[DEBUG] Done: [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
[DEBUG] Done: [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [8de4b8a line-ends] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [6c52318 Don't need local var.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [c3d2cec [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [d8fc27b COMPRESS-327 read zip archives from arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [cd235a8 remove reference to RandomAccessFile] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [1e0957d typo] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
[DEBUG] Done: [5c9661c param name 'input' should not hide field.] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
[DEBUG] Done: [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.java
[DEBUG] Done: [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
[DEBUG] Done: [87f0f2e COMPRESS-327 write 7z archives to arbirary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
[DEBUG] Done: [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
[DEBUG] Done: [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
[DEBUG] Done: [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
[DEBUG] Done: [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
[DEBUG] Done: [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
[DEBUG] Done: [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/main/java/org/apache/commons/compress/utils/BitInputStream.java
[DEBUG] Done: [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
[DEBUG] Done: [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
[DEBUG] Done: [263513a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
[DEBUG] Done: [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java
[DEBUG] Done: [4865194 Add final modifier to method parameters.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java
[DEBUG] Done: [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
[DEBUG] Done: [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Lists.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
[DEBUG] Done: [03239b0 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
[DEBUG] Done: [7145b4a Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
[DEBUG] Done: [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
[DEBUG] Done: [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java
[DEBUG] Done: [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Sets.java
[DEBUG] Done: [9f468f1 [COMPRESS-362] Bullet-proof code using try-with-resources statements] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
[DEBUG] Done: [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java
[DEBUG] Done: [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Iterators.java
[DEBUG] Done: [a2976b6 modify SeekableInMemoryByteChannel based on feedback by Maciej and Bernd Eckenfels] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
[DEBUG] Done: [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java
[DEBUG] Done: [658812c ZipArchiveInputStream.closeEntry fails to advance] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
[DEBUG] Done: [f1a5821 Better local variable name.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
[DEBUG] Done: [a428e42 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
[DEBUG] Done: [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
[DEBUG] Done: [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
[DEBUG] Done: [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
[DEBUG] Done: [dd9f895 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java
[DEBUG] Done: [f538f38 avoid overflow when resizing] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java
[DEBUG] Done: [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
[DEBUG] Done: [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/ServiceLoaderIterator.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java
[DEBUG] Done: [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java
[DEBUG] Done: [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java
[DEBUG] Done: [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
[DEBUG] Done: [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSet.java
[DEBUG] Done: [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java
[DEBUG] Done: [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
[DEBUG] Done: [72b1789 COMPRESS-327 tests and tweaks for SeekableInMemoryByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java
[DEBUG] Done: [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
[DEBUG] Done: [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
[DEBUG] Done: [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java
[DEBUG] Done: [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java
[DEBUG] Done: [b9153ca [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java
[DEBUG] Done: [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
[DEBUG] Done: [46f57bf properly return -1 from read on EOF] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
[DEBUG] Done: [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
[DEBUG] Done: [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java
[DEBUG] Done: [4d55183 In-line local variable.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
[DEBUG] Done: [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java
[DEBUG] Done: [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
[DEBUG] Done: [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
[DEBUG] Done: [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/utils/IOUtils.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java
[DEBUG] Done: [85184c3 COMPRESS-377 properly close StreamCompressor] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
[DEBUG] Done: [3fc9325 Unnecessary cast from int to int.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
[DEBUG] Hunk depends on: 46375d0b : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java : added back.
[DEBUG] Hunk depends on: fc6b61a4 : [8de4b8a line-ends] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java : added back.
[DEBUG] Hunk depends on: 20b89940 : [263513a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java : added back.
[DEBUG] Hunk depends on: bb6b30ca : [1e0957d typo] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java : added back.
[DEBUG] Hunk depends on: f2249147 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java : added back.
[DEBUG] Hunk depends on: eb3a6032 : [cd235a8 remove reference to RandomAccessFile] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java : added back.
[DEBUG] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java : f9474b52896b9ee44b672e0c1f87df2101427bc1
[DEBUG] src/main/java/org/apache/commons/compress/archivers/Lister.java : 1451849ea1a28046415d80c7c9ae8de489b1c9e1

[DEBUG] Original |H| 365
[DEBUG] Tracker:
[
5e80e371bd8c17d7680bba6a4b01c62aa3ad1ed8 : []
55c945454a7af46f18aae2651f11ebd358e11cc5 : []
87a3a21ed1ebc04ce6ed74a1078dde39e7d9540d : []
2bfb50bb9041f560128e6ea4b3ee4d33e83225de : []
91d605fe1eb3643bc41d659ba146f0d272f275eb : []
efa2e7a32d0a7d696975d073eb0aceb4411b08b5 : []
b0c369de850c4a7be293967e18a61371595f3017 : []
f49016b4ba9d17b50336e59c819813e7342669dd : []
a268ece5f8376658141bdb2d0cb2e825dbf50dc7 : [[org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader():UPD,TEST]]
95771966324bc2e0ea0df7e5aee429ae1339d76b : [[org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names : HashMap<String, CpioArchiveEntry>:UPD,TEST]]
2cc357dde7c6ae6942477756065b41e857a5f85c : []
04ac5deaee08ca71150399d22741baa9dc6bb0ff : [[org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending : Map<Integer, DumpArchiveEntry>:UPD,TEST], [org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names : Map<Integer, Dirent>:UPD,TEST], [org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String):UPD,TEST]]
30323a8bf7a92e1b897e8955ea061c1a7eddcf64 : [[org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders():UPD,TEST]]
386763c54573580a9159297d94e31b2fec707e2a : [[org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable<? extends SevenZMethodConfiguration>):UPD,TEST]]
05625f098d78fc411b6f15320b3ed117a61cde77 : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams : ArrayList<InputStream>:UPD,TEST]]
1f03a5dacdbb7239d684a5822b00fd9ef9c7d4d6 : [[org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files : List<SevenZArchiveEntry>:UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes : Map<SevenZArchiveEntry, long[]>:UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable<T>):UPD,TEST]]
c5c3c91943f4272200c27514b7caf4cb35bb0f60 : [[org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders : Map<String, String>:UPD,TEST], [org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream):UPD,TEST]]
75b8dcfda6150e72f0f9087c5096233db9c215a6 : [[org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry):UPD,TEST]]
b97c6a2e1d2ece147cc0e3ab65cefc6d8c53e1a2 : [[org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField):UPD,TEST]]
9c7c867d483af641bd698e5a506a478e16db4102 : []
5989c516ffa993da5905df57876514bb7566d91c : [[org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures : List<Future<Object>>:UPD,TEST]]
96f207cd86a2eaa686725fc8d2dc91bef1aa8faf : [[org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items : Queue<CompressedEntry>:UPD,TEST]]
148724aaee093cf0952051430f45b2df21c9b2e1 : [[org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(char[]):UPD,TEST]]
42c158db19987a3db66ebea943b93e931e6915fa : [[org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort):UPD,TEST]]
3c566e68af8d7c9aed9e1124a2ff70d9b173be71 : [[org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets : Map<ZipArchiveEntry, Long>:UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries : List<ZipArchiveEntry>:UPD,TEST]]
a9353fa8a03f0058ef820991ee57352e4eda8a64 : []
233fb2a5fe9065d06d2f31dc99665fb22eb30c6a : [[org.apache.commons.compress.archivers.zip.ZipFile.nameMap : Map<String, LinkedList<ZipArchiveEntry>>:UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.entries : List<ZipArchiveEntry>:UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST]]
4ef44ef0fa20007afc6a84672911cc82452eed69 : []
6b697d93d34032a99f3efe8594cce2abdf1a8ca8 : [[org.apache.commons.compress.changes.ChangeSet.changes : Set<Change>:UPD,TEST], [org.apache.commons.compress.changes.ChangeSet.getChanges():UPD,TEST]]
7b9cfd8d0b8b046016e7852d4af13f4a9a949b24 : [[org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream):UPD,TEST]]
db84942302b0758f96b760774c055927ef3be962 : [[org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet : List<String>:UPD,TEST], [org.apache.commons.compress.changes.ChangeSetResults.deleted : List<String>:UPD,TEST], [org.apache.commons.compress.changes.ChangeSetResults.addedFromStream : List<String>:UPD,TEST]]
b43815d51bc3bcc287eca8a916d2302280cc56d8 : [[org.apache.commons.compress.compressors.FileNameUtil.compressSuffix : Map<String, String>:UPD,TEST]]
44728bae26003d8deff12d4b647f0f6fdd908676 : []
60ccf15b8e0f23326e52ab3afe17fe72b49b5b2d : []
7c94ecc8b01cb8f3056716ff21786e3bfc43f459 : []
5a2aa26bb5b64ef27d6569faa5bc5b39809c572c : [[org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>):UPD,TEST]]
e5ee236ccb447070dc31765f0e21d23e6baa76e9 : []
bc856b49af0e5ea1add862268d6be0578cd8aa08 : []
1451849ea1a28046415d80c7c9ae8de489b1c9e1 : [[org.apache.commons.compress.archivers.Lister.main(String[]):UPD,DROP], [org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream):INS,DROP]]
70945cd04f8c611b5ceb84627ddb1ea5fa29dc75 : [[org.apache.commons.compress.archivers.sevenz.CLI.main(String[]):UPD,DROP]]
4d6bf1c3f1e23a0c426d23ae9510167314b6461f : [[org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream):UPD,TEST]]
f212854f7d60130e6e54c73ce7ace11b7300b84d : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long):UPD,TEST]]
dfe869b34375c0d3708f6b467900ef2dee5e9e67 : [[org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest):UPD,TEST]]
14eb9d99d75211297177885c7824392006af46de : [[org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>):UPD,TEST]]
bf341fa474222af51de96f949f22f6cc0b3699b0 : []
713d20ec2f0dc741b1111162198a9efed62abdde : []
23fa6868a481b84a67b1d6a4e10f86b0b50d1d9a : []
b8b9e011c59284f967156047d80b2b338c40509e : []
003fb67d0161a5987d51e9de56056d227dde8b70 : []
fd397c378b7801a459b9f4cdbf12fdaa07701929 : []
bba3adfae41ac27cbdde62fe85e1a5575dab4ef1 : []
755dc0e69c2083f8e003485c59aa045fa5b5ae82 : []
7d332c6408591d9ab6713b5f18cd62d886eac22e : []
400efc5828338dd48d4b1e46e012feab5782f707 : []
daafc75d06a2b81ea4eb31000c3d560309ef4e39 : []
1f54690b087a7d1a73cc83deb89c87a77e82bfd3 : []
494c277b445ad7afcef7bdb3c237491161a4e424 : []
d463b09613e37267ffc03fb632c1488ca24292b9 : []
cc36c17d55b702bcf634ad141c43d242ca313de3 : []
7df06233e7d45f0198bbbc0c2f094469dadac037 : []
cfa1174c9a925f776984bb9f78508db04eed25bc : [[org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream):UPD,DROP]]
13063b2334fcf9457ae88822e40f3197029ffc5d : []
dc76e10ee17e858215cd39ad4c240e1a122483e1 : []
483e6a2d1e067b7e9ae097ab515a3df87833ab6f : [[org.apache.commons.compress.utils.ArchiveUtils.sanitize(String):UPD,TEST]]
5f214c5d672f8a83be164892572d663cbbd7969c : [[org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock():UPD,TEST]]
c374440e03c7075042e1067377c257bb232d7a59 : [[org.apache.commons.compress.utils.ArchiveUtils.sanitize(String):UPD,TEST]]
fa7d33b675ccd0b91e95bc46c947303c613bee56 : []
d9465f97720260a8f6377524152651a51436270b : []
99b4b1b4abf492bd8c4c64722b159beacdf68581 : []
8366ff3ae184ef164eabf74916d70eecc52d4e46 : []
e445b7d0dcf57c7d9235ceb441bb49dcd2319eec : [[org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry():UPD,TEST]]
1067bf9fe71463c7a39c2b78d6ff0e18108f2633 : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]):UPD,TEST]]
9c4ca2ec9b39d45a76e3dd66cef8d15aa8b5c909 : [[org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField):UPD,TEST]]
1f25252f41d3b49d69b061edbc104445a666f25c : [[org.apache.commons.compress.utils.ArchiveUtils.sanitize(String):UPD,TEST]]
af64af2d21d4f3b03dcd503d7e826a9b9aa43680 : []
bd74834837b75bc8f5db4b64c1207870914a7508 : []
ac0630112bf554ffce16192e6e87d27e3609ad25 : []
77c143a1a6ebb02009b5b4bf0a58be89630e4ff0 : []
8756ba731ba1267662580cb6e1339b12092c7e88 : []
8ff8e6ef944d9cb6256d1ec21996d7dc1307ea14 : []
767384133e7ef8c782820f8bc31ae540382eeefc : []
4c7f71d9a4f8fc73af039335fedb176278cdc844 : []
117349cc3122324d18846971b6d4ab0278d67d91 : []
b27297ca8a1177ae9319d2e496daf35dee7becaa : []
7853e5bc9f0a2343a2c935f8400b161ab418d46c : []
a8beadf42a2d5e538dc9dfa7ee7211d3f9e2bd2c : []
e5799b91ba8b649518bfe5422a4994a3862a86af : []
8245b33d67a7d89283c347ecf62e5efd8a2e4752 : []
99269e661e6998038d4b0d15e992317454b29c47 : []
400bded12f1a4206c615436631e2026d46ca569e : []
6497900b97de54174d4afd7df62b8b8d00535b48 : []
de5aa3f7770dbadf3f1c0503d9c848074eb763a3 : []
ec5be0070f5127512008eb832a49fa2a4f194869 : []
fb79d93b420c8af5a7df7444fe9f7a1f64c01206 : []
15682c444bcfd991c678325a4923520621df2f5d : []
e566a5705b33f0c37187b586bba1b9ad1bd0e1da : []
6875b9e8ead5907c551d173890b58ed71af0e661 : []
e349a34dfc75666e281fe690832cea2a0734d70c : []
458cd4234eff466f926e69e95568dc3159ebb324 : []
5609f836e1bd48e346e7a6e4ad5305b0936dd904 : [[org.apache.commons.compress.utils.BitInputStream.readBits(int):UPD,TEST]]
a5a9a75abcb533502f9ca282ea46b03d1b325cc1 : []
6173d9a1fb5addcd3eb70ddd8207f7e5d8f13ebd : []
270ecd4503b6d1585cda6a94c0fb4b62232d5ab4 : []
b0aff96c2a09eda6f9aedfa8f8d3d4cec01fe274 : []
b3e22739ccd68cf9ca5131f15ca15e70be0e8127 : []
6b4e1faca03b258da5dd03b58f760624bb61c990 : []
43ba0eb3baa78b8b63e14c71f218a0ba9215156b : [[org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes():INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry():UPD,TEST]]
768ab7f870dad819a87150db7f106692a9f53b40 : []
17d29185fef11424f6297326103ed51c93243013 : []
6bd51f85fa763de3d036566851b3cf3f04b017f6 : []
49d23da30da2f19d4247cdbdf71a58a5ff64d303 : [[org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(File):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(SeekableByteChannel):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel : SeekableByteChannel:INS,COMP], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.file : RandomAccessFile:DEL,DROP]]
cf5222c3187d3af746299074ee7749faeff8188e : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.close():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[],boolean):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[]):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File,byte[]):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.channel : SeekableByteChannel:INS,COMP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.file : RandomAccessFile:DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]):UPD,TEST]]
411b0f5d5b903c79edca0d76d98045c1491555d7 : [[org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream:INS,TEST]]
9e588b39eccaa41755eddd31a6fa02b6ac52f62d : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer):UPD,TEST]]
ccafb31b09bd59050fd813368f4e12d30f0f6c53 : [[org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer):INS,TEST]]
d6efe105e28b8ccb9d656c0be4dbe4916a68e76d : []
273b3867a9e6c2a002632472d902f4d9949d1bd9 : [[org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(byte[],int,int):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(int):INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BBUF : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BBUF : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(long,long):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String,boolean):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer : ByteBuffer:INS,COMP], [org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader():UPD,COMP], [org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean,boolean):INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.WORD_BBUF : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean):INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.MAX_BUF_LEN : int:INS,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.archive : RandomAccessFile:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.archive : SeekableByteChannel:INS,COMP], [org.apache.commons.compress.archivers.zip.ZipFile.CFH_BBUF : ByteBuffer:INS,TEST]]
eb3a60322e93ce684572c778f50151d8121f798c : []
ba6053f6a5919b87165a950ee97f9de06f64af5f : []
f439fce951173e0281d7c5f9cba50a0c928a7772 : []
f2249147ff7a66d10ee7ad1a2b7ed6311ef480a3 : []
e37d1f1a34c1203ef93551db05ff81b98dd95a7f : [[org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater):INS,TEST], [org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor:INS,TEST]]
c4ff1854b2639ed69828f63a2cf712330e33e40a : [[org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable():UPD,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(OutputStream):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(int):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.raf : RandomAccessFile:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel : SeekableByteChannel:INS,COMP], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(SeekableByteChannel):INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(File):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode):UPD,TEST]]
59f12a8a41c6d73d42c21ef7090d3093469be05d : []
802a3d89dad1dae84b3173b506324f07f3c0bb07 : []
d583769a8cd3a080e48f52aea001732e82cd7efd : []
3b58212f9bbdbed4de4d788bac407bda1a61588e : []
6e6592861d1b6fd5c182051ac7f832902468dbdf : []
6c35ec700d0e8d2d0ee503091c8620411a727d25 : []
fa799e10f905945cea30bb4c2d6a1a1e27bd3af3 : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(DataInput):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(DataInput,long):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[]):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(DataInput):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer):INS,COMP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(DataInput):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(DataInput,int):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(DataInput,int):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive):INS,TEST]]
08febea4e18be89e1a2cb6641b7f25b98fb358a7 : [[org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.BUF_SIZE : int:INS,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int):UPD,TEST]]
9767e3a9b12cd3c746a595d5d0d82fa0bcf33066 : [[org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST]]
34c229a376936d1b5a2a427babca9385aaf8c1c9 : []
cf4d48ec2da1938ebf7081cf382815cc123ce5c7 : []
1d4f728dcf18fc31d208e1e8b20cdf5d52a67fed : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel:INS,TEST]]
ceeeb794f2dedf3f2bd0aec3bc1b0c40b0dec07e : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[]:UPD,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int:INS,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : long:DEL,DROP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array():INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : long:DEL,DROP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int):INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int:INS,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel():INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer):UPD,TEST]]
9fbc12dd45bc1ead0175ae625f722acb83a3f5cb : []
f406ae1cb012b3f9ab2696906d123b9bf906ce99 : []
bb6b30ca55e054f66c85c24b53e9cad06fa12c41 : []
25332b60f04fc9e685ec4eba53d4ca125bfcd858 : []
54d75fd6ac2bd717c5d290327f1080803418ca41 : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : boolean:DEL,DROP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int:UPD,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[]:UPD,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int:UPD,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close():UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : AtomicBoolean:INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen():UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer):UPD,TEST]]
ae310114b7f99cf16778e3e3bc047dd0ac6886f8 : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary():INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen():INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long):UPD,TEST]]
fb2518c26f5f6022798af24248b8bfd7a921aad8 : []
5bcd5b9a79632fffea939ebc497054aab6012cb3 : []
b41f22b438de5f4b8c2f511b5119685e29f5131a : []
a88124c627a8ae4d5d01ab92521535bfc330b06f : []
9df7919deed69eb6edb20374b653fff94cf5b76b : []
7832d5ed7eb8a25adbb0ddd57767eded4f274636 : [[org.apache.commons.compress.archivers.sevenz.BoundedRandomAccessFileInputStream:DEL,DROP]]
2852148abe18aa6f7279dc808328e4aaed343367 : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,byte[]):INS,TEST]]
cd73ab44c4fdbf9cba2f1f85cce59d9d669fa71e : []
9bec5ca66c022bb01f705bd76415f65d4fdec8c1 : []
c87838afa9667ad0d2fdb7fdb3e0eb9edf2fabf0 : [[org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String):INS,TEST]]
f4e6382ea3c9296234e76d93016b80d4a5907d83 : []
08da4833c200ad1a6b888b7efdc0b2fd969e13a7 : []
8aec9d00d49840f6d4d08568e7af799c9a1c4c55 : []
1d5e93baeada86e6542c65c1a1f5662c3baae24a : []
08381e0f36b38d9d3a770ad428eea6fee2a4ee43 : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel):INS,TEST]]
f1e5900c8eb17e5f8d4663345e07df9bf9044f83 : [[org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel):INS,TEST]]
3e54cc761435e63afb80b08bf07d466b2166fde3 : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(int):INS,TEST]]
37ebcccf1e7b5c676fd676f9dd7e4b07bbe83f6f : []
128a6ceb4d1d8c01a459d969b92b397bd513a83c : []
8ca2005786317bf271d16153fa8d927a37a0f7c1 : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer):UPD,TEST]]
d569373858cd00c2ca0694c51d51b1283cb3f185 : []
54a42ad45858d711b52d5ff58a3e08cb52bbad5a : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.NAIVE_RESIZE_LIMIT : int:INS,DROP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer):UPD,TEST]]
5636d6ed635407df10c2a19ca914aec0c12cd40b : []
12eeebef507f98c89c97947cfe78be6debbd5bc4 : [[org.apache.commons.compress.compressors.CompressorStreamFactory.getZ():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream):UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.compressorOutputStreamProviders : SortedMap<String, CompressorStreamProvider>:INS,COMP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyRaw():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressUntilEOF():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getXz():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyFramed():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getGzip():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getLzma():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream):UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON : CompressorStreamFactory:INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getBzip2():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getPack200():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>):INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String):INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.compressorInputStreamProviders : SortedMap<String, CompressorStreamProvider>:INS,COMP]]
c527c9068d786cc35572c4134a41b9c84becd943 : []
5bd260c73c73fbd30067c6140bd913b4d4d14ca2 : [[org.apache.commons.compress.compressors.CompressorStreamProvider:INS,COMP]]
2e1ad7ff87d4a50f24aca2e053e2c22e23900507 : [[org.apache.commons.compress.utils.Iterators:INS,TEST]]
86487f495e7023f1f321fcf79ebdeabd3fca9836 : [[org.apache.commons.compress.utils.Lists:INS,TEST]]
19c9e5aeb8ee2a18f7b793391ce8a472482da654 : [[org.apache.commons.compress.utils.ServiceLoaderIterator:INS,TEST]]
b8e95a679023e5105da933e7d86bde37847fb0b5 : []
306ada02ac2f52df49f2e1c3647f660a0f7fe7d0 : []
7c920710f5044b941f651f1e8f87c5d0d82e4764 : []
fb69dd535fff7191e07cc9c2fb0eff6c276a7d49 : [[org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames():UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames():UPD,TEST]]
872a5a3c59591f7c3d5f8473dafb43cc082ad734 : [[org.apache.commons.compress.utils.Sets:INS,TEST]]
4194acc936aea43c37f0528bf394a2250a9d4bf4 : []
20b89940ff1b63a5a849e7ca18dcf828e98cad91 : []
761fe199feb2f9bf8e6b3fe2842c5f9cbd9ee1bb : []
3310678d8259c37b1d8961120f28a15d31c4a662 : []
16f9dca17e046d4929930182af687f13211e3bea : []
7efd6342d65df5214e307c63105720b6f72e368e : []
afd821bc4e6e11b48d3d528d9d62ab4b0d30d861 : [[org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream):UPD,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding : String:UPD,COMP], [org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String):INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveOutputStreamProviders : SortedMap<String, ArchiveStreamProvider>:INS,COMP], [org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String):INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveInputStreamProviders : SortedMap<String, ArchiveStreamProvider>:INS,COMP], [org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set<String>,ArchiveStreamProvider,TreeMap<String, ArchiveStreamProvider>):INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON : ArchiveStreamFactory:INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String):INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream):UPD,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders():INS,TEST]]
5e63a2251675da0edb6510168ffe633e4f7377f8 : [[org.apache.commons.compress.archivers.ArchiveStreamProvider:INS,COMP]]
a69e214aa84c4b659b31defcc7b644e9c4eef893 : []
8b4b0a1b8a266b21857efbb892434c3f768cb3c4 : []
abd8cf55f7d8eaf6c229e6937bda5e94562517ef : []
f7ebee2e99d5bf39bd0f5ef2e3ba210197ce50e7 : []
8ac721a06740d07e2516efd976195119bec8e9d4 : [[org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean):INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders():UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders():UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>):UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream):UPD,TEST]]
e466cba238160ab37183c029c6952fecc56b45ad : [[org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean):INS,COMP], [org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream):DEL,DROP]]
f16fc82519c0fd2989d7ea79e7c651d0647a191b : []
371380892ec202600456a7762cf918a143dc3ed2 : []
74870e91263ccb38245890e518974ca536982306 : []
b1bcb07700a7e4037900bd16ea8e906bab23a883 : []
054f5ae413690e8e45765cd6f747305cfdee36ff : []
63512bf6561ac587a4e0fc071377c029c866e944 : []
049ff547351f14b03fccf8a7e90273f0147843a7 : []
d313d417390fd369e51ddd34abc288b1692bface : []
6cc0714147248ee4421b3ac7d7cc3e3b135a43ce : []
6214dc77629baf38a482f3743a64a9b6cd5d139b : []
7d7897075981216d51f5207dd60c902f65fc070e : []
0a94f921740ecb744b5aa26107c4ca2fdcf5b8c0 : []
1c62128a9cf614f79edc332ce91bc4947c53fc52 : []
8640e5b7ff70204fcee68050cb2ea48bd938f39c : []
fb569846a80ae8926f475727ba0e9b0746f1e3be : [[org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames():UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream):UPD,TEST]]
b919cf532d8f20553d8989846c261a673fc2b0a8 : []
c33ff53bcbf9daac8ea1dfd6c954fa04e5479de8 : []
e16b3e98ca0d0484ede57cb0b857f7d3cc8641ee : []
5c1e0a8a55d4025c2903c671efdc3e31a69baac2 : []
fbb851f410fd1139472360abc5e6325d1c205bc7 : [[org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream:INS,TEST]]
822ab02a76774afda1ae7f69fe70e6ab93cbb26f : []
a73ecd8fd7202a56b0a4ca661d6a1b2b0a2baf9d : []
5e517f4a2e217ea51a814ae3a37d1c15a567af4e : [[org.apache.commons.compress.archivers.sevenz.Coders.LZMADecoder:DEL,DROP]]
4ef19ace10081c8a88de3b30d1ecb766e2380a7e : []
31351506d328d1eaa3ae95a8188d575bd247b282 : []
b2fdc0e34fc7fdd1e5519b8fca7947bfa09711b8 : []
4970f3b47f13bcb0054b05a5e7cbaf209065a0c1 : []
60479f34f0d4bb12d169da1e69f8dcef4808382e : []
c37bf3a7573318233eeb9e95c61b36136403942b : []
d5f325b2f89cd569fa0e35801d62701c567dee24 : [[org.apache.commons.compress.archivers.sevenz.LZMADecoder:INS,TEST]]
a483c1904b25bb249b682c696deb1d66c161b61b : [[org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier):INS,TEST], [org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier):INS,TEST]]
423e7002c619a0ffeb020f6c9fbc6ef06ca8c96d : []
f9474b52896b9ee44b672e0c1f87df2101427bc1 : [[org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier:INS,DROP]]
957285f8a2ccd25279a5eea890cb9b3cb0d0643a : []
fcdd43f1cbf5e8fbfb3d2c16f50d2b0c2c4536e6 : []
b390e8a7550716e1a38a406f401d2b63c75e151f : []
91901633f7ff45a9f76dabf33418227d6b62fb2d : []
3eba30ad77f6b3745aaddff2574363c1864ab486 : []
1c9671202579c552b24a3f3c1110fb923714c6bf : [[org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object):UPD,TEST]]
49699e7d53d1572eb54f8b4d8a3424bd3e381a5e : [[org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object):UPD,TEST]]
5d00f5372224fc80fc412efa709d6f762b1cc387 : [[org.apache.commons.compress.utils.FlushShieldFilterOutputStream:INS,TEST]]
f225057dda7d29a4f003f0c33a540d85d6c91eaf : []
26efd2f49747100ef5afd6d9b637d0457dd40f02 : []
347171d6af18e04c1f6a5db379161b9e1aee8a7f : []
54ad50c86c1d4282ac8cbaac1eb9f87219375067 : [[org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object):UPD,TEST]]
21d0e2e716579dea9888b767db1e4887be911585 : []
7bf4d95e6136caf52b7eb1c573926b48a6ca1e30 : []
d9f7c82d8098c26d7900b142a019ce4a9ec133a8 : []
2f0775345fd71a24092df0f1a916c62522fb0363 : []
278cf99de3ed38fa6bc3da1565d5dcafb5b15eb7 : []
29d6392a003d2167b72e090981f8b58da5f3640d : []
3dadc491abb28c7f3c36fd409cecb0318121be72 : []
f5b70b775371cf902e959100effad858018590ad : []
d93425eb318bd0262c1d36449786cf3724df9b1d : []
7dc9529592ac5058445fd142362b25eb9aaa69ad : []
6c267dbcc8a3fb0373ef6003ff60c255eba10bb4 : [[org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader():UPD,TEST]]
28e210de37bff84492261b6d376cc1fc2983f423 : [[org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object):UPD,TEST]]
366e50ad210e233033cbfc885c2f2353ac68add8 : []
261db7b3afd88714863a5bc68ccc1cee4354e032 : [[org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>):UPD,TEST]]
7b015fc5851368129474156cb95e4692f155bf85 : []
fc77f1cb31043651454f28a56f2d81b2c143e61c : []
d042d3bd058409297a5ecb1495d5ea447fa7ebd5 : []
7cd1f9138a8b1fde24086938370e79ec8cb32743 : []
8d1f9fbe3901e39796c6c4e55491883dcb607c99 : [[org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[]):UPD,TEST]]
8b1c3635668db0fb3ad8c27fdc848034bfceca00 : []
c2af055905c5335f2232732dd5f23e789718a30e : [[org.apache.commons.compress.archivers.ArchiveStreamFactory.SIGNATURE_SIZE : int:INS,DROP], [org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream):UPD,TEST]]
6ccebe8da5e2aea21eb667091830a7b9349a9230 : [[org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP_SIGNATURE_SIZE : int:INS,DROP], [org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream):UPD,TEST]]
9f6b4b8a5677a4f81dc88a8448df9a638522bb49 : [[org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream):UPD,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR_HEADER_SIZE : int:INS,DROP]]
69a60a47060435745ce440939e9b8fd27e2dec85 : [[org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream):UPD,TEST]]
80aef2669342929a695526671f3b0644e15f0483 : [[org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[]):UPD,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[]):UPD,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int):UPD,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,boolean):UPD,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],boolean):UPD,TEST]]
c4dc4dd2a2014e5f387942d68b0d1be814d0dc42 : []
92de6a81631d2c0fe4d369cc5907e9fb82373f2b : []
693f4a4471ba7a33a0c68d2f55121a6dcaccb521 : []
3456dc7d26b11de52d85908c4226963eceb8db8f : [[org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry):UPD,TEST]]
555eb118410e25e1b75caf13e9ecfa7294c3c20c : [[org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry):UPD,TEST]]
49bdafb7de556191504e1a375ac62fc482ba6dd7 : []
bee020074dedd9ae25286eef92c204c1dfb49c16 : []
7645e7456ddcbc795d6ebc5a7e69b1e8e4ffe9e1 : []
8d464374677be9e1f5a66421515f6445a306cad4 : []
26aa88b939491b6529ec42c70f2643b419bbbe39 : []
65a7626b4852b243f3fd4ccf3983f3c7bc54f8be : []
fc6b61a4c2c9cad42f6afd2aceaae42d26215411 : []
67a2a2766ff0b81207b42e49d88277162a81ad60 : []
394184f490ad698798a03bb7a0f6ac9e75a6b9be : []
a20d40a87fb3d0f39e97cba9c3cf132eec2b881f : [[org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry():UPD,TEST]]
7fbe2d54dd24bc189032ad8eb727f14024c89e12 : []
5923484a4ac4646bbd92d6c101c03a7bd432379c : []
28b45b57cb45786e7e26b9eeacdef34b278709fe : []
100b004024539191a2f703ac43ffee480dd9b6ca : []
1ba27b9be95a142f7f531fbfd6e39962b716673d : []
041776c19130076c3b4b55423d80f2dad56bec5d : []
4e3cf00d495c2181b78a59074ade366ea31dcb51 : [[org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int):UPD,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean):UPD,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry):UPD,COMP]]
9bcd95e55ed85cc09c1e8c7ad902eaa647583d90 : [[org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI():UPD,TEST], [org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS():UPD,TEST], [org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry():UPD,TEST]]
bb7708a1770e544056c154e32f0d6751a9fb44eb : [[org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long):UPD,TEST]]
66d63f42e8ee22e50d0adbc1233d91a51c8583e2 : [[org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry):UPD,TEST]]
cdefac3d08fba38e8f9fdb8b62ae1bb2433b2f17 : [[org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map<String, String>,String,byte,String):UPD,TEST]]
b40c73f1a98754e9f7a3677a9e4aaf435b83ff21 : [[org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean):UPD,TEST]]
f67086eae4cfc5732eba5b4cab2201deed8a47ea : [[org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream):UPD,TEST]]
82e1403d91cf1b2225956d97c2d7487f28978a42 : [[org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive():UPD,TEST]]
8e45a6fd8f2be3984ce6aa80cfd7f4f567ed5950 : [[org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory():UPD,TEST]]
dc536c4235820bade63382b180c5022330963ace : [[org.apache.commons.compress.archivers.zip.ZipFile.LFH_OFFSET_FOR_FILENAME_LENGTH : long:UPD,DROP]]
07e6343bb400ef4df1b01b79889fad62dcb399f0 : [[org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next():UPD,TEST]]
46b863b777a875ad50c07244a3ddaf124f3bbbf2 : [[org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass():UPD,TEST]]
e61b7b3cd25b901babce126d7b46dd4bf3cdb681 : [[org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish():UPD,TEST]]
fb35743740431f2e13c9ce5012db6a5746fbcc88 : [[org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock():UPD,TEST]]
f5b403ec3743dec51afda1b94789d92f3b4e04ac : []
e2c4cd110ebedea37535ae58ac25d62c45456884 : []
823371a195d152ebf3c01dd662ae0fab4ec7653a : []
5deeea004a92f07bdbc0e8dbaf0a7dfb42c50ed4 : []
452b019b51f1162721d9f3f3835448ec8cb68854 : []
46375d0b7f16696b814b141e661f7a0cbc31d0a2 : []
069e07fd24604ab67b55a363f5d5395ab190d743 : [[org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry):UPD,DROP]]
2b562eaca2fd5323908d92c367d255ea0095c9c2 : [[org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.serialVersionUID : long:UPD,DROP], [org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry : ZipArchiveEntry:UPD,COMP]]
77d3f98a567b89db9fbef344f3540a6e69fa3982 : [[org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(Coder,InputStream):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(Object):UPD,TEST]]
5676144ab7065afe1e70409d5c9e6b9c2a8f8a49 : [[org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream):UPD,TEST]]
6cc52283cfb5aeb3de387939eb893bbf3b34e805 : []
8f25a546499cfbb5921277f08fa28d8fa7acb11f : []
748967acaa0ff28d82d92dcb1e6084c3a3e73f35 : []
503a500ef3ec8a8d248b36a6c013f18ae7a821b0 : []
502d63564b3af272b44092318d2ebcdfb3563815 : []
96b392d2e06f0051c3f4d98fc025446cf8e9e8a9 : []
9413ed9e0db226a5c0f79a6ebc05f68c05489389 : []
fe6bf7899cc8649dc5c5a3d47e5dce4889cdad24 : []
5c5e189efdfaa12a6520d42814695e8c27a02596 : []
6e4da783e78b0dbc3a95e1c15ade6e80ed94e89a : []
d2b20571527367045f0e246e790a4e71a6547773 : []
1d6b83bd4b993ab8e8031191dd29d429dbb837ba : []
2e1e21e6242e8939539e13f31857a50b8741b6b3 : []
11220acefd955f64fb52d8af4462f907f30809f2 : []
b01fe9cf25356112a88c476bbb55173c72059c3e : []
ff0c293a9efc7936b2483e23c19f91b69d5244e5 : []
f45b860a75ff11cdd95f896f406540b02a303ac0 : []
36c8834727043f962b588eb29aa9426577b72a58 : [[org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long):UPD,TEST]]
36e3ded7d6b32cbe10df3d1c1cabb5390bb2c36b : [[org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean):UPD,TEST]]
737e3154ffaadb91c04234425ee90065b42b22d8 : []
9ca675a90b1af4efa59a3226a0509477d846f26b : []
8704590ff7aab2fbd7f5acef85b6c92a95b7cbf3 : [[org.apache.commons.compress.archivers.ArchiveInputStream.SINGLE : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.ArchiveInputStream.single : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ArchiveInputStream.read():UPD,TEST]]
568792c77496c36a09bd3951033e120939576c1a : [[org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.FILE_MODE_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.NAME_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry():UPD,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LAST_MODIFIED_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LENGTH_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ID_BUF : byte[]:DEL,DROP]]
73319ba552cdd7abe3f07f72b122f8e92d8697b5 : [[org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.TWO_BYTES_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.FOUR_BYTES_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int):UPD,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.SIX_BYTES_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry():UPD,TEST]]
f2fd66b1d1fff92d30aeae95a327ad3ffaa66e4f : [[org.apache.commons.compress.archivers.tar.TarArchiveInputStream.SMALL_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData():UPD,TEST]]
4b8aae1a6cdaefc1b9e8c6ca8368bbea467c2bd2 : [[org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.WORD_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.SKIP_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.SHORT_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.TWO_DWORD_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor():UPD,TEST]]
f687dfe0f6f794a23ab942a175d57038ba074331 : [[org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.WORD_BBUF : ByteBuffer:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BBUF : ByteBuffer:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.CFH_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.shortBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator : Comparator<ZipArchiveEntry>:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BBUF : ByteBuffer:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.WORD_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.CFH_BBUF : ByteBuffer:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.wordBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader():UPD,COMP], [org.apache.commons.compress.archivers.zip.ZipFile.OFFSET_COMPARATOR : Comparator<ZipArchiveEntry>:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf : ByteBuffer:INS,TEST]]
b62d01b53af1f00a90cf89b2574544417d6ef3db : [[org.apache.commons.compress.compressors.pack200.StreamBridge.getInput():UPD,TEST], [org.apache.commons.compress.compressors.pack200.StreamBridge.stop():UPD,TEST], [org.apache.commons.compress.compressors.pack200.StreamBridge.INPUT_LOCK : Object:DEL,DROP], [org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock : Object:INS,TEST]]
f6ac459a7c739267b61e9b2a848835924eb79e98 : [[org.apache.commons.compress.archivers.dump.TapeInputStream.peek():UPD,TEST], [org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean):UPD,TEST], [org.apache.commons.compress.archivers.dump.TapeInputStream.RECORD_SIZE : int:INS,DROP], [org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord():UPD,TEST], [org.apache.commons.compress.archivers.dump.TapeInputStream.recordSize : int:DEL,DROP], [org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int):UPD,TEST], [org.apache.commons.compress.archivers.dump.TapeInputStream.read():UPD,DROP], [org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long):UPD,TEST]]
44daff99fd1ce111851d0c32033a7b212224c66d : [[org.apache.commons.compress.archivers.zip.StreamCompressor.BUFFER_SIZE : int:INS,DROP], [org.apache.commons.compress.archivers.zip.StreamCompressor.bufferSize : int:DEL,DROP], [org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf : byte[]:UPD,TEST], [org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer : byte[]:UPD,TEST]]
5acf6912ac884e138ed7cd2543a297f411b633d2 : [[org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_5_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_4_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_2_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_6_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_3_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_7_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_5_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(int):UPD,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_6_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(byte[],int,int):UPD,TEST], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_4_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_3_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_0_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_7_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_2_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_1_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_0_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_1_START : int:INS,DROP]]
8d2254c60f6f2b8b5a0923a1add728a557a78408 : []
d2508df9980381a11a49a9018aadb5a0b0048947 : []
0fa393e3962139061352640b2c552529075ede8b : [[org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close():UPD,TEST]]
7c2809fc0c2292710e24f274d29ac986c130f028 : []
b45ff68cecba95e237bbe40bb32d85a865baf230 : []
95a8e1d9171cbfd49b4cdfbcfe23343096e9bef4 : [[org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictSize(Object):DEL,DROP]]
3f1b51606ff0d08456153460c5e643e9697859d8 : []
2910ad88ac344438fe4d765e890fa3485dbfe249 : []
4bdabafe70583894ad1276b02d18cc005c717c23 : []
1cf101bccf8be7ff24637aaa7d5c6f2becddc27e : []
c0968f628d06588d6c019abbc4a94401cde2c03d : []
a72fcf42e60123e2d4ec1cf06d60923809b99baa : []
c23c6f81bc4636c61d84cf6e90a65b8d42af886f : []
3144e1efb5f234b1a8dd99e56ab54ed19461e2f1 : []
bb732782040376533f84e5633f66afee6bf790aa : []
9fd0a36acbba85fa77bd1956f80bb2009cccc410 : []
485b0db8f12fc800346dbd7415cae14416d3790b : []
0c7d15e1bba17126fddfc1b83ae4a1507fdcdeef : []
014a9b7f7d42f66d55137608fe93fdebba21cd43 : []
c4469a71333a738b4abe2591a35fa22f9aa33354 : []
5de04f54effbc5085cb10214f8816a05bd11b019 : []
bf4b59602a5aba41612ba5baf29564f511935d3a : []
42591a1039c6474cbe1dc5750a6e91b70b1fcf36 : []
335bbd8df1ffd80bed38202783ad11106d874eff : []
534811d32bcfb24024b6422b0dcdfb4264b91d1e : []
6f8d19a39824b0da12b61ff1d07604b23346f180 : []
9f8f3b9fb7cf9ffd6846a9c24092972a8b449cd5 : []
2ed7231981add36c7fdec991e2f6694c39590f33 : []
5e3ed8cebacffb9c60d2e054d5c9600d44e42221 : []
]
[OUTPUT] Results:
DROP: 5e3ed8ce : [b29395d bump release version, use latest release apidocs] README.md
DROP: 2ed72319 : [cd6de3a embrace parent 42] pom.xml
DROP: 9f8f3b9f : [cd6de3a embrace parent 42] .travis.yml
DROP: 6f8d19a3 : [35891d3 bump version] src/changes/changes.xml
DROP: 534811d3 : [35891d3 bump version] pom.xml
DROP: 335bbd8d : [4543847 fix release notes] RELEASE-NOTES.txt
DROP: 42591a10 : [8c6c659 prepare RC1 of Commons Compress 1.13] src/site/xdoc/index.xml
DROP: bf4b5960 : [8c6c659 prepare RC1 of Commons Compress 1.13] pom.xml
DROP: 5de04f54 : [e87e838 re-generated various generated pages] src/site/xdoc/mail-lists.xml
DROP: c4469a71 : [e87e838 re-generated various generated pages] src/site/xdoc/issue-tracking.xml
DROP: 014a9b7f : [e87e838 re-generated various generated pages] CONTRIBUTING.md
DROP: 0c7d15e1 : [592dac7 Updated download page in preparation for 1.13 release.] src/site/xdoc/download_compress.xml
DROP: 485b0db8 : [b9acd7c update release notes for 1.13] RELEASE-NOTES.txt
DROP: 9fd0a36a : [810883c use jacoco for coveralls report] pom.xml
DROP: bb732782 : [810883c use jacoco for coveralls report] .travis.yml
DROP: 3144e1ef : [72f048d make JIRA report more useful] pom.xml
DROP: c23c6f81 : [71df15e use latest version of japicmp] pom.xml
DROP: a72fcf42 : [1bc62d6 no reason to specify newVersion in japicmp] pom.xml
DROP: c0968f62 : [b3d0c26 use jacoco instead of cobertura, use japicmp] src/site/resources/profile.japicmp
DROP: 1cf101bc : [b3d0c26 use jacoco instead of cobertura, use japicmp] src/site/resources/profile.jacoco
DROP: 4bdabafe : [b3d0c26 use jacoco instead of cobertura, use japicmp] pom.xml
DROP: 2910ad88 : [bf88f6d false positives] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
DROP: 3f1b5160 : [bf88f6d false positives] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
DROP: 95a8e1d9 : [ea35f64 remove unused code] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
DROP: b45ff68c : [c497504 COMPRESS-372 record changes] src/changes/changes.xml
DROP: 7c2809fc : [0f4caeb COMPRESS-372 add latest release API doc link] src/site/site.xml
TEST: 0fa393e3 : [85184c3 COMPRESS-377 properly close StreamCompressor] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
DROP: d2508df9 : [85184c3 COMPRESS-377 properly close StreamCompressor] src/changes/changes.xml
DROP: 8d2254c6 : [ce6c33a flag false positive] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
TEST: 5acf6912 : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java
TEST: 44daff99 : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java
TEST: f6ac459a : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
TEST: b62d01b5 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java
TEST: f687dfe0 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: 4b8aae1a : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
TEST: f2fd66b1 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
TEST: 73319ba5 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
TEST: 568792c7 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
TEST: 8704590f : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java
DROP: 9ca675a9 : [5e0980f whitelist byte-arrays deliberately shared in package] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
DROP: 737e3154 : [5e0980f whitelist byte-arrays deliberately shared in package] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 36e3ded7 : [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
TEST: 36c88347 : [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
DROP: f45b860a : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
DROP: ff0c293a : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
DROP: b01fe9cf : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
DROP: 11220ace : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
DROP: 2e1e21e6 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java
DROP: 1d6b83bd : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java
DROP: d2b20571 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java
DROP: 6e4da783 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
DROP: 5c5e189e : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
DROP: fe6bf789 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java
DROP: 9413ed9e : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
DROP: 96b392d2 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java
DROP: 502d6356 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java
DROP: 503a500e : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
DROP: 748967ac : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
DROP: 8f25a546 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
DROP: 6cc52283 : [b03521d whitespace] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
TEST: 5676144a : [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
TEST: 77d3f98a : [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java
COMP: 2b562eac : [587430d properly make UnsupportedZipFeatureException Serializable] src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java
DROP: 069e07fd : [5294726 improve null-safety] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
HUNK: 46375d0b : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java
DROP: 452b019b : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java
DROP: 5deeea00 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: 823371a1 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
DROP: e2c4cd11 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
DROP: f5b403ec : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: fb357437 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
TEST: e61b7b3c : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java
TEST: 46b863b7 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java
TEST: 07e6343b : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java
DROP: dc536c42 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: 8e45a6fd : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
TEST: 82e1403d : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
TEST: f67086ea : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
TEST: b40c73f1 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
TEST: cdefac3d : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
TEST: 66d63f42 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
TEST: bb7708a1 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
TEST: 9bcd95e5 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
TEST: 4e3cf00d : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
DROP: 041776c1 : [d5867f1 run rat check on travis] .travis.yml
DROP: 1ba27b9b : [a172b4b Move apache-rat configuration from site to pluginManagement section, so that it also applies when mvn apache-rat:check is run.] pom.xml
DROP: 100b0040 : [726ba6f COMPRESS-367 record Mike Mole's patch] src/changes/changes.xml
DROP: 28b45b57 : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/resources/invalid-zip.zip
DROP: 5923484a : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
DROP: 7fbe2d54 : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
TEST: a20d40a8 : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
DROP: 394184f4 : [e0c83d2 add a few more patterns to .gitattributes] .gitattributes
DROP: 67a2a276 : [8de4b8a line-ends] src/site/xdoc/examples.xml
HUNK: fc6b61a4 : [8de4b8a line-ends] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: 65a7626b : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java
DROP: 26aa88b9 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java
DROP: 8d464374 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
DROP: 7645e745 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java
DROP: bee02007 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArTestCase.java
DROP: 49bdafb7 : [ffe346a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java
TEST: 555eb118 : [6c52318 Don't need local var.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: 3456dc7d : [c3d2cec [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: 693f4a44 : [05415c0 Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java
DROP: 92de6a81 : [7b7f490 Formatting.] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
DROP: c4dc4dd2 : [eda3a02 Typo.] src/site/xdoc/examples.xml
TEST: 80aef266 : [5c9661c param name 'input' should not hide field.] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
TEST: 69a60a47 : [f1a5821 Better local variable name.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
TEST: 9f6b4b8a : [a428e42 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
TEST: 6ccebe8d : [03239b0 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
TEST: c2af0559 : [7145b4a Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
DROP: 8b1c3635 : [a214d4c Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
TEST: 8d1f9fbe : [3fc9325 Unnecessary cast from int to int.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
DROP: 7cd1f913 : [8954230 Format nit.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
DROP: d042d3bd : [35523dd Fix Javadoc warning.] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
DROP: fc77f1cb : [703715e [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
DROP: 7b015fc5 : [3fdcafd [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java
TEST: 261db7b3 : [b9153ca [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java
DROP: 366e50ad : [2be44aa Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
TEST: 28e210de : [4d55183 In-line local variable.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
TEST: 6c267dbc : [9f468f1 [COMPRESS-362] Bullet-proof code using try-with-resources statements] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
DROP: 7dc95295 : [fe5ffa6 Document new service loader feature.] src/site/xdoc/index.xml
DROP: d93425eb : [fe5ffa6 Document new service loader feature.] src/site/xdoc/examples.xml
DROP: f5b70b77 : [735ba6d Document the 'current' (next) release is 1.13 and requires Java 7.] src/site/xdoc/index.xml
DROP: 3dadc491 : [1686712 Rename section for 1.13.] src/site/xdoc/index.xml
DROP: 29d6392a : [332b7a3 Reverse order of what's new subsections: the latest comes first.] src/site/xdoc/index.xml
DROP: 278cf99d : [398c102 Link to 1.13 Javadocs.] src/site/site.xml
DROP: 2f077534 : [427d742 Update maven-pmd-plugin from 3.6 to 3.7.] pom.xml
DROP: d9f7c82d : [c55c6c8 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java
DROP: 7bf4d95e : [d4c3261 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java
DROP: 21d0e2e7 : [696dbe9 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java
TEST: 54ad50c8 : [dd9f895 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
DROP: 347171d6 : [7e69189 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java
DROP: 26efd2f4 : [fa4f029 Formatting.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
DROP: f225057d : [c7c2fe4 Update findbugs-maven-plugin from 3.0.3 to 3.0.4.] pom.xml
TEST: 5d00f537 : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java
TEST: 49699e7d : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
TEST: 1c967120 : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
DROP: 3eba30ad : [99eb4cb Remove unused imports.] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
DROP: 91901633 : [99eb4cb Remove unused imports.] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java
DROP: b390e8a7 : [99eb4cb Remove unused imports.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
DROP: fcdd43f1 : [d5f3062 the new ServiceLoader stuff is worth a special notice] src/site/xdoc/index.xml
DROP: 957285f8 : [66726ea COMPRESS-375 record changes made by Plamen] src/changes/changes.xml
DROP: f9474b52 : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java
DROP: 423e7002 : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java
TEST: a483c190 : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
TEST: d5f325b2 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
DROP: c37bf3a7 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
DROP: 60479f34 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfigurationTest.java
DROP: 4970f3b4 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java
DROP: b2fdc0e3 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/limitations.xml
DROP: 31351506 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/index.xml
DROP: 4ef19ace : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/examples.xml
DROP: 5e517f4a : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
DROP: a73ecd8f : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/changes/changes.xml
DROP: 822ab02a : [e8cee81 copy paste error] src/changes/changes.xml
TEST: fbb851f4 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.java
DROP: 5c1e0a8a : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java
DROP: e16b3e98 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/limitations.xml
DROP: c33ff53b : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/index.xml
DROP: b919cf53 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/examples.xml
TEST: fb569846 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
DROP: 8640e5b7 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/changes/changes.xml
DROP: 1c62128a : [1a31dec upgrade XZ for Java dependency] pom.xml
DROP: 0a94f921 : [c1e7372 CONTRIBUTING.md: replace references to commons-text with references to commons-compress] CONTRIBUTING.md
DROP: 7d789707 : [cf1362e add CONTRIBUTING.md to fix link in README.md] CONTRIBUTING.md
DROP: 6214dc77 : [5dab55a README.md: fix javadoc link] README.md
DROP: 6cc07141 : [0b04d80 README.md: use latest released version in dependency declaration example] README.md
DROP: d313d417 : [14441db README.md: fix jira link] README.md
DROP: 049ff547 : [7c93eb1 Update README.md.] README.md
DROP: 63512bf6 : [a99b6bb Add badges.] README.md
DROP: 054f5ae4 : [e126bf9 Add README.md as generated by 'mvn commons:readme-md'] README.md
DROP: b1bcb077 : [db8bdf6 Enable TravisCI.] .travis.yml
DROP: 74870e91 : [db8bdf6 Enable TravisCI.] pom.xml
DROP: 37138089 : [350f01c [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java
DROP: f16fc825 : [350f01c [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java
COMP: e466cba2 : [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java
TEST: 8ac721a0 : [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
DROP: f7ebee2e : [545c399 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java
DROP: abd8cf55 : [22edc12 [COMPRESS-369]] src/test/resources/META-INF/services/org.apache.commons.compress.archivers.ArchiveStreamProvider
DROP: 8b4b0a1b : [22edc12 [COMPRESS-369]] src/test/java/org/apache/commons/compress/archivers/TestArchiveStreamProvider.java
DROP: a69e214a : [22edc12 [COMPRESS-369]] src/test/java/org/apache/commons/compress/archivers/ArchiveServiceLoaderTest.java
COMP: 5e63a225 : [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java
TEST: afd821bc : [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
DROP: 7efd6342 : [22edc12 [COMPRESS-369]] src/changes/changes.xml
DROP: 16f9dca1 : [a61a952 Better assert failure message.] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
DROP: 3310678d : [c4a5b14 Add org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString()] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
DROP: 761fe199 : [c49ccc9 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
HUNK: 20b89940 : [263513a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
DROP: 4194acc9 : [f98b32e [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java
TEST: 872a5a3c : [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Sets.java
TEST: fb69dd53 : [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
DROP: 7c920710 : [f965bc2 [COMPRESS-368]] src/test/resources/META-INF/services/org.apache.commons.compress.compressors.CompressorStreamProvider
DROP: 306ada02 : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java
DROP: b8e95a67 : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorServiceLoaderTest.java
TEST: 19c9e5ae : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/ServiceLoaderIterator.java
TEST: 86487f49 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Lists.java
TEST: 2e1ad7ff : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Iterators.java
COMP: 5bd260c7 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java
DROP: c527c906 : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java
TEST: 12eeebef : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
DROP: 5636d6ed : [f965bc2 [COMPRESS-368]] src/changes/changes.xml
TEST: 54a42ad4 : [f538f38 avoid overflow when resizing] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
DROP: d5693738 : [46f57bf properly return -1 from read on EOF] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java
TEST: 8ca20057 : [46f57bf properly return -1 from read on EOF] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
DROP: 128a6ceb : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
DROP: 37ebcccf : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/site/xdoc/examples.xml
TEST: 3e54cc76 : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
TEST: f1e5900c : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: 08381e0f : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
DROP: 1d5e93ba : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
DROP: 8aec9d00 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
DROP: 08da4833 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/site/xdoc/zip.xml
DROP: f4e6382e : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/site/xdoc/examples.xml
TEST: c87838af : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: 9bec5ca6 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
DROP: cd73ab44 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
TEST: 2852148a : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
DROP: 7832d5ed : [d8d9294 class is no longer used] src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java
DROP: 9df7919d : [3d509a0 array is exposed intentionally] findbugs-exclude-filter.xml
DROP: a88124c6 : [652343f fix eol-style] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java
DROP: b41f22b4 : [e958122 missing license headers] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java
DROP: 5bcd5b9a : [e958122 missing license headers] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java
DROP: fb2518c2 : [72b1789 COMPRESS-327 tests and tweaks for SeekableInMemoryByteChannel] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java
TEST: ae310114 : [72b1789 COMPRESS-327 tests and tweaks for SeekableInMemoryByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
TEST: 54d75fd6 : [a2976b6 modify SeekableInMemoryByteChannel based on feedback by Maciej and Bernd Eckenfels] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
DROP: 25332b60 : [d9fe818 also compare file contents, patch by Maciej N] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
HUNK: bb6b30ca : [1e0957d typo] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: f406ae1c : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
DROP: 9fbc12dd : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
TEST: ceeeb794 : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
TEST: 1d4f728d : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
DROP: cf4d48ec : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
DROP: 34c229a3 : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
TEST: 9767e3a9 : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: 08febea4 : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
TEST: fa799e10 : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
DROP: 6c35ec70 : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/zip.xml
DROP: 6e659286 : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/limitations.xml
DROP: 3b58212f : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/index.xml
DROP: d583769a : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/examples.xml
DROP: 802a3d89 : [57511f5 COMPRESS-327 update documentation] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
DROP: 59f12a8a : [57511f5 COMPRESS-327 update documentation] src/changes/changes.xml
TEST: c4ff1854 : [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
TEST: e37d1f1a : [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java
HUNK: f2249147 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: f439fce9 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
DROP: ba6053f6 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
HUNK: eb3a6032 : [cd235a8 remove reference to RandomAccessFile] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: 273b3867 : [d8fc27b COMPRESS-327 read zip archives from arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: d6efe105 : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java
TEST: ccafb31b : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/utils/IOUtils.java
TEST: 9e588b39 : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 411b0f5d : [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java
TEST: cf5222c3 : [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 49d23da3 : [87f0f2e COMPRESS-327 write 7z archives to arbirary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
DROP: 6bd51f85 : [9e32a2c record fix for COMPRESS-364] src/changes/changes.xml
DROP: 17d29185 : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/test/resources/archive_with_bytes_after_data.zip
DROP: 768ab7f8 : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
TEST: 43ba0eb3 : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
DROP: 6b4e1fac : [f010260 COMPRESS-366 clarify TarArchiveEntry javadocs] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
DROP: b3e22739 : [f010260 COMPRESS-366 clarify TarArchiveEntry javadocs] src/changes/changes.xml
DROP: b0aff96c : [7ee18aa Use try with resources.] src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java
DROP: 270ecd45 : [e71827b Use try with resources.] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java
DROP: 6173d9a1 : [159d9c6 Avoid unclosed stream warnings] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java
DROP: a5a9a75a : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java
TEST: 5609f836 : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/main/java/org/apache/commons/compress/utils/BitInputStream.java
DROP: 458cd423 : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/changes/changes.xml
DROP: e349a34d : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java
DROP: 6875b9e8 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java
DROP: e566a570 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java
DROP: 15682c44 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java
DROP: fb79d93b : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/ZTestCase.java
DROP: ec5be007 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/XZTestCase.java
DROP: de5aa3f7 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java
DROP: 6497900b : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java
DROP: 400bded1 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java
DROP: 99269e66 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java
DROP: 8245b33d : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java
DROP: e5799b91 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java
DROP: a8beadf4 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
DROP: 7853e5bc : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java
DROP: b27297ca : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/Lister.java
DROP: 117349cc : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
DROP: 4c7f71d9 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
DROP: 76738413 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
DROP: 8ff8e6ef : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java
DROP: 8756ba73 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
DROP: 77c143a1 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java
DROP: ac063011 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java
DROP: bd748348 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
DROP: af64af2d : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/AbstractTestCase.java
TEST: 1f25252f : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
TEST: 9c4ca2ec : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
TEST: 1067bf9f : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: e445b7d0 : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
DROP: 8366ff3a : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java
DROP: 99b4b1b4 : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
DROP: d9465f97 : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
DROP: fa7d33b6 : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java
TEST: c374440e : [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
TEST: 5f214c5d : [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
TEST: 483e6a2d : [4865194 Add final modifier to method parameters.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
DROP: dc76e10e : [4865194 Add final modifier to method parameters.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyDialect.java
DROP: 13063b23 : [7f110cf Javadoc.] src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java
DROP: cfa1174c : [0714e10 Statement unnecessarily nested within else clause.] src/main/java/org/apache/commons/compress/archivers/Lister.java
DROP: 7df06233 : [dee8220 Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java
DROP: cc36c17d : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java
DROP: d463b096 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java
DROP: 494c277b : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
DROP: 1f54690b : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java
DROP: daafc75d : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java
DROP: 400efc58 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
DROP: 7d332c64 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
DROP: 755dc0e6 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java
DROP: bba3adfa : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
DROP: fd397c37 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java
DROP: 003fb67d : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/LongPathTest.java
DROP: b8b9e011 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java
DROP: 23fa6868 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java
DROP: 713d20ec : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/ArchiveReadTest.java
DROP: bf341fa4 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/AbstractTestCase.java
TEST: 14eb9d99 : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java
TEST: dfe869b3 : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
TEST: f212854f : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 4d6bf1c3 : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
DROP: 70945cd0 : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java
DROP: 1451849e : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/Lister.java
DROP: bc856b49 : [f52ecf8 Format nits.] src/main/java/org/apache/commons/compress/archivers/Lister.java
DROP: e5ee236c : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java
TEST: 5a2aa26b : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java
DROP: 7c94ecc8 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java
DROP: 60ccf15b : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java
DROP: 44728bae : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java
TEST: b43815d5 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java
TEST: db849423 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java
TEST: 7b9cfd8d : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java
TEST: 6b697d93 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSet.java
DROP: 4ef44ef0 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java
TEST: 233fb2a5 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: a9353fa8 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java
TEST: 3c566e68 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
TEST: 42c158db : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
TEST: 148724aa : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java
TEST: 96f207cd : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
TEST: 5989c516 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
DROP: 9c7c867d : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java
TEST: b97c6a2e : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
TEST: 75b8dcfd : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
TEST: c5c3c919 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
TEST: 1f03a5da : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
TEST: 05625f09 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 386763c5 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java
TEST: 30323a8b : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java
TEST: 04ac5dea : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
DROP: 2cc357dd : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java
TEST: 95771966 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
TEST: a268ece5 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
DROP: f49016b4 : [f5a9851 [COMPRESS-360] Update Java requirement from 6 to 7.] src/changes/changes.xml
DROP: b0c369de : [f8e0994 [COMPRESS-360] Update Java requirement from 6 to 7.] src/changes/changes.xml
DROP: efa2e7a3 : [f8e0994 [COMPRESS-360] Update Java requirement from 6 to 7.] pom.xml
DROP: 91d605fe : [6c8345b Tests for [COMPRESS-359] Pack200 is broken.] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java
DROP: 2bfb50bb : [9e6f0b3 commons-parent 39 -> 40.] pom.xml
DROP: 87a3a21e : [9a677fb Bump to next development version] src/changes/changes.xml
DROP: 55c94545 : [9a677fb Bump to next development version] pom.xml
DROP: 5e80e371 : [9a677fb Bump to next development version] RELEASE-NOTES.txt

[STATS] ************** Stats **************
[STATS] total.time : 19.412
[STATS] main.algo : 3.955
[STATS] insert.edge : 0.0
[STATS] hunk.deps.time : 4.033
[STATS] extract.time : 0.001
[STATS] call.graph.time : 1.322
[STATS] tests.time : 2.562
[STATS] comp.count : 4
[STATS] hunk.count : 6
[STATS] test.count : 112
[STATS] hunk.deps.set : 6
[STATS] drop.count : 243
[STATS] ast.line.count : 7213
[STATS] test.deps : 2166
[STATS] comp.deps : 2885
[STATS] reduction.hunk : 66.57534246575342
[STATS] reduction.rate : 68.21917808219177
[STATS] ***********************************
