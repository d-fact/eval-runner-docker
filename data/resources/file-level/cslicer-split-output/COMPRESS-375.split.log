===== Git History Slicing Toolkit =====
   ______ _____  __ _                  
  / ____// ___/ / /(_)_____ ___   _____
 / /     \__ \ / // // ___// _ \ / ___/
/ /___  ___/ // // // /__ /  __// /
\____/ /____//_//_/ \___/ \___//_/

=======================================
[DEBUG] Original |H|: 365
[OUTPUT] Computing FUNC & COMP set ... 
[OUTPUT] Running coverage analysis ...
[DEBUG] FULL
[DEBUG] 248 classes have been analyzed.
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/gzip ...
[DEBUG] 	File: GzipCompressorOutputStream.java ...
[DEBUG] 	File: GzipCompressorInputStream.java ...
[DEBUG] 	File: GzipParameters.java ...
[DEBUG] 	File: GzipUtils.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/sevenz ...
[DEBUG] 	File: SevenZMethodConfiguration.java ...
[DEBUG] 	File: Coder.java ...
[DEBUG] 	File: AES256SHA256Decoder.java ...
[DEBUG] 	File: Archive.java ...
[DEBUG] 	File: BindPair.java ...
[DEBUG] 	File: SubStreamsInfo.java ...
[DEBUG] 	File: LZMA2Decoder.java ...
[DEBUG] 	File: CoderBase.java ...
[DEBUG] 	File: NID.java ...
[DEBUG] 	File: SevenZFile.java ...
[DEBUG] 	File: DeltaDecoder.java ...
[DEBUG] 	File: Folder.java ...
[DEBUG] 	File: StartHeader.java ...
[DEBUG] 	File: SevenZArchiveEntry.java ...
[DEBUG] 	File: Coders.java ...
[DEBUG] 	File: LZMADecoder.java ...
[DEBUG] 	File: CLI.java ...
[DEBUG] 	File: SevenZMethod.java ...
[DEBUG] 	File: BoundedSeekableByteChannelInputStream.java ...
[DEBUG] 	File: SevenZOutputFile.java ...
[DEBUG] 	File: StreamMap.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/utils ...
[DEBUG] 	File: Iterators.java ...
[DEBUG] 	File: CountingOutputStream.java ...
[DEBUG] 	File: SeekableInMemoryByteChannel.java ...
[DEBUG] 	File: ServiceLoaderIterator.java ...
[DEBUG] 	File: CountingInputStream.java ...
[DEBUG] 	File: IOUtils.java ...
[DEBUG] 	File: Charsets.java ...
[DEBUG] 	File: BoundedInputStream.java ...
[DEBUG] 	File: CharsetNames.java ...
[DEBUG] 	File: FlushShieldFilterOutputStream.java ...
[DEBUG] 	File: ChecksumVerifyingInputStream.java ...
[DEBUG] 	File: Lists.java ...
[DEBUG] 	File: CRC32VerifyingInputStream.java ...
[DEBUG] 	File: Sets.java ...
[DEBUG] 	File: BitInputStream.java ...
[DEBUG] 	File: ArchiveUtils.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers ...
[DEBUG] 	File: Lister.java ...
[DEBUG] 	File: ArchiveException.java ...
[DEBUG] 	File: ArchiveStreamFactory.java ...
[DEBUG] 	File: ArchiveOutputStream.java ...
[DEBUG] 	File: StreamingNotSupportedException.java ...
[DEBUG] 	File: ArchiveInputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/zip ...
[DEBUG] 	File: UnsupportedZipFeatureException.java ...
[DEBUG] 	File: BinaryTree.java ...
[DEBUG] 	File: ZipConstants.java ...
[DEBUG] 	File: ZipArchiveEntry.java ...
[DEBUG] 	File: UnicodeCommentExtraField.java ...
[DEBUG] 	File: ZipLong.java ...
[DEBUG] 	File: NioZipEncoding.java ...
[DEBUG] 	File: ZipArchiveEntryRequest.java ...
[DEBUG] 	File: X0014_X509Certificates.java ...
[DEBUG] 	File: AsiExtraField.java ...
[DEBUG] 	File: ScatterStatistics.java ...
[DEBUG] 	File: ZipEightByteInteger.java ...
[DEBUG] 	File: X7875_NewUnix.java ...
[DEBUG] 	File: UnicodePathExtraField.java ...
[DEBUG] 	File: Zip64RequiredException.java ...
[DEBUG] 	File: BitStream.java ...
[DEBUG] 	File: UnparseableExtraFieldData.java ...
[DEBUG] 	File: ZipShort.java ...
[DEBUG] 	File: ScatterZipOutputStream.java ...
[DEBUG] 	File: ExtraFieldUtils.java ...
[DEBUG] 	File: X0016_CertificateIdForCentralDirectory.java ...
[DEBUG] 	File: ZipEncodingHelper.java ...
[DEBUG] 	File: ZipMethod.java ...
[DEBUG] 	File: X0015_CertificateIdForFile.java ...
[DEBUG] 	File: PKWareExtraHeader.java ...
[DEBUG] 	File: ZipUtil.java ...
[DEBUG] 	File: ZipArchiveOutputStream.java ...
[DEBUG] 	File: CircularBuffer.java ...
[DEBUG] 	File: ParallelScatterZipCreator.java ...
[DEBUG] 	File: ExplodingInputStream.java ...
[DEBUG] 	File: X000A_NTFS.java ...
[DEBUG] 	File: X0019_EncryptionRecipientCertificateList.java ...
[DEBUG] 	File: UnshrinkingInputStream.java ...
[DEBUG] 	File: X0017_StrongEncryptionHeader.java ...
[DEBUG] 	File: Simple8BitZipEncoding.java ...
[DEBUG] 	File: GeneralPurposeBit.java ...
[DEBUG] 	File: X5455_ExtendedTimestamp.java ...
[DEBUG] 	File: StreamCompressor.java ...
[DEBUG] 	File: Zip64ExtendedInformationExtraField.java ...
[DEBUG] 	File: Zip64Mode.java ...
[DEBUG] 	File: ZipArchiveInputStream.java ...
[DEBUG] 	File: AbstractUnicodeExtraField.java ...
[DEBUG] 	File: UnrecognizedExtraField.java ...
[DEBUG] 	File: FallbackZipEncoding.java ...
[DEBUG] 	File: ZipFile.java ...
[DEBUG] 	File: JarMarker.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/parallel ...
[DEBUG] 	File: FileBasedScatterGatherBackingStore.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/ar ...
[DEBUG] 	File: ArArchiveEntry.java ...
[DEBUG] 	File: ArArchiveInputStream.java ...
[DEBUG] 	File: ArArchiveOutputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/pack200 ...
[DEBUG] 	File: StreamBridge.java ...
[DEBUG] 	File: TempFileCachingStreamBridge.java ...
[DEBUG] 	File: InMemoryCachingStreamBridge.java ...
[DEBUG] 	File: Pack200Strategy.java ...
[DEBUG] 	File: Pack200CompressorInputStream.java ...
[DEBUG] 	File: Pack200Utils.java ...
[DEBUG] 	File: Pack200CompressorOutputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/tar ...
[DEBUG] 	File: TarArchiveEntry.java ...
[DEBUG] 	File: TarArchiveOutputStream.java ...
[DEBUG] 	File: TarArchiveSparseEntry.java ...
[DEBUG] 	File: TarArchiveInputStream.java ...
[DEBUG] 	File: TarUtils.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/deflate ...
[DEBUG] 	File: DeflateParameters.java ...
[DEBUG] 	File: DeflateCompressorInputStream.java ...
[DEBUG] 	File: DeflateCompressorOutputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/jar ...
[DEBUG] 	File: JarArchiveEntry.java ...
[DEBUG] 	File: JarArchiveInputStream.java ...
[DEBUG] 	File: JarArchiveOutputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/bzip2 ...
[DEBUG] 	File: BZip2Utils.java ...
[DEBUG] 	File: BlockSort.java ...
[DEBUG] 	File: BZip2CompressorInputStream.java ...
[DEBUG] 	File: CRC.java ...
[DEBUG] 	File: BZip2CompressorOutputStream.java ...
[DEBUG] 	File: Rand.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/cpio ...
[DEBUG] 	File: CpioArchiveOutputStream.java ...
[DEBUG] 	File: CpioArchiveEntry.java ...
[DEBUG] 	File: CpioUtil.java ...
[DEBUG] 	File: CpioArchiveInputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/snappy ...
[DEBUG] 	File: SnappyCompressorInputStream.java ...
[DEBUG] 	File: FramedSnappyCompressorInputStream.java ...
[DEBUG] 	File: FramedSnappyDialect.java ...
[DEBUG] 	File: PureJavaCrc32C.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/changes ...
[DEBUG] 	File: Change.java ...
[DEBUG] 	File: ChangeSetPerformer.java ...
[DEBUG] 	File: ChangeSet.java ...
[DEBUG] 	File: ChangeSetResults.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors ...
[DEBUG] 	File: CompressorOutputStream.java ...
[DEBUG] 	File: FileNameUtil.java ...
[DEBUG] 	File: CompressorInputStream.java ...
[DEBUG] 	File: CompressorStreamFactory.java ...
[DEBUG] 	File: CompressorException.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/lzma ...
[DEBUG] 	File: LZMAUtils.java ...
[DEBUG] 	File: LZMACompressorOutputStream.java ...
[DEBUG] 	File: LZMACompressorInputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/dump ...
[DEBUG] 	File: DumpArchiveInputStream.java ...
[DEBUG] 	File: TapeInputStream.java ...
[DEBUG] 	File: UnrecognizedFormatException.java ...
[DEBUG] 	File: DumpArchiveSummary.java ...
[DEBUG] 	File: DumpArchiveUtil.java ...
[DEBUG] 	File: DumpArchiveEntry.java ...
[DEBUG] 	File: UnsupportedCompressionAlgorithmException.java ...
[DEBUG] 	File: ShortFileException.java ...
[DEBUG] 	File: DumpArchiveConstants.java ...
[DEBUG] 	File: Dirent.java ...
[DEBUG] 	File: InvalidFormatException.java ...
[DEBUG] 	File: DumpArchiveException.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/z ...
[DEBUG] 	File: ZCompressorInputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/lzw ...
[DEBUG] 	File: LZWInputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/archivers/arj ...
[DEBUG] 	File: ArjArchiveInputStream.java ...
[DEBUG] 	File: ArjArchiveEntry.java ...
[DEBUG] 	File: LocalFileHeader.java ...
[DEBUG] 	File: MainHeader.java ...
[DEBUG] Analyzing package: org/apache/commons/compress/compressors/xz ...
[DEBUG] 	File: XZCompressorInputStream.java ...
[DEBUG] 	File: XZUtils.java ...
[DEBUG] 	File: XZCompressorOutputStream.java ...
[DEBUG] Analyzing package: org/apache/commons/compress ...
[DEBUG] 	File: PasswordRequiredException.java ...
[DEBUG] Drawing static call graph ...
[OUTPUT] Scanning class files ...
[DEBUG] 0 Reading class file: Archive.class
[DEBUG] 1 Reading class file: Coders$DeflateDecoder$2.class
[DEBUG] 2 Reading class file: SevenZArchiveEntry.class
[DEBUG] 3 Reading class file: Coders$DummyByteAddingInputStream.class
[DEBUG] 4 Reading class file: CoderBase.class
[DEBUG] 5 Reading class file: Coders$BZIP2Decoder.class
[DEBUG] 6 Reading class file: SevenZOutputFile$OutputStreamWrapper.class
[DEBUG] 7 Reading class file: StreamMap.class
[DEBUG] 8 Reading class file: CLI$Mode$1.class
[DEBUG] 9 Reading class file: CLI$Mode.class
[DEBUG] 10 Reading class file: AES256SHA256Decoder$1.class
[DEBUG] 11 Reading class file: SubStreamsInfo.class
[DEBUG] 12 Reading class file: Coders.class
[DEBUG] 13 Reading class file: DeltaDecoder.class
[DEBUG] 14 Reading class file: CLI.class
[DEBUG] 15 Reading class file: SevenZMethod.class
[DEBUG] 16 Reading class file: SevenZOutputFile$1.class
[DEBUG] 17 Reading class file: NID.class
[DEBUG] 18 Reading class file: SevenZOutputFile.class
[DEBUG] 19 Reading class file: Coders$BCJDecoder.class
[DEBUG] 20 Reading class file: Coders$CopyDecoder.class
[DEBUG] 21 Reading class file: SevenZMethodConfiguration.class
[DEBUG] 22 Reading class file: BindPair.class
[DEBUG] 23 Reading class file: LZMA2Decoder.class
[DEBUG] 24 Reading class file: CLI$Mode$2.class
[DEBUG] 25 Reading class file: LZMADecoder.class
[DEBUG] 26 Reading class file: StartHeader.class
[DEBUG] 27 Reading class file: CLI$1.class
[DEBUG] 28 Reading class file: Folder.class
[DEBUG] 29 Reading class file: BoundedSeekableByteChannelInputStream.class
[DEBUG] 30 Reading class file: AES256SHA256Decoder.class
[DEBUG] 31 Reading class file: Coder.class
[DEBUG] 32 Reading class file: Coders$DeflateDecoder$1.class
[DEBUG] 33 Reading class file: Coders$1.class
[DEBUG] 34 Reading class file: Coders$DeflateDecoder.class
[DEBUG] 35 Reading class file: SevenZFile.class
[DEBUG] 36 Reading class file: Lister.class
[DEBUG] 37 Reading class file: ArchiveStreamFactory$2.class
[DEBUG] 38 Reading class file: ExplodingInputStream.class
[DEBUG] 39 Reading class file: ExtraFieldUtils.class
[DEBUG] 40 Reading class file: Simple8BitZipEncoding.class
[DEBUG] 41 Reading class file: X0014_X509Certificates.class
[DEBUG] 42 Reading class file: Simple8BitZipEncoding$Simple8BitChar.class
[DEBUG] 43 Reading class file: FallbackZipEncoding.class
[DEBUG] 44 Reading class file: AsiExtraField.class
[DEBUG] 45 Reading class file: ZipArchiveInputStream.class
[DEBUG] 46 Reading class file: NioZipEncoding.class
[DEBUG] 47 Reading class file: ParallelScatterZipCreator$2.class
[DEBUG] 48 Reading class file: X0019_EncryptionRecipientCertificateList.class
[DEBUG] 49 Reading class file: ParallelScatterZipCreator$1.class
[DEBUG] 50 Reading class file: ParallelScatterZipCreator$DefaultBackingStoreSupplier.class
[DEBUG] 51 Reading class file: UnparseableExtraFieldData.class
[DEBUG] 52 Reading class file: ZipArchiveInputStream$CurrentEntry.class
[DEBUG] 53 Reading class file: ZipEightByteInteger.class
[DEBUG] 54 Reading class file: ZipFile$OffsetEntry.class
[DEBUG] 55 Reading class file: ZipEncodingHelper$SimpleEncodingHolder.class
[DEBUG] 56 Reading class file: ZipFile$BoundedInputStream.class
[DEBUG] 57 Reading class file: X0015_CertificateIdForFile.class
[DEBUG] 58 Reading class file: AbstractUnicodeExtraField.class
[DEBUG] 59 Reading class file: BitStream.class
[DEBUG] 60 Reading class file: ParallelScatterZipCreator$3.class
[DEBUG] 61 Reading class file: GeneralPurposeBit.class
[DEBUG] 62 Reading class file: UnixStat.class
[DEBUG] 63 Reading class file: UnicodePathExtraField.class
[DEBUG] 64 Reading class file: ZipConstants.class
[DEBUG] 65 Reading class file: ScatterStatistics.class
[DEBUG] 66 Reading class file: ZipEncodingHelper.class
[DEBUG] 67 Reading class file: ZipArchiveOutputStream$UnicodeExtraFieldPolicy.class
[DEBUG] 68 Reading class file: ZipArchiveInputStream$1.class
[DEBUG] 69 Reading class file: ScatterZipOutputStream.class
[DEBUG] 70 Reading class file: ZipFile$2.class
[DEBUG] 71 Reading class file: ZipFile.class
[DEBUG] 72 Reading class file: Zip64Mode.class
[DEBUG] 73 Reading class file: X000A_NTFS.class
[DEBUG] 74 Reading class file: X0017_StrongEncryptionHeader.class
[DEBUG] 75 Reading class file: X7875_NewUnix.class
[DEBUG] 76 Reading class file: UnsupportedZipFeatureException$Feature.class
[DEBUG] 77 Reading class file: UnshrinkingInputStream.class
[DEBUG] 78 Reading class file: ZipArchiveInputStream$BoundedInputStream.class
[DEBUG] 79 Reading class file: X0016_CertificateIdForCentralDirectory.class
[DEBUG] 80 Reading class file: ZipArchiveOutputStream$1.class
[DEBUG] 81 Reading class file: ScatterZipOutputStream$CompressedEntry.class
[DEBUG] 82 Reading class file: ZipEncoding.class
[DEBUG] 83 Reading class file: StreamCompressor.class
[DEBUG] 84 Reading class file: ZipArchiveEntryRequestSupplier.class
[DEBUG] 85 Reading class file: StreamCompressor$ScatterGatherBackingStoreCompressor.class
[DEBUG] 86 Reading class file: Zip64RequiredException.class
[DEBUG] 87 Reading class file: PKWareExtraHeader$EncryptionAlgorithm.class
[DEBUG] 88 Reading class file: StreamCompressor$SeekableByteChannelCompressor.class
[DEBUG] 89 Reading class file: UnsupportedZipFeatureException.class
[DEBUG] 90 Reading class file: ExtraFieldUtils$UnparseableExtraField.class
[DEBUG] 91 Reading class file: CircularBuffer.class
[DEBUG] 92 Reading class file: X5455_ExtendedTimestamp.class
[DEBUG] 93 Reading class file: ZipArchiveEntry.class
[DEBUG] 94 Reading class file: Zip64ExtendedInformationExtraField.class
[DEBUG] 95 Reading class file: ZipArchiveEntryRequest.class
[DEBUG] 96 Reading class file: ZipMethod.class
[DEBUG] 97 Reading class file: ZipFile$3.class
[DEBUG] 98 Reading class file: ZipExtraField.class
[DEBUG] 99 Reading class file: ZipShort.class
[DEBUG] 100 Reading class file: ParallelScatterZipCreator.class
[DEBUG] 101 Reading class file: ZipArchiveEntryPredicate.class
[DEBUG] 102 Reading class file: BinaryTree.class
[DEBUG] 103 Reading class file: ZipFile$Entry.class
[DEBUG] 104 Reading class file: ZipFile$1.class
[DEBUG] 105 Reading class file: StreamCompressor$DataOutputCompressor.class
[DEBUG] 106 Reading class file: PKWareExtraHeader$HashAlgorithm.class
[DEBUG] 107 Reading class file: StreamCompressor$OutputStreamCompressor.class
[DEBUG] 108 Reading class file: ZipLong.class
[DEBUG] 109 Reading class file: ZipArchiveOutputStream.class
[DEBUG] 110 Reading class file: UnicodeCommentExtraField.class
[DEBUG] 111 Reading class file: PKWareExtraHeader.class
[DEBUG] 112 Reading class file: ZipUtil.class
[DEBUG] 113 Reading class file: ZipArchiveOutputStream$CurrentEntry.class
[DEBUG] 114 Reading class file: JarMarker.class
[DEBUG] 115 Reading class file: ZipFile$NameAndComment.class
[DEBUG] 116 Reading class file: UnrecognizedExtraField.class
[DEBUG] 117 Reading class file: JarArchiveOutputStream.class
[DEBUG] 118 Reading class file: JarArchiveInputStream.class
[DEBUG] 119 Reading class file: JarArchiveEntry.class
[DEBUG] 120 Reading class file: TapeInputStream.class
[DEBUG] 121 Reading class file: DumpArchiveSummary.class
[DEBUG] 122 Reading class file: DumpArchiveConstants.class
[DEBUG] 123 Reading class file: UnrecognizedFormatException.class
[DEBUG] 124 Reading class file: DumpArchiveEntry.class
[DEBUG] 125 Reading class file: Dirent.class
[DEBUG] 126 Reading class file: TapeInputStream$1.class
[DEBUG] 127 Reading class file: DumpArchiveEntry$PERMISSION.class
[DEBUG] 128 Reading class file: UnsupportedCompressionAlgorithmException.class
[DEBUG] 129 Reading class file: DumpArchiveInputStream.class
[DEBUG] 130 Reading class file: DumpArchiveException.class
[DEBUG] 131 Reading class file: ShortFileException.class
[DEBUG] 132 Reading class file: InvalidFormatException.class
[DEBUG] 133 Reading class file: DumpArchiveEntry$TapeSegmentHeader.class
[DEBUG] 134 Reading class file: DumpArchiveEntry$TYPE.class
[DEBUG] 135 Reading class file: DumpArchiveInputStream$1.class
[DEBUG] 136 Reading class file: DumpArchiveConstants$COMPRESSION_TYPE.class
[DEBUG] 137 Reading class file: DumpArchiveUtil.class
[DEBUG] 138 Reading class file: DumpArchiveConstants$SEGMENT_TYPE.class
[DEBUG] 139 Reading class file: ArchiveException.class
[DEBUG] 140 Reading class file: ArchiveStreamProvider.class
[DEBUG] 141 Reading class file: TarArchiveSparseEntry.class
[DEBUG] 142 Reading class file: TarUtils$1.class
[DEBUG] 143 Reading class file: TarUtils.class
[DEBUG] 144 Reading class file: TarConstants.class
[DEBUG] 145 Reading class file: TarArchiveEntry.class
[DEBUG] 146 Reading class file: TarArchiveInputStream.class
[DEBUG] 147 Reading class file: TarArchiveOutputStream.class
[DEBUG] 148 Reading class file: ArchiveOutputStream.class
[DEBUG] 149 Reading class file: CpioArchiveOutputStream.class
[DEBUG] 150 Reading class file: CpioArchiveInputStream.class
[DEBUG] 151 Reading class file: CpioConstants.class
[DEBUG] 152 Reading class file: CpioArchiveEntry.class
[DEBUG] 153 Reading class file: CpioUtil.class
[DEBUG] 154 Reading class file: ArchiveStreamFactory.class
[DEBUG] 155 Reading class file: ArchiveInputStream.class
[DEBUG] 156 Reading class file: ArchiveStreamFactory$1.class
[DEBUG] 157 Reading class file: ArchiveEntry.class
[DEBUG] 158 Reading class file: StreamingNotSupportedException.class
[DEBUG] 159 Reading class file: MainHeader$Flags.class
[DEBUG] 160 Reading class file: LocalFileHeader.class
[DEBUG] 161 Reading class file: MainHeader.class
[DEBUG] 162 Reading class file: ArjArchiveEntry$HostOs.class
[DEBUG] 163 Reading class file: LocalFileHeader$FileTypes.class
[DEBUG] 164 Reading class file: ArjArchiveEntry.class
[DEBUG] 165 Reading class file: ArjArchiveInputStream.class
[DEBUG] 166 Reading class file: LocalFileHeader$Methods.class
[DEBUG] 167 Reading class file: LocalFileHeader$Flags.class
[DEBUG] 168 Reading class file: ArArchiveInputStream.class
[DEBUG] 169 Reading class file: ArArchiveOutputStream.class
[DEBUG] 170 Reading class file: ArArchiveEntry.class
[DEBUG] 171 Reading class file: PasswordRequiredException.class
[DEBUG] 172 Reading class file: FileBasedScatterGatherBackingStore.class
[DEBUG] 173 Reading class file: ScatterGatherBackingStore.class
[DEBUG] 174 Reading class file: InputStreamSupplier.class
[DEBUG] 175 Reading class file: ScatterGatherBackingStoreSupplier.class
[DEBUG] 176 Reading class file: ChangeSetPerformer$ArchiveInputStreamIterator.class
[DEBUG] 177 Reading class file: Change.class
[DEBUG] 178 Reading class file: ChangeSetPerformer.class
[DEBUG] 179 Reading class file: ChangeSetPerformer$ArchiveEntryIterator.class
[DEBUG] 180 Reading class file: ChangeSetResults.class
[DEBUG] 181 Reading class file: ChangeSet.class
[DEBUG] 182 Reading class file: ChangeSetPerformer$ZipFileIterator.class
[DEBUG] 183 Reading class file: GzipCompressorInputStream.class
[DEBUG] 184 Reading class file: GzipCompressorOutputStream.class
[DEBUG] 185 Reading class file: GzipUtils.class
[DEBUG] 186 Reading class file: GzipParameters.class
[DEBUG] 187 Reading class file: LZMACompressorInputStream.class
[DEBUG] 188 Reading class file: LZMAUtils.class
[DEBUG] 189 Reading class file: LZMACompressorOutputStream.class
[DEBUG] 190 Reading class file: LZMAUtils$CachedAvailability.class
[DEBUG] 191 Reading class file: CompressorOutputStream.class
[DEBUG] 192 Reading class file: CompressorStreamFactory.class
[DEBUG] 193 Reading class file: ZCompressorInputStream.class
[DEBUG] 194 Reading class file: FileNameUtil.class
[DEBUG] 195 Reading class file: CompressorInputStream.class
[DEBUG] 196 Reading class file: BZip2CompressorInputStream.class
[DEBUG] 197 Reading class file: BZip2Utils.class
[DEBUG] 198 Reading class file: BlockSort.class
[DEBUG] 199 Reading class file: BZip2CompressorOutputStream.class
[DEBUG] 200 Reading class file: BZip2Constants.class
[DEBUG] 201 Reading class file: CRC.class
[DEBUG] 202 Reading class file: BZip2CompressorInputStream$Data.class
[DEBUG] 203 Reading class file: BZip2CompressorOutputStream$Data.class
[DEBUG] 204 Reading class file: Rand.class
[DEBUG] 205 Reading class file: XZUtils.class
[DEBUG] 206 Reading class file: XZCompressorOutputStream.class
[DEBUG] 207 Reading class file: XZUtils$CachedAvailability.class
[DEBUG] 208 Reading class file: XZCompressorInputStream.class
[DEBUG] 209 Reading class file: CompressorStreamFactory$2.class
[DEBUG] 210 Reading class file: LZWInputStream.class
[DEBUG] 211 Reading class file: CompressorStreamFactory$1.class
[DEBUG] 212 Reading class file: DeflateCompressorInputStream.class
[DEBUG] 213 Reading class file: DeflateCompressorOutputStream.class
[DEBUG] 214 Reading class file: DeflateParameters.class
[DEBUG] 215 Reading class file: Pack200Strategy.class
[DEBUG] 216 Reading class file: Pack200CompressorOutputStream.class
[DEBUG] 217 Reading class file: Pack200Utils.class
[DEBUG] 218 Reading class file: Pack200CompressorInputStream.class
[DEBUG] 219 Reading class file: InMemoryCachingStreamBridge.class
[DEBUG] 220 Reading class file: StreamBridge.class
[DEBUG] 221 Reading class file: TempFileCachingStreamBridge$1.class
[DEBUG] 222 Reading class file: TempFileCachingStreamBridge.class
[DEBUG] 223 Reading class file: Pack200Strategy$1.class
[DEBUG] 224 Reading class file: Pack200Strategy$2.class
[DEBUG] 225 Reading class file: Pack200CompressorInputStream$1.class
[DEBUG] 226 Reading class file: PureJavaCrc32C.class
[DEBUG] 227 Reading class file: FramedSnappyCompressorInputStream.class
[DEBUG] 228 Reading class file: FramedSnappyDialect.class
[DEBUG] 229 Reading class file: SnappyCompressorInputStream.class
[DEBUG] 230 Reading class file: CompressorException.class
[DEBUG] 231 Reading class file: CompressorStreamProvider.class
[DEBUG] 232 Reading class file: CharsetNames.class
[DEBUG] 233 Reading class file: BoundedInputStream.class
[DEBUG] 234 Reading class file: SeekableInMemoryByteChannel.class
[DEBUG] 235 Reading class file: ArchiveUtils.class
[DEBUG] 236 Reading class file: IOUtils.class
[DEBUG] 237 Reading class file: Iterators.class
[DEBUG] 238 Reading class file: FlushShieldFilterOutputStream.class
[DEBUG] 239 Reading class file: Sets.class
[DEBUG] 240 Reading class file: CountingInputStream.class
[DEBUG] 241 Reading class file: CRC32VerifyingInputStream.class
[DEBUG] 242 Reading class file: ChecksumVerifyingInputStream.class
[DEBUG] 243 Reading class file: ServiceLoaderIterator.class
[DEBUG] 244 Reading class file: CountingOutputStream.class
[DEBUG] 245 Reading class file: Charsets.class
[DEBUG] 246 Reading class file: Lists.class
[DEBUG] 247 Reading class file: BitInputStream.class
[DEBUG] 1: Done: org.apache.commons.compress.archivers.sevenz.DeltaDecoder
[DEBUG] 2: Done: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream
[DEBUG] 3: Done: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream
[DEBUG] 4: Done: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream
[DEBUG] 5: Done: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream
[DEBUG] 6: Done: org.apache.commons.compress.compressors.CompressorOutputStream
[DEBUG] 7: Done: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator
[DEBUG] 8: Done: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest
[DEBUG] 9: Done: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder
[DEBUG] 10: Done: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE
[DEBUG] 11: Done: org.apache.commons.compress.utils.CountingInputStream
[DEBUG] 12: Done: org.apache.commons.compress.utils.Charsets
[DEBUG] 13: Done: org.apache.commons.compress.archivers.jar.JarArchiveEntry
[DEBUG] 14: Done: org.apache.commons.compress.archivers.zip.PKWareExtraHeader
[DEBUG] 15: Done: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream
[DEBUG] 16: Done: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream
[DEBUG] 17: Done: org.apache.commons.compress.archivers.sevenz.StartHeader
[DEBUG] 18: Done: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream
[DEBUG] 19: Done: org.apache.commons.compress.archivers.dump.DumpArchiveUtil
[DEBUG] 20: Done: org.apache.commons.compress.compressors.z.ZCompressorInputStream
[DEBUG] 21: Done: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
[DEBUG] 22: Done: org.apache.commons.compress.archivers.dump.TapeInputStream
[DEBUG] 23: Done: org.apache.commons.compress.archivers.zip.StreamCompressor
[DEBUG] 24: Done: org.apache.commons.compress.compressors.FileNameUtil
[DEBUG] 25: Done: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream
[DEBUG] 26: Done: org.apache.commons.compress.archivers.ArchiveException
[DEBUG] 27: Done: org.apache.commons.compress.archivers.zip.ZipEncodingHelper
[DEBUG] 28: Done: org.apache.commons.compress.archivers.zip.BitStream
[DEBUG] 29: Done: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder
[DEBUG] 30: Done: org.apache.commons.compress.utils.Lists
[DEBUG] 31: Done: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge
[DEBUG] 32: Done: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry
[DEBUG] 33: Done: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C
[DEBUG] 34: Done: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding
[DEBUG] 35: Done: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder
[DEBUG] 36: Done: org.apache.commons.compress.archivers.zip.BinaryTree
[DEBUG] 37: Done: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream
[DEBUG] 38: Done: org.apache.commons.compress.compressors.bzip2.CRC
[DEBUG] 39: Done: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream
[DEBUG] 40: Done: org.apache.commons.compress.archivers.dump.DumpArchiveException
[DEBUG] 41: Done: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader
[DEBUG] 42: Done: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream
[DEBUG] 43: Done: org.apache.commons.compress.archivers.sevenz.StreamMap
[DEBUG] 44: Done: org.apache.commons.compress.utils.Iterators
[DEBUG] 45: Done: org.apache.commons.compress.archivers.sevenz.Coder
[DEBUG] 46: Done: org.apache.commons.compress.utils.FlushShieldFilterOutputStream
[DEBUG] 47: Done: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor
[DEBUG] 48: Done: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream
[DEBUG] 49: Done: org.apache.commons.compress.archivers.ArchiveInputStream
[DEBUG] 50: Done: org.apache.commons.compress.archivers.zip.UnicodePathExtraField
[DEBUG] 51: Done: org.apache.commons.compress.compressors.pack200.Pack200Strategy
[DEBUG] 52: Done: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder
[DEBUG] 53: Done: org.apache.commons.compress.archivers.tar.TarArchiveInputStream
[DEBUG] 54: Done: org.apache.commons.compress.archivers.jar.JarArchiveInputStream
[DEBUG] 55: Done: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability
[DEBUG] 56: Done: org.apache.commons.compress.compressors.xz.XZUtils
[DEBUG] 57: Done: org.apache.commons.compress.compressors.lzw.LZWInputStream
[DEBUG] 58: Done: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream
[DEBUG] 59: Done: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator
[DEBUG] 60: Done: org.apache.commons.compress.compressors.gzip.GzipUtils
[DEBUG] 61: Done: org.apache.commons.compress.archivers.dump.ShortFileException
[DEBUG] 62: Done: org.apache.commons.compress.archivers.dump.DumpArchiveEntry
[DEBUG] 63: Done: org.apache.commons.compress.archivers.cpio.CpioUtil
[DEBUG] 64: Done: org.apache.commons.compress.archivers.zip.ScatterStatistics
[DEBUG] 65: Done: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile
[DEBUG] 66: Done: org.apache.commons.compress.archivers.arj.ArjArchiveEntry
[DEBUG] 67: Done: org.apache.commons.compress.archivers.tar.TarUtils
[DEBUG] 68: Done: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField
[DEBUG] 69: Done: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData
[DEBUG] 70: Done: org.apache.commons.compress.archivers.dump.UnrecognizedFormatException
[DEBUG] 71: Done: org.apache.commons.compress.utils.CRC32VerifyingInputStream
[DEBUG] 72: Done: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException
[DEBUG] 73: Done: org.apache.commons.compress.archivers.sevenz.SevenZFile
[DEBUG] 74: Done: org.apache.commons.compress.archivers.ar.ArArchiveInputStream
[DEBUG] 75: Done: org.apache.commons.compress.compressors.bzip2.BZip2Utils
[DEBUG] 76: Done: org.apache.commons.compress.compressors.CompressorInputStream
[DEBUG] 77: Done: org.apache.commons.compress.compressors.bzip2.BlockSort
[DEBUG] 78: Done: org.apache.commons.compress.archivers.ar.ArArchiveEntry
[DEBUG] 79: Done: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp
[DEBUG] 80: Done: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION
[DEBUG] 81: Done: org.apache.commons.compress.archivers.zip.ZipArchiveEntry
[DEBUG] 82: Done: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry
[DEBUG] 83: Done: org.apache.commons.compress.archivers.sevenz.LZMADecoder
[DEBUG] 84: Done: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor
[DEBUG] 85: Done: org.apache.commons.compress.archivers.arj.MainHeader
[DEBUG] 86: Done: org.apache.commons.compress.archivers.sevenz.BindPair
[DEBUG] 87: Done: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream
[DEBUG] 88: Done: org.apache.commons.compress.archivers.zip.GeneralPurposeBit
[DEBUG] 89: Done: org.apache.commons.compress.archivers.sevenz.CoderBase
[DEBUG] 90: Done: org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile
[DEBUG] 91: Done: org.apache.commons.compress.compressors.CompressorException
[DEBUG] 92: Done: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor
[DEBUG] 93: Done: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator
[DEBUG] 94: Done: org.apache.commons.compress.archivers.zip.FallbackZipEncoding
[DEBUG] 95: Done: org.apache.commons.compress.utils.ChecksumVerifyingInputStream
[DEBUG] 96: Done: org.apache.commons.compress.utils.ServiceLoaderIterator
[DEBUG] 97: Done: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder
[DEBUG] 98: Done: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature
[DEBUG] 99: Done: org.apache.commons.compress.archivers.zip.JarMarker
[DEBUG] 100: Done: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream
[DEBUG] 101: Done: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream
[DEBUG] 102: Done: org.apache.commons.compress.compressors.CompressorStreamFactory
[DEBUG] 103: Done: org.apache.commons.compress.archivers.zip.ZipEightByteInteger
[DEBUG] 104: Done: org.apache.commons.compress.archivers.zip.X0014_X509Certificates
[DEBUG] 105: Done: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability
[DEBUG] 106: Done: org.apache.commons.compress.archivers.sevenz.Folder
[DEBUG] 107: Done: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration
[DEBUG] 108: Done: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream
[DEBUG] 109: Done: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField
[DEBUG] 110: Done: org.apache.commons.compress.archivers.sevenz.SevenZMethod
[DEBUG] 111: Done: org.apache.commons.compress.changes.ChangeSetPerformer
[DEBUG] 112: Done: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder
[DEBUG] 113: Done: org.apache.commons.compress.archivers.zip.Zip64Mode
[DEBUG] 114: Done: org.apache.commons.compress.archivers.StreamingNotSupportedException
[DEBUG] 115: Done: org.apache.commons.compress.compressors.xz.XZCompressorInputStream
[DEBUG] 116: Done: org.apache.commons.compress.archivers.dump.DumpArchiveConstants
[DEBUG] 117: Done: org.apache.commons.compress.changes.ChangeSet
[DEBUG] 118: Done: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream
[DEBUG] 119: Done: org.apache.commons.compress.utils.BitInputStream
[DEBUG] 120: Done: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo
[DEBUG] 121: Done: org.apache.commons.compress.archivers.zip.ZipFile
[DEBUG] 122: Done: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier
[DEBUG] 123: Done: org.apache.commons.compress.archivers.zip.ExtraFieldUtils
[DEBUG] 124: Done: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader
[DEBUG] 125: Done: org.apache.commons.compress.archivers.zip.ZipShort
[DEBUG] 126: Done: org.apache.commons.compress.archivers.dump.DumpArchiveSummary
[DEBUG] 127: Done: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField
[DEBUG] 128: Done: org.apache.commons.compress.archivers.zip.ZipFile.Entry
[DEBUG] 129: Done: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField
[DEBUG] 130: Done: org.apache.commons.compress.compressors.pack200.Pack200Utils
[DEBUG] 131: Done: org.apache.commons.compress.archivers.zip.X000A_NTFS
[DEBUG] 132: Done: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
[DEBUG] 133: Done: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream
[DEBUG] 134: Done: org.apache.commons.compress.compressors.deflate.DeflateParameters
[DEBUG] 135: Done: org.apache.commons.compress.archivers.tar.TarArchiveEntry
[DEBUG] 136: Done: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder
[DEBUG] 137: Done: org.apache.commons.compress.archivers.zip.NioZipEncoding
[DEBUG] 138: Done: org.apache.commons.compress.archivers.arj.MainHeader.Flags
[DEBUG] 139: Done: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment
[DEBUG] 140: Done: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge
[DEBUG] 141: Done: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream
[DEBUG] 142: Done: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data
[DEBUG] 143: Done: org.apache.commons.compress.archivers.zip.X7875_NewUnix
[DEBUG] 144: Done: org.apache.commons.compress.utils.ArchiveUtils
[DEBUG] 145: Done: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper
[DEBUG] 146: Done: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data
[DEBUG] 147: Done: org.apache.commons.compress.utils.IOUtils
[DEBUG] 148: Done: org.apache.commons.compress.archivers.zip.AsiExtraField
[DEBUG] 149: Done: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore
[DEBUG] 150: Done: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream
[DEBUG] 151: Done: org.apache.commons.compress.archivers.ArchiveOutputStream
[DEBUG] 152: Done: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream
[DEBUG] 153: Done: org.apache.commons.compress.compressors.gzip.GzipParameters
[DEBUG] 154: Done: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar
[DEBUG] 155: Done: org.apache.commons.compress.archivers.sevenz.Coders
[DEBUG] 156: Done: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy
[DEBUG] 157: Done: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream
[DEBUG] 158: Done: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect
[DEBUG] 159: Done: org.apache.commons.compress.utils.CountingOutputStream
[DEBUG] 160: Done: org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods
[DEBUG] 161: Done: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream
[DEBUG] 162: Done: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry
[DEBUG] 163: Done: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE
[DEBUG] 164: Done: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE
[DEBUG] 165: Done: org.apache.commons.compress.compressors.lzma.LZMAUtils
[DEBUG] 166: Done: org.apache.commons.compress.archivers.dump.Dirent
[DEBUG] 167: Done: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
[DEBUG] 168: Done: org.apache.commons.compress.archivers.zip.ZipMethod
[DEBUG] 169: Done: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField
[DEBUG] 170: Done: org.apache.commons.compress.utils.SeekableInMemoryByteChannel
[DEBUG] 171: Done: org.apache.commons.compress.PasswordRequiredException
[DEBUG] 172: Done: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream
[DEBUG] 173: Done: org.apache.commons.compress.archivers.sevenz.Archive
[DEBUG] 174: Done: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory
[DEBUG] 175: Done: org.apache.commons.compress.archivers.ArchiveStreamFactory
[DEBUG] 176: Done: org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList
[DEBUG] 177: Done: org.apache.commons.compress.archivers.zip.ZipLong
[DEBUG] 178: Done: org.apache.commons.compress.archivers.arj.LocalFileHeader
[DEBUG] 179: Done: org.apache.commons.compress.archivers.zip.ZipUtil
[DEBUG] 180: Done: org.apache.commons.compress.compressors.pack200.StreamBridge
[DEBUG] 181: Done: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream
[DEBUG] 182: Done: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream
[DEBUG] 183: Done: org.apache.commons.compress.archivers.zip.ExplodingInputStream
[DEBUG] 184: Done: org.apache.commons.compress.changes.ChangeSetResults
[DEBUG] 185: Done: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry
[DEBUG] 186: Done: org.apache.commons.compress.utils.BoundedInputStream
[DEBUG] 187: Done: org.apache.commons.compress.utils.Sets
[DEBUG] 188: Done: org.apache.commons.compress.archivers.zip.CircularBuffer
[DEBUG] 189: Done: org.apache.commons.compress.changes.Change
[DEBUG] 190: Done: org.apache.commons.compress.archivers.zip.ZipEncoding
[DEBUG] 191: Done: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator
[DEBUG] 192: Done: org.apache.commons.compress.parallel.InputStreamSupplier
[DEBUG] 193: Done: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm
[DEBUG] 194: Done: org.apache.commons.compress.archivers.zip.ZipExtraField
[DEBUG] 195: Done: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm
[DEBUG] 196: Done: org.apache.commons.compress.archivers.ArchiveEntry
[DEBUG] 197: Done: org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException
[DEBUG] 198: Done: org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor
[DEBUG] 199: Done: org.apache.commons.compress.parallel.ScatterGatherBackingStore
[DEBUG] 200: Done: org.apache.commons.compress.archivers.cpio.CpioConstants
[DEBUG] 201: Done: org.apache.commons.compress.archivers.dump.InvalidFormatException
[DEBUG] 202: Done: org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry
[DEBUG] 203: Done: org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier
[DEBUG] 204: Done: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs
[DEBUG] 205: Done: org.apache.commons.compress.compressors.CompressorStreamProvider
[DEBUG] 206: Done: org.apache.commons.compress.compressors.bzip2.Rand
[DEBUG] 207: Done: org.apache.commons.compress.compressors.bzip2.BZip2Constants
[DEBUG] 208: Done: org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate
[DEBUG] 209: Done: org.apache.commons.compress.archivers.tar.TarConstants
[DEBUG] 210: Done: org.apache.commons.compress.archivers.zip.UnixStat
[DEBUG] 211: Done: org.apache.commons.compress.archivers.zip.Zip64RequiredException
[DEBUG] 212: Done: org.apache.commons.compress.archivers.ArchiveStreamProvider
[DEBUG] 213: Done: org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags
[DEBUG] 214: Done: org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes
[DEBUG] Adding to touch set ...
[DEBUG] Test: org.apache.commons.compress.archivers.zip.StreamCompressor
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.SEGMENT_TYPE(int)
Test: org.apache.commons.compress.archivers.zip.JarMarker
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes()
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
Test: org.apache.commons.compress.archivers.zip.ZipUtil
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(DataOutput)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[])
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(DataOutput)
Test: org.apache.commons.compress.utils.Charsets.UTF_16BE : Charset
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(ZipEightByteInteger)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO : ZipShort
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(Date)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH : byte[]
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[])
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.buf : byte[]
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(byte[])
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(byte[])
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.SeekableByteChannelCompressor(Deflater,SeekableByteChannel)
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.UnparseableExtraFieldData()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(SevenZMethod)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.compressedCrc32 : CRC32
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(long)
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.numberOptionOrDefault(Object,int)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(boolean)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(long)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.dataStart : long
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(byte[])
Test: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.PPMD : ZipMethod
Test: org.apache.commons.compress.compressors.xz.XZUtils.HEADER_MAGIC : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.compressionLevel : int
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map<String, String>,TarArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry
Test: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag : boolean
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(int)
Test: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>)
Test: org.apache.commons.compress.utils.Charsets.toCharset(String)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues()
Test: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField()
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.generateMTFValues_yy : byte[]
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.getAndMoveToFrontDecode_yy : char[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding : String
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.AES256SHA256 : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.hashCode()
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(InputStream,DeflateParameters)
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum()
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.ArchiveInputStream.getBytesRead()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.Feature(String)
Test: org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(DumpArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN : TYPE
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[])
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date)
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(ZipEightByteInteger)
Test: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE : CachedAvailability
Test: org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding()
Test: org.apache.commons.compress.archivers.jar.JarArchiveEntry
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry
Test: org.apache.commons.compress.archivers.zip.ZipFile.Entry
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.parent : int[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.name : String
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(OutputStream,GzipParameters)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(int)
Test: org.apache.commons.compress.archivers.zip.Zip64Mode.Never : Zip64Mode
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(DataOutput)
Test: org.apache.commons.compress.changes.Change.type()
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(long)
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.getEncoding()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current : CurrentEntry
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,int,String)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETUID : PERMISSION
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor()
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(int)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.reset()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.SevenZMethod(byte[])
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.oneByte : byte[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(long)
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.oneByte : byte[]
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.writeOut(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.size : long
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(Date)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders()
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData()
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(int)
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(Class<?>)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.crc : CRC32
Test: org.apache.commons.compress.compressors.CompressorInputStream.count(int)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders()
Test: org.apache.commons.compress.utils.Charsets.US_ASCII : Charset
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_THUMB_FILTER : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EMPTY : byte[]
Test: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(OutputStream,String)
Test: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder
Test: org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finished : boolean
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean,boolean)
Test: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass()
Test: org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION : ZipMethod
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[],int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(SevenZMethod)
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.available()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(Date)
Test: org.apache.commons.compress.archivers.zip.ZipFile.wordBuf : byte[]
Test: org.apache.commons.compress.utils.Sets.newHashSet(E...)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.initTT(int)
Test: org.apache.commons.compress.archivers.zip.JarMarker.NULL : ZipShort
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.read()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName()
Test: org.apache.commons.compress.utils.CountingOutputStream.write(int)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.WAVPACK : ZipMethod
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(DataOutput)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(File)
Test: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder
Test: org.apache.commons.compress.archivers.zip.BitStream.nextByte()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FIFO : TYPE
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(int)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2 : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE : FramedSnappyDialect
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.archivers.zip.BitStream.nextBit()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh : int[]
Test: org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream()
Test: org.apache.commons.compress.archivers.cpio.CpioUtil
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)
Test: org.apache.commons.compress.archivers.zip.CircularBuffer.available()
Test: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.getInputView()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(byte[],ZipEncoding)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES : TarArchiveEntry[]
Test: org.apache.commons.compress.archivers.ArchiveException.ArchiveException(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(DataOutput)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(boolean)
Test: org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[])
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod()
Test: org.apache.commons.compress.archivers.ArchiveException.ArchiveException(String,Exception)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_WRITE : PERMISSION
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish()
Test: org.apache.commons.compress.archivers.zip.ZipShort.hashCode()
Test: org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead : long
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.flush()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map<String, String>)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryBytesRead : long
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.crc : long
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory()
Test: org.apache.commons.compress.archivers.zip.JarMarker.ID : ZipShort
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive()
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Map<String, String>)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readSize()
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(int)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry)
Test: org.apache.commons.compress.archivers.arj.MainHeader.Flags.Flags()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,int)
Test: org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER : ZipLong
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCrc()
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.hasNext()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.get()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes()
Test: org.apache.commons.compress.changes.Change.Change(ArchiveEntry,InputStream,boolean)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(long)
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders()
Test: org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(String)
Test: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getHeaderId()
Test: org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING : ZipEncoding
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.close()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongLinkEntry()
Test: org.apache.commons.compress.utils.Iterators
Test: org.apache.commons.compress.archivers.sevenz.Coder.Coder()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.gid : long
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(int)
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder
Test: org.apache.commons.compress.archivers.sevenz.Coder
Test: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CachedAvailability()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(String)
Test: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer : byte[]
Test: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.canEncode(String)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read()
Test: org.apache.commons.compress.archivers.zip.ZipLong.equals(Object)
Test: org.apache.commons.compress.archivers.zip.BinaryTree
Test: org.apache.commons.compress.utils.Charsets.ISO_8859_1 : Charset
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decodeByte(byte)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(OutputStream)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finalize()
Test: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(InputStream)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(DataInputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH : byte[]
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[])
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.LZMADecoder()
Test: org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,int,String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries : List
Test: org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes : Attributes
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForNonAsciiNames : boolean
Test: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getNTRec()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated : boolean
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.SubStreamsInfo()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(boolean)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean)
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,int)
Test: org.apache.commons.compress.utils.BoundedInputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens : int[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean)
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(byte[])
Test: org.apache.commons.compress.archivers.ArchiveInputStream.count(long)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.STORED : ZipMethod
Test: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[])
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj()
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO : byte[]
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.tlScatterStreams : ThreadLocal
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method : int
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE : CachedAvailability
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate()
Test: org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG : ZipLong
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE : CachedAvailability
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.getKey()
Test: org.apache.commons.compress.compressors.FileNameUtil.compressSuffix : Map<String, String>
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE : PERMISSION
Test: org.apache.commons.compress.utils.BoundedInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(ZipLong)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset : int
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(int)
Test: org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],boolean)
Test: org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(int,int)
Test: org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)
Test: org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataLength()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int)
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability()
Test: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.cftab : int[]
Test: org.apache.commons.compress.utils.BitInputStream.clearBitCache()
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.OutputStreamCompressor(Deflater,OutputStream)
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.PureJavaCrc32C()
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.DeltaDecoder()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed : boolean
Test: org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(long,long)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer : byte[]
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer()
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(InputStream)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(DataOutput)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(long)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP : UnparseableExtraField
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close()
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.ArchiveInputStreamIterator(ArchiveInputStream)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException
Test: org.apache.commons.compress.archivers.zip.JarMarker.getInstance()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString()
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.available()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat()
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmaj : long
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_code : int[][]
Test: org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(ZipFile)
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(ZipArchiveEntryRequest,long,long,long)
Test: org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId()
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord()
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished : boolean
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readFully(DataInputStream,byte[])
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selectorMtf : byte[]
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.currBlkIdx : int
Test: org.apache.commons.compress.archivers.dump.TapeInputStream
Test: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream()
Test: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1 : ZipMethod
Test: org.apache.commons.compress.utils.BitInputStream.BitInputStream(InputStream,ByteOrder)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID()
Test: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>)
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.HEX_DIGITS : byte[]
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream)
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.Dirent.getIno()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock()
Test: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(ZipShort)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory
Test: org.apache.commons.compress.archivers.zip.ZipMethod.JPEG : ZipMethod
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files : List
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.X0014_X509Certificates
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(boolean)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fmin(int,int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.CRC.getFinalCRC()
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG : byte[]
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.getInputStream()
Test: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID : ZipShort
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(OutputStream,int)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getHeaderId()
Test: org.apache.commons.compress.compressors.bzip2.CRC.CRC()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen()
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.close()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName()
Test: org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(Coder)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(InputStream,FramedSnappyDialect)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(String)
Test: org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf : ByteBuffer
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader()
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength()
Test: org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(InputStream,long,long)
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.NONE : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(ZipArchiveEntry)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_SPARC_FILTER : SevenZMethod
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.flush()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField
Test: org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(long)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(ZipShort)
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipFile.Entry.Entry(OffsetEntry)
Test: org.apache.commons.compress.utils.CountingOutputStream.count(long)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Pack200Strategy)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.UnicodeExtraFieldPolicy(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes : int
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(BZip2CompressorOutputStream.Data,int,int,int,int)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(String,byte[],int,int)
Test: org.apache.commons.compress.changes.ChangeSetResults.deleted(String)
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream.init()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(BZip2CompressorOutputStream.Data,int,int,int,int)
Test: org.apache.commons.compress.changes.ChangeSetPerformer
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.longFileMode : int
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf : byte[]
Test: org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(InputStream,long)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.startedAt : long
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode()
Test: org.apache.commons.compress.utils.BitInputStream
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[])
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)
Test: org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(ChangeSet)
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.compressionLevel : int
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[])
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag : boolean
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_cost : short[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(byte[])
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(int)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,boolean)
Test: org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(String)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable<? extends SevenZMethodConfiguration>)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.ASCII : ZipEncoding
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(int)
Test: org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(String)
Test: org.apache.commons.compress.archivers.zip.ZipFile.closed : boolean
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(int)
Test: org.apache.commons.compress.utils.ServiceLoaderIterator.getNextServiceLoader()
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(File)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(int)
Test: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.compressors.pack200.StreamBridge
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.finish()
Test: org.apache.commons.compress.archivers.zip.UnicodePathExtraField
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG : byte[]
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(Date)
Test: org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[])
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()
Test: org.apache.commons.compress.utils.CountingInputStream.read(byte[])
Test: org.apache.commons.compress.archivers.sevenz.StreamMap.StreamMap()
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.PERMISSION(int)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(long)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(BigInteger)
Test: org.apache.commons.compress.archivers.zip.CircularBuffer.get()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(String)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names : Map<Integer, Dirent>
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummy()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.crc : CRC32
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator : Comparator
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord()
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File)
Test: org.apache.commons.compress.archivers.zip.ZipFile.nameMap : Map<String, LinkedList>
Test: org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(byte[])
Test: org.apache.commons.compress.compressors.pack200.Pack200Strategy.Pack200Strategy()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method : int
Test: org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.INCS : int[]
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[])
Test: org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)
Test: org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders()
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.writeOut(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(ZipExtraField)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables()
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(Date)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)
Test: org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(long)
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.getComment()
Test: org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams : int
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields : UnicodeExtraFieldPolicy
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(DataInputStream)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(Object)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(GzipParameters)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(DataOutput)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getIno()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.unzftab : int[]
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(ScatterGatherBackingStoreSupplier)
Test: org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(String)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime()
Test: org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(File,String)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize : int
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(Date)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND : BigInteger
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(ArchiveEntry)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData()
Test: org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream()
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.finalize()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.crc : CRC32
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance : Calendar
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset()
Test: org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(String)
Test: org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry()
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.reset()
Test: org.apache.commons.compress.archivers.zip.ZipLong.clone()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(DataOutput)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrcValue()
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish()
Test: org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY : byte[]
Test: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.flush()
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataData()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel()
Test: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream
Test: org.apache.commons.compress.archivers.sevenz.StreamMap
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getMetaData()
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream
Test: org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile
Test: org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(SeekableByteChannel)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(InputStream,ByteOrder)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf : byte[]
Test: org.apache.commons.compress.changes.ChangeSetResults.ChangeSetResults()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor : int
Test: org.apache.commons.compress.changes.Change.getEntry()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(String,String)
Test: org.apache.commons.compress.archivers.dump.Dirent.getName()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(long)
Test: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.archivers.ArchiveInputStream.read()
Test: org.apache.commons.compress.archivers.sevenz.Archive.Archive()
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CachedAvailability()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc()
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.incrementCodeSize()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finished : boolean
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(long)
Test: org.apache.commons.compress.PasswordRequiredException
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.dirFlag : boolean
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.zlibHeader : boolean
Test: org.apache.commons.compress.archivers.StreamingNotSupportedException
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(BZip2CompressorOutputStream.Data)
Test: org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base : int[][]
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(boolean)
Test: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.close()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_EXEC : PERMISSION
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(int)
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.write(int)
Test: org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(int)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[])
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice()
Test: org.apache.commons.compress.utils.IOUtils.closeQuietly(Closeable)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters : GzipParameters
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_dd : int[]
Test: org.apache.commons.compress.compressors.bzip2.BZip2Utils
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize()
Test: org.apache.commons.compress.archivers.arj.LocalFileHeader
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_READ : PERMISSION
Test: org.apache.commons.compress.archivers.zip.ZipMethod.LZMA : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID()
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(Object)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(LocalFileHeader)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType()
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders()
Test: org.apache.commons.compress.archivers.zip.JarMarker.DEFAULT : JarMarker
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(ZipShort)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf : Inflater
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.unseqToSeq : byte[]
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream)
Test: org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(Class,ClassLoader)
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.count(long)
Test: org.apache.commons.compress.utils.ServiceLoaderIterator
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(byte)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.clone()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FILE : TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode)
Test: org.apache.commons.compress.utils.Charsets.UTF_16LE : Charset
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra()
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],Data,int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.getEntry(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(DataOutput)
Test: org.apache.commons.compress.archivers.ArchiveOutputStream
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8 : boolean
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawName()
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(byte[])
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.Simple8BitChar(byte,char)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams : ArrayList
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.END : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize()
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.hasNext()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.FallbackZipEncoding
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName()
Test: org.apache.commons.compress.archivers.zip.PKWareExtraHeader
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(SevenZArchiveEntry)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum : PureJavaCrc32C
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(long)
Test: org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(Archive)
Test: org.apache.commons.compress.utils.FlushShieldFilterOutputStream
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(byte[])
Test: org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.totalWrittenToOutputStream : long
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.TYPE(int)
Test: org.apache.commons.compress.archivers.sevenz.Folder.Folder()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.COMPRESSION_TYPE(int)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor : int
Test: org.apache.commons.compress.compressors.bzip2.CRC.crc32Table : int[]
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(int,int,InputStream)
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.endReached : boolean
Test: org.apache.commons.compress.utils.FlushShieldFilterOutputStream.FlushShieldFilterOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor
Test: org.apache.commons.compress.archivers.zip.CircularBuffer
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2 : SevenZMethod
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.sevenz.CoderBase
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode()
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(Callable)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY : SevenZMethod
Test: org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock : Object
Test: org.apache.commons.compress.archivers.ArchiveInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len : byte[][]
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW : UnparseableExtraField
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(String)
Test: org.apache.commons.compress.compressors.CompressorInputStream
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.SPLITTING : Feature
Test: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream
Test: org.apache.commons.compress.utils.Charsets.UTF_16 : Charset
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(DataInputStream)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sentMTFValues4_inUse16 : boolean[]
Test: org.apache.commons.compress.archivers.zip.ScatterStatistics
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream)
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified()
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc : CRC
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(long)
Test: org.apache.commons.compress.compressors.bzip2.CRC
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[])
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD : Feature
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.shortBuf : byte[]
Test: org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm : int[][]
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available()
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.SimpleEncodingHolder(char[])
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,boolean)
Test: org.apache.commons.compress.archivers.zip.NioZipEncoding
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.close()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN : int
Test: org.apache.commons.compress.archivers.zip.BitStream.BitStream(InputStream)
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.flush()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(long)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.DOS_TIME_MIN : byte[]
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(int)
Test: org.apache.commons.compress.compressors.pack200.Pack200Utils
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encodeHighChar(char)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues2_pos : byte[]
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees()
Test: org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG : ZipLong
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int)
Test: org.apache.commons.compress.archivers.dump.UnrecognizedFormatException
Test: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength : int
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(int)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Calendar,long,byte[],int)
Test: org.apache.commons.compress.archivers.tar.TarUtils
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.close()
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(Coder)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getHeaderId()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.TapeSegmentHeader()
Test: org.apache.commons.compress.archivers.sevenz.Coder.properties : byte[]
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse : boolean[]
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[])
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close()
Test: org.apache.commons.compress.archivers.sevenz.Coders
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(long)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.temp_charArray2d : char[][]
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector : byte[]
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks()
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue()
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore
Test: org.apache.commons.compress.changes.ChangeSet.changes : Set
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData()
Test: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(Feature,ZipArchiveEntry)
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.close()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.tmpbuf : byte[]
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongNameEntry()
Test: org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING : ZipEncoding
Test: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(int,boolean)
Test: org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.available()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader()
Test: org.apache.commons.compress.archivers.sevenz.Coders.CODER_MAP : Map<SevenZMethod, CoderBase>
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding : ZipEncoding
Test: org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.operatingSystem : int
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(String,long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(File)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.clone()
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object)
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream)
Test: org.apache.commons.compress.archivers.ArchiveInputStream.single : byte[]
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name : String
Test: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock()
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map<String, String>,String,byte,String)
Test: org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)
Test: org.apache.commons.compress.utils.Lists
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(boolean)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getGroupId()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(ZipLong)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(long)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(Object)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.FramedSnappyDialect(boolean,boolean)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin : long
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf : byte[]
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes()
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer : CircularBuffer
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(int)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag : boolean
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.isCompressed : boolean
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionDoneAt : long
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.uid : int
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.entry : ZipArchiveEntry
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.crc : CRC32
Test: org.apache.commons.compress.utils.Charsets
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.entriesRead : int
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength : long
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.isLink()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(byte[])
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.WHITEOUT : TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry)
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.seqToUnseq : byte[]
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(boolean)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory()
Test: org.apache.commons.compress.archivers.zip.ZipMethod.AES_ENCRYPTED : ZipMethod
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream
Test: org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet : List
Test: org.apache.commons.compress.compressors.xz.XZUtils
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size : long
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(SeekableByteChannel)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod(int)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength()
Test: org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byte[])
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf : byte[]
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(DataOutput)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished : boolean
Test: org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(int)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(CpioArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.dataOffset : long
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,byte)
Test: org.apache.commons.compress.archivers.zip.ZipMethod
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.canAcceptOptions(Object)
Test: org.apache.commons.compress.archivers.zip.X0014_X509Certificates.X0014_X509Certificates()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(Iterable<? extends SevenZMethodConfiguration>)
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink()
Test: org.apache.commons.compress.archivers.zip.ZipShort.clone()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(boolean)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7()
Test: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.getHeaderId()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer : byte[]
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(ExecutorService)
Test: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_EXEC : PERMISSION
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.offset : long
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(long)
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.close()
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names : HashMap<String, CpioArchiveEntry>
Test: org.apache.commons.compress.archivers.zip.NioZipEncoding.NioZipEncoding(Charset)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.CLRI : SEGMENT_TYPE
Test: org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.SOCKET : TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isCompressed()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init()
Test: org.apache.commons.compress.compressors.CompressorException
Test: org.apache.commons.compress.archivers.dump.DumpArchiveSummary
Test: org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String,boolean)
Test: org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(String)
Test: org.apache.commons.compress.compressors.FileNameUtil
Test: org.apache.commons.compress.utils.CountingInputStream
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[],boolean)
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(OutputStream)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode : int
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf : ByteBuffer
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.STANDARD : FramedSnappyDialect
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : AtomicBoolean
Test: org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Pack200Strategy)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[])
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.reset()
Test: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG : byte[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish()
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields()
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.getInputStream()
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Zip64Mode)
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.arj.MainHeader.Flags
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipShort
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(String)
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(Object)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.weight : int[]
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(long)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO : ZipEightByteInteger
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra()
Test: org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName : String
Test: org.apache.commons.compress.utils.CountingInputStream.getBytesRead()
Test: org.apache.commons.compress.archivers.arj.MainHeader
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map<String, String>,String,long,long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderInputStream : InputStream
Test: org.apache.commons.compress.archivers.zip.ZipLong.getBytes()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ScatterStatistics.ScatterStatistics(long,long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.longFileMode : int
Test: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close()
Test: org.apache.commons.compress.utils.Charsets.toCharset(Charset)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(InputStream,int)
Test: org.apache.commons.compress.utils.BoundedInputStream.read()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64 : boolean
Test: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_UNAVAILABLE : CachedAvailability
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getMode()
Test: org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.streams : List
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(String)
Test: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(SeekableByteChannel,long)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCount()
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB : COMPRESSION_TYPE
Test: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE : CachedAvailability
Test: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.headerOffset : long
Test: org.apache.commons.compress.utils.Sets
Test: org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(byte[],int)
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close()
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.count(int)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(Date)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.deflate()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.toString()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.available()
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName()
Test: org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.X0019_EncryptionRecipientCertificateList()
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.clearCode : int
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.expectedChecksum : long
Test: org.apache.commons.compress.utils.IOUtils
Test: org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator<? extends T>)
Test: org.apache.commons.compress.archivers.zip.ZipFile.CFH_SIG : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.ScatterGatherBackingStoreCompressor(Deflater,ScatterGatherBackingStore)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength()
Test: org.apache.commons.compress.utils.CountingInputStream.CountingInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.getCode()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(boolean)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(long)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.sevenz.StartHeader
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.TAPE : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize()
Test: org.apache.commons.compress.archivers.dump.Dirent
Test: org.apache.commons.compress.compressors.pack200.Pack200Strategy
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(Class)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Zip64Mode)
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCdata(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(ZipExtraField)
Test: org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(int)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.hasStreamIdentifier()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile()
Test: org.apache.commons.compress.utils.ArchiveUtils
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.crc32 : CRC32
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,String)
Test: org.apache.commons.compress.utils.CountingInputStream.read()
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)
Test: org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes()
Test: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.TempFileCachingStreamBridge()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(java.util.zip.ZipEntry)
Test: org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes : byte[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2 : SevenZMethod
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry : boolean
Test: org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(String)
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse()
Test: org.apache.commons.compress.compressors.bzip2.CRC.initialiseCRC()
Test: org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC : ZipLong
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_PPC_FILTER : SevenZMethod
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(int)
Test: org.apache.commons.compress.compressors.pack200.StreamBridge.stop()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime : ZipEightByteInteger
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly()
Test: org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.bytesRead : long
Test: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.X0017_StrongEncryptionHeader()
Test: org.apache.commons.compress.archivers.zip.ExplodingInputStream.read()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[])
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR : Feature
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_4 : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER : UnicodeExtraFieldPolicy
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(int)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag : boolean
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.compareTo(Simple8BitChar)
Test: org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>)
Test: org.apache.commons.compress.archivers.zip.Zip64Mode.Always : Zip64Mode
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(UnicodeExtraFieldPolicy)
Test: org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders : byte[][]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform : int
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod
Test: org.apache.commons.compress.archivers.zip.ZipMethod.DEFLATED : ZipMethod
Test: org.apache.commons.compress.utils.CountingOutputStream.bytesWritten : long
Test: org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING : ZipMethod
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set,ArchiveStreamProvider,TreeMap<String, ArchiveStreamProvider>)
Test: org.apache.commons.compress.archivers.zip.ZipShort.equals(Object)
Test: org.apache.commons.compress.utils.CountingOutputStream.write(byte[])
Test: org.apache.commons.compress.compressors.CompressorOutputStream
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(InputStream)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.recvDecodingTables_pos : byte[]
Test: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb : GeneralPurposeBit
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic : String
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING : ZipEncoding
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField()
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.close()
Test: org.apache.commons.compress.changes.ChangeSet.delete(String)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(boolean)
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(ArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf : ByteBuffer
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.oneByte : byte[]
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataLength()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getVolume()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(BZip2CompressorOutputStream.Data,int)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(Deflater)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveInputStream,ArchiveOutputStream)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize()
Test: org.apache.commons.compress.utils.Lists.newArrayList()
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder
Test: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.maj : long
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.X5455_ExtendedTimestamp()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName : String
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipFile.getEntries()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(Date)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(Date)
Test: org.apache.commons.compress.archivers.sevenz.BindPair
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,int,String)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long)
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncode(String)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished : boolean
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.inode : long
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.nlink : long
Test: org.apache.commons.compress.changes.ChangeSet.deleteDir(String)
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.HEADER_MAGIC : byte[]
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(int)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING : ZipMethod
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)
Test: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.InMemoryCachingStreamBridge()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode()
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(boolean)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.skip(long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.med3(byte,byte,byte)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary : DumpArchiveSummary
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.BITS : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA : SevenZMethod
Test: org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.gid : int
Test: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature : byte[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(String,long)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.compressors.CompressorException.CompressorException(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(long)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(File,Pack200Strategy)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeTrailer()
Test: org.apache.commons.compress.changes.Change.targetFile()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
Test: org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2 : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged : boolean
Test: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.encode(String)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF : boolean
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime()
Test: org.apache.commons.compress.changes.ChangeSet.addAddition(Change)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime : ZipEightByteInteger
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(TYPE)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(DataOutput)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(int)
Test: org.apache.commons.compress.utils.CountingInputStream.count(long)
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream()
Test: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID : ZipShort
Test: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory()
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION : Feature
Test: org.apache.commons.compress.utils.ArchiveUtils.sanitize(String)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.utils.BitInputStream.bitsCachedSize : int
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON : CompressorStreamFactory
Test: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(DataOutput)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead()
Test: org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.BLKDEV : TYPE
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(InputStream,long)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders()
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ : UnparseableExtraField
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(String)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.crc : long
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(BigInteger)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(DataInputStream)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(long)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes : Map<SevenZArchiveEntry, long[]>
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checksig(byte[],byte[])
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.changes.Change.Change(String,int)
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters()
Test: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.decode(byte[])
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,short,int,String)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord()
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE : CachedAvailability
Test: org.apache.commons.compress.archivers.arj.MainHeader.MainHeader()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG : byte[]
Test: org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()
Test: org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(ZipArchiveEntry,OffsetEntry,int)
Test: org.apache.commons.compress.archivers.zip.BinaryTree.BinaryTree(int)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_bigDone : boolean[]
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.bigNumberMode : int
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveException
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.X7875_NewUnix()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry : ArArchiveEntry
Test: org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.CAFE_DOOD : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment : String
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(Map<String, String>)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.getId()
Test: org.apache.commons.compress.archivers.sevenz.BindPair.BindPair()
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode()
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getHeaderId()
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.version : int
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inf : Inflater
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer : ByteBuffer
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(int)
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(SevenZMethod,Object)
Test: org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.markSupported()
Test: org.apache.commons.compress.utils.BitInputStream.MASKS : long[]
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(boolean)
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.pushEncodedChar(ByteBuffer,char)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.storeNum : AtomicInteger
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.DIRECTORY : TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type : TYPE
Test: org.apache.commons.compress.utils.Lists.newArrayList(Iterator<? extends E>)
Test: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.BZIP2Decoder()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(GeneralPurposeBit)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.DefaultBackingStoreSupplier()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(TarArchiveEntry)
Test: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(String,String,int,TYPE)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close()
Test: org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded : Zip64Mode
Test: org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.mtfFreq : int[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(String)
Test: org.apache.commons.compress.archivers.zip.ZipLong.getValue()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[])
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(Map<String, String>)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem()
Test: org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(ZipArchiveEntry)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.SIG_LENGTH : int
Test: org.apache.commons.compress.archivers.dump.Dirent.getParentIno()
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream)
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.getTableSize()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry()
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.oneByte : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState : int
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent()
Test: org.apache.commons.compress.archivers.jar.JarArchiveInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map<String, String>)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions : Set
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(String)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink()
Test: org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.UnrecognizedFormatException()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getZipArchiveEntry()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.close()
Test: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(byte[])
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.Entry.hashCode()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)
Test: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoder()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.LINK : TYPE
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decode(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf : byte[]
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit : int[][]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.localDataStart : long
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String,boolean)
Test: org.apache.commons.compress.archivers.sevenz.StartHeader.StartHeader()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.contentMethods : Iterable<? extends SevenZMethodConfiguration>
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ONE : byte[]
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.bufUsed : int
Test: org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader()
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(Checksum,InputStream,long,long)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets : Map<ZipArchiveEntry, Long>
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN : ZipMethod
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closed : boolean
Test: org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int)
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(DataInputStream)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[])
Test: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.jarMarkerAdded : boolean
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated()
Test: org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(byte[])
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(boolean)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar : int
Test: org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getHeaderId()
Test: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(boolean)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close()
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(ZipEightByteInteger)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize : int
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders : Map<String, String>
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS : UnicodeExtraFieldPolicy
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(boolean)
Test: org.apache.commons.compress.changes.ChangeSetResults
Test: org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_copy : int[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.causedUseOfZip64 : boolean
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures : List<Future>
Test: org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.close()
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.entryOffset : long
Test: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256Decoder()
Test: org.apache.commons.compress.changes.Change.isReplaceMode()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_runningOrder : int[]
Test: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.noExtraFields : ZipExtraField[]
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(long)
Test: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG : ZipShort
Test: org.apache.commons.compress.archivers.zip.CircularBuffer.put(int)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(Date)
Test: org.apache.commons.compress.archivers.dump.ShortFileException.ShortFileException()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(String)
Test: org.apache.commons.compress.archivers.zip.ZipFile.getEntries(String)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(BZip2CompressorOutputStream.Data,int)
Test: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(int)
Test: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(String,byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry
Test: org.apache.commons.compress.archivers.zip.BinaryTree.read(BitStream)
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte)
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.clone()
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.BZLIB : COMPRESSION_TYPE
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO : COMPRESSION_TYPE
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)
Test: org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.X0015_CertificateIdForFile()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier)
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.close()
Test: org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod)
Test: org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(String)
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.getValue()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,byte,boolean)
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getUnicodeName()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_X86_FILTER : SevenZMethod
Test: org.apache.commons.compress.compressors.CompressorInputStream.count(long)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.isDirectory()
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.link : String
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.hitCentralDirectory : boolean
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T : int[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(ZipArchiveEntry)
Test: org.apache.commons.compress.compressors.pack200.StreamBridge.getInput()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(ZipEightByteInteger)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.PKWARE_IMPLODING : ZipMethod
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.crc : CRC32
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(Object)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_READ : PERMISSION
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending : Map<Integer, DumpArchiveEntry>
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(Date)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate()
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON : ArchiveStreamFactory
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[])
Test: org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(DataOutput)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[])
Test: org.apache.commons.compress.utils.BitInputStream.bitsCached : long
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,String)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode()
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Map<String, String>)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[])
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf : byte[]
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(int)
Test: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(byte[],int)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex : int
Test: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummyByte : boolean
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset : long
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.BCJDecoder(FilterOptions)
Test: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getType()
Test: org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish()
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream)
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_WRITE : PERMISSION
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder)
Test: org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods.Methods()
Test: org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(String)
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(Coder,InputStream)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(BZip2CompressorOutputStream.Data,int)
Test: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.getInputView()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(File)
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.reset()
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(boolean)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.perform(ZipFile,ArchiveOutputStream)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)
Test: org.apache.commons.compress.archivers.ArchiveException
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(String)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(byte[],int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend()
Test: org.apache.commons.compress.utils.CRC32VerifyingInputStream
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(Coder)
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder
Test: org.apache.commons.compress.changes.Change
Test: org.apache.commons.compress.archivers.zip.Zip64Mode
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream
Test: org.apache.commons.compress.changes.ChangeSet.getChanges()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)
Test: org.apache.commons.compress.changes.ChangeSetResults.addedFromStream : List
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf : byte[]
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.uid : long
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(Date)
Test: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor : boolean
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read()
Test: org.apache.commons.compress.archivers.zip.ZipFile.entries : List
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(InputStream,boolean)
Test: org.apache.commons.compress.compressors.deflate.DeflateParameters
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readLittleEndianInt(DataInputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode : long
Test: org.apache.commons.compress.archivers.zip.ZipLong.AED_SIG : ZipLong
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID : ZipShort
Test: org.apache.commons.compress.archivers.sevenz.Archive
Test: org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long)
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE : SevenZMethod
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory()
Test: org.apache.commons.compress.archivers.zip.ZipShort.getValue()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String)
Test: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[])
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer : byte[]
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive)
Test: org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.zip.ZipMethod.ZipMethod()
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.EMPTY : byte[]
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders()
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(InputStream)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(long)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator()
Test: org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(byte)
Test: org.apache.commons.compress.archivers.zip.ZipLong
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK()
Test: org.apache.commons.compress.utils.IOUtils.toByteArray(InputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(ZipArchiveEntry)
Test: org.apache.commons.compress.utils.BitInputStream.close()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Date)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream
Test: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C
Test: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength()
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.UnparseableExtraField(int)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames()
Test: org.apache.commons.compress.utils.FlushShieldFilterOutputStream.flush()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.heap : int[]
Test: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.X0016_CertificateIdForCentralDirectory()
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(char[])
Test: org.apache.commons.compress.utils.ServiceLoaderIterator.hasNext()
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,File,String)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(ZipLong)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.ADDR : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(byte[],ZipEncoding)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflateBuffer : byte[]
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min : long
Test: org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean)
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier)
Test: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandCopy(long,int)
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.zip.JarMarker.NO_BYTES : byte[]
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER : SevenZMethod
Test: org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header : TapeSegmentHeader
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.mode : int
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry
Test: org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(long)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(InputStream)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId : long
Test: org.apache.commons.compress.PasswordRequiredException.PasswordRequiredException(String)
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSize()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(int)
Test: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.close()
Test: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getNameCRC32()
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[])
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(File)
Test: org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.chksum : long
Test: org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord()
Test: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod()
Test: org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int)
Test: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(int)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(boolean)
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBuffer(ByteBuffer,int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry : ByteArrayInputStream
Test: org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[])
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode : Zip64Mode
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream
Test: org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten : long
Test: org.apache.commons.compress.utils.CountingOutputStream
Test: org.apache.commons.compress.utils.BitInputStream.readBits(int)
Test: org.apache.commons.compress.archivers.arj.LocalFileHeader.LocalFileHeader()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_EXEC : PERMISSION
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno()
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll : int[]
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closed : boolean
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(DataOutput)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime()
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,String)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(ZipEightByteInteger)
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.getInputStream()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(int)
Test: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File,byte[])
Test: org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_rfreq : int[][]
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getHeaderId()
Test: org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(String)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.haveUnclosedEntry : boolean
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName()
Test: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefixesLength()
Test: org.apache.commons.compress.archivers.ArchiveInputStream.count(int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(boolean)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime : ZipEightByteInteger
Test: org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.DD : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.filesize : long
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(boolean)
Test: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength()
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary()
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.ZipFileIterator(ZipFile)
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders()
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(String)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String)
Test: org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(String)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int)
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode : long
Test: org.apache.commons.compress.archivers.dump.ShortFileException
Test: org.apache.commons.compress.archivers.zip.BitStream.nextBits(int)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int)
Test: org.apache.commons.compress.compressors.CompressorInputStream.getBytesRead()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(int)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders()
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.cdata : byte[]
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentInputStream : InputStream
Test: org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream)
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.endReached : boolean
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader : LocalFileHeader
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(int)
Test: org.apache.commons.compress.changes.Change.getInput()
Test: org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,short)
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int)
Test: org.apache.commons.compress.utils.IOUtils.SKIP_BUF : byte[]
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[])
Test: org.apache.commons.compress.archivers.zip.Zip64Mode.Zip64Mode()
Test: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(byte[],byte[])
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int)
Test: org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(InputStream,boolean)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int)
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater()
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String)
Test: org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object)
Test: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(Object)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.STICKY : PERMISSION
Test: org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(OutputStream)
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(ZipEightByteInteger)
Test: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting()
Test: org.apache.commons.compress.changes.ChangeSet
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(ArArchiveEntry)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level : int
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.usesChecksumWithCompressedChunks()
Test: org.apache.commons.compress.archivers.zip.JarMarker.getHeaderId()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory()
Test: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closed : boolean
Test: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.CopyDecoder()
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator()
Test: org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(String)
Test: org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(String)
Test: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)
Test: org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(String)
Test: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32()
Test: org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(String)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.fill(long,long,char)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(int)
Test: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String,boolean,boolean)
Test: org.apache.commons.compress.compressors.bzip2.BlockSort.ftab : int[]
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber()
Test: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData()
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(String,long,int,int,int,long)
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(Class<?>...)
Test: org.apache.commons.compress.archivers.zip.ZipFile
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(long)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_READ : PERMISSION
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items : Queue
Test: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream()
Test: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.addDummyByte : boolean
Test: org.apache.commons.compress.changes.ChangeSetResults.getDeleted()
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selectorMtf : byte[]
Test: org.apache.commons.compress.compressors.z.ZCompressorInputStream.totalCodesRead : long
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName()
Test: org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(int)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(int)
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream)
Test: org.apache.commons.compress.archivers.dump.Dirent.Dirent(int,int,int,String)
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ArchiveEntry,boolean)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock()
Test: org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder()
Test: org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available()
Test: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.clone()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE : SEGMENT_TYPE
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.version : String
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mtime : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(boolean)
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(ScatterGatherBackingStore,StreamCompressor)
Test: org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE : Pack200Strategy
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy()
Test: org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY : Pack200Strategy
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fileBytesWritten : long
Test: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(long)
Test: org.apache.commons.compress.compressors.gzip.GzipUtils
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(InputStream)
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(String)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO : byte[]
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.inUse : boolean[]
Test: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.appendSurrogate(ByteBuffer,char)
Test: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode()
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun()
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(String)
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream()
Test: org.apache.commons.compress.utils.BoundedInputStream
Test: org.apache.commons.compress.changes.ChangeSet.addDeletion(Change)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String)
Test: org.apache.commons.compress.changes.ChangeSetResults.deleted : List
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector : byte[]
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode)
Test: org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)
Test: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getHeaderId()
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.getClearCode()
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse()
Test: org.apache.commons.compress.archivers.zip.ZipShort.getBytes()
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.SZ_SIGNATURE : byte[]
Test: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(char)
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode()
Test: org.apache.commons.compress.utils.ServiceLoaderIterator.next()
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf : byte[]
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[])
Test: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(Object)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED : ZipMethod
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG : byte[]
Test: org.apache.commons.compress.archivers.zip.AsiExtraField.getMode()
Test: org.apache.commons.compress.archivers.zip.JarMarker.JarMarker()
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended()
Test: org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)
Test: org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[])
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead()
Test: org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()
Test: org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates : Certificate[]
Test: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry()
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[])
Test: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs()
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getUserId()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse()
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(ArchiveEntry)
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse()
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE : UnicodeExtraFieldPolicy
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int)
Test: org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int)
Test: org.apache.commons.compress.archivers.zip.BitStream
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(Object)
Test: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream)
Test: org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(OutputStream)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(OutputStream,DeflateParameters)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.getHeaderId()
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(long)
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(Object)
Test: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.LZMA2Decoder()
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncodeChar(char)
Test: org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet()
Test: org.apache.commons.compress.archivers.zip.ZipLong.hashCode()
Test: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod()
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Pack200Strategy,Map<String, String>)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE : ZipShort
Test: org.apache.commons.compress.compressors.lzw.LZWInputStream.getCodeSize()
Test: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[])
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int)
Test: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(OutputStream)
Test: org.apache.commons.compress.compressors.FileNameUtil.FileNameUtil(Map<String, String>,String)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory()
Test: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime()
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderIndex : int
Test: org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf : ByteBuffer
Test: org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries()
Test: org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG : ZipLong
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName : byte[]
Test: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encode(String)
Test: org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(long)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,String,long)
Test: org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry : long
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(Date)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream
Test: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(ExecutorService,ScatterGatherBackingStoreSupplier)
Test: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3 : ZipMethod
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETGUI : PERMISSION
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.CHRDEV : TYPE
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.peek()
Test: org.apache.commons.compress.archivers.sevenz.Folder
Test: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(String)
Test: org.apache.commons.compress.archivers.StreamingNotSupportedException.getFormat()
Test: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataLength()
Test: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.oneByte : byte[]
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream
Test: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)
Test: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(File,String)
Test: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int)
Test: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra : UnparseableExtraFieldData
Test: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Pack200Strategy,Map<String, String>)
Test: org.apache.commons.compress.archivers.zip.X000A_NTFS
Test: org.apache.commons.compress.compressors.CompressorInputStream.bytesRead : long
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.flush()
Test: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream
Test: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset()
Test: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable)
Test: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders()
Test: org.apache.commons.compress.changes.ChangeSet.ChangeSet()
Test: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag : boolean
Test: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory()
Test: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(InputStream,boolean)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice()
Test: org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_fave : int[]
Test: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry()
Test: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(long)
Test: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc : CRC
Test: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File)
Test: org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(String)
Test: org.apache.commons.compress.archivers.dump.TapeInputStream.bytesRead : long
Test: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream)
Test: org.apache.commons.compress.utils.Charsets.UTF_8 : Charset
Test: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setName(String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.$VALUES : SEGMENT_TYPE[]
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.perm : int[][]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongLinkEntry()
Comp: org.apache.commons.compress.archivers.zip.Zip64RequiredException.getEntryTooBigMessage(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.value : BigInteger
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.reset()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.skipBlock()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf : byte[]
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getMode()
Comp: org.apache.commons.compress.archivers.zip.ScatterStatistics.compressionElapsed : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.encoding : String
Comp: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[])
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fmin(int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionMadeBy : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(int,int)
Comp: org.apache.commons.compress.compressors.gzip.GzipUtils.getCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$302(ZipArchiveOutputStream.CurrentEntry,boolean)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.hostOS : int
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.method : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper()
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.zlibHeader : boolean
Comp: org.apache.commons.compress.compressors.xz.XZUtils.isCompressedFilename(String)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.closed : boolean
Comp: org.tukaani.xz.XZOutputStream.flush()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.firstrec : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createUnicodeExtraFields : UnicodeExtraFieldPolicy
Comp: org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf : ByteBuffer
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCrc(boolean)
Comp: org.apache.commons.compress.changes.Change.type()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,short)
Comp: org.apache.commons.compress.utils.BoundedInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.1.{...}
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsWritten : int
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_bigDone : boolean[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$408(DumpArchiveEntry.TapeSegmentHeader)
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.getHeaderId()
Comp: org.apache.commons.compress.compressors.bzip2.Rand.rNums(int)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.getCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setCreateUnicodeExtraFields(ZipArchiveOutputStream.UnicodeExtraFieldPolicy)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.file : File
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(ByteArrayOutputStream,int,int,int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen()
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.Simple8BitChar(byte,char)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Utils.fileNameUtil : FileNameUtil
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry()
Comp: org.apache.commons.compress.archivers.dump.ShortFileException
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.parse(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getPayloadStream()
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getName()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.LZWInputStream(InputStream,ByteOrder)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFilesInfo(DataOutput)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsBuff : int
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.1.{...}
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,int,String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$202(ZipFile.OffsetEntry,long)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.flush()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entryFormat : short
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.copyStream(InputStream,ArchiveOutputStream,ArchiveEntry)
Comp: org.tukaani.xz.LZMA2Options.LZMA2Options()
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.creationDate : long
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.bytesRemaining : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.written : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(InputStream)
Comp: org.apache.commons.compress.changes.Change.entry : ArchiveEntry
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.count(int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.characters : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.nlink : long
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.nameCRC32 : long
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.UnparseableExtraFieldData()
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStore.closeForWriting()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasLastModifiedDate : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setVersionMadeBy(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.isCompressed()
Comp: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map)
Comp: org.apache.commons.compress.archivers.zip.BinaryTree.decode(InputStream,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.ZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(long,int,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.extraFields : ZipExtraField[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMaj(long)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setType(DumpArchiveEntry.TYPE)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getSlidingDictionarySize()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveException.initCause(Throwable)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedBlockCRC : int
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.DONT_CACHE : CachedAvailability
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.getCachedLZMAAvailability()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE[]
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.summary : DumpArchiveSummary
Comp: org.apache.commons.compress.archivers.zip.ZipShort
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap.packStreamOffsets : long[]
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCreationDate()
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items : Queue
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.implementations : Map
Comp: org.apache.commons.compress.archivers.zip.ZipFile.3.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod : int[]
Comp: org.apache.commons.compress.changes.ChangeSet.getChanges()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.preClose()
Comp: org.tukaani.xz.XZOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.evaluateType(byte[])
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.createArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.inode : long
Comp: org.apache.commons.compress.archivers.arj.MainHeader.Flags
Comp: org.apache.commons.compress.compressors.bzip2.CRC.getFinalCRC()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.dump.Dirent.getName()
Comp: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UPATH_ID : ZipShort
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.ExplodingInputStream(int,int,InputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.firstAttempt : boolean
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.volume : int
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem : boolean
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeArchiveHeader()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.fill(long,long,char)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeHeader(DataOutput)
Comp: org.apache.commons.compress.compressors.FileNameUtil.isCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.clearEntries()
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.read()
Comp: org.apache.commons.compress.utils.CountingOutputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.zip.BinaryTree.addLeaf(int,int,int,int)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream
Comp: org.tukaani.xz.XZ.HEADER_MAGIC : byte[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.entryOffset : long
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge(OutputStream)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.bits : BitStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFields()
Comp: org.apache.commons.compress.compressors.CompressorException.CompressorException(String,Throwable)
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.compressionLevel : int
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useUTF8ForNames(boolean)
Comp: org.tukaani.xz.LZMAOutputStream.LZMAOutputStream(OutputStream,LZMA2Options,long)
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainQSort3(BZip2CompressorOutputStream.Data,int,int,int,int)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getWindowsAttributes()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getHoles()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBuf : byte[]
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.INODE : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.last : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.entry : ZipArchiveEntry
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry)
Comp: org.apache.commons.compress.utils.CountingInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,int,String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.find(int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.encoding : String
Comp: org.apache.commons.compress.archivers.zip.ZipEncoding.canEncode(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getChksum()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.initBlock()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit1_accessTimePresent()
Comp: org.apache.commons.compress.archivers.zip.X0014_X509Certificates.X0014_X509Certificates()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_count : int
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader
Comp: org.apache.commons.compress.changes.Change.targetFile : String
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.base : int[][]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsR(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finish()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.TapeSegmentHeader()
Comp: org.apache.commons.compress.archivers.zip.Zip64Mode.Never : Zip64Mode
Comp: char[][]
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.method : SevenZMethod
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.input : InputStream
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseOctal(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setUnixMode(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checksig(byte[],byte[])
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMaj()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.WHITEOUT : TYPE
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte,int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.isDeletedLater(Set,ArchiveEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.verify(byte[])
Comp: org.apache.commons.compress.compressors.FileNameUtil.uncompressSuffix : Map
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.scatterDoneAt : long
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.getInput()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature,ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.peek()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selectorMtf : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.ENHANCED_DEFLATED : ZipMethod
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.lastChapter : int
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.submit(Callable)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.inf : Inflater
Comp: char[]
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.1.{...}
Comp: org.apache.commons.compress.archivers.zip.UnicodePathExtraField
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.cachedLZMAAvailability : CachedAvailability
Comp: org.apache.commons.compress.archivers.dump.Dirent.ino : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int)
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getUnixMode()
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentInputStream : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.zip.BitStream.readBits(int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.currentEntry : ArArchiveEntry
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.service : Class
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.tt : int[]
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.mark(int)
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.close()
Comp: org.apache.commons.compress.archivers.zip.ScatterStatistics.ScatterStatistics(long,long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getEntry(String)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeLength : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setPlatform(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.raw : TapeInputStream
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.DIRECTORY : TYPE
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.crc : long
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders()
Comp: org.apache.commons.compress.archivers.dump.InvalidFormatException.InvalidFormatException()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEntryEncoding(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit2_createTimePresent()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setInode(long)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader()
Comp: org.apache.commons.compress.archivers.dump.Dirent.parentIno : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names : Map
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCodeFirstChar : byte
Comp: org.apache.commons.compress.archivers.zip.JarMarker
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getInternalAttributes()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.DEFLATE : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getInputStream(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encryptionFlag : boolean
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T : int[]
Comp: org.apache.commons.compress.archivers.StreamingNotSupportedException.getFormat()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closed : boolean
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.zipArchiveEntryRequest : ZipArchiveEntryRequest
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.flags : int
Comp: org.apache.commons.compress.archivers.zip.ZipShort.putShort(int,byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(ZipArchiveEntry)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.ZipFileIterator(ZipFile)
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.getBytesRead()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.volume : int
Comp: org.apache.commons.compress.archivers.zip.BitStream.BitStream(InputStream)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getHeaderPadCount()
Comp: org.apache.commons.compress.archivers.StreamingNotSupportedException.StreamingNotSupportedException(String)
Comp: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.deflate(InputStream,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read()
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.getClearCode()
Comp: org.apache.commons.compress.archivers.sevenz.Archive.folders : Folder[]
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS
Comp: org.apache.commons.compress.utils.BoundedInputStream.bytesRemaining : long
Comp: org.apache.commons.compress.utils.BitInputStream.byteOrder : ByteOrder
Comp: org.apache.commons.compress.archivers.sevenz.Folder.crc : long
Comp: org.apache.commons.compress.archivers.zip.ZipFile.archive : SeekableByteChannel
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.modificationTime : long
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.incrementCodeSize()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.createHuffmanDecodingTables(int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[])
Comp: org.apache.commons.compress.utils.IOUtils
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCrcValue(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawName : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkNewFormat()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDevice(long)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(int[],byte[],int)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.addDecoder(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.resetPreviousCode()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.BCJDecoder(FilterOptions)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,String)
Comp: org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[])
Comp: org.apache.commons.compress.compressors.bzip2.Rand.RNUMS : int[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_IA64_FILTER : SevenZMethod
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setMode(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Utils.isCompressedFilename(String)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array()
Comp: org.apache.commons.compress.archivers.dump.Dirent
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.ChecksumVerifyingInputStream(Checksum,InputStream,long,long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$002(ZipArchiveOutputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$400(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.name : String
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getSize()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$202(ZipArchiveInputStream.CurrentEntry,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.subStreamsInfo : SubStreamsInfo
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.isUsed : boolean[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.COPY : SevenZMethod
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(Class)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.hashCode()
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.size : int
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.writeDeflated(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.reset()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes()
Comp: org.apache.commons.compress.changes.Change
Comp: org.apache.commons.compress.utils.CountingOutputStream.out : OutputStream
Comp: org.tukaani.xz.XZInputStream
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.compressedSize : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDeviceMin()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE
Comp: org.apache.commons.compress.archivers.jar.JarArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyJavaTime()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileCTimes(DataOutput)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.writeOut(byte[],int,int)
Comp: org.tukaani.xz.DeltaOptions.DeltaOptions(int)
Comp: org.apache.commons.compress.compressors.FileNameUtil.shortestCompressedSuffix : int
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.hasStreamIdentifier()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CFH_SIG : byte[]
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSingleCodec(SevenZMethodConfiguration,OutputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.recvDecodingTables_pos : byte[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(TarArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.XZCompressorInputStream(InputStream,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCentralDirectoryExtra(byte[])
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$002(DumpArchiveEntry.TapeSegmentHeader,DumpArchiveConstants.SEGMENT_TYPE)
Comp: org.apache.commons.compress.archivers.zip.BinaryTree
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.modifyTime : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.starSparse : boolean
Comp: org.apache.commons.compress.compressors.pack200.Pack200Strategy.IN_MEMORY : Pack200Strategy
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupId : long
Comp: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord(byte[])
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.accessTime : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.checkIfNeedsZip64(Zip64Mode)
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsAsProperties(Object)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.channel : SeekableByteChannel
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCompressedSize(long)
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.getCompressionLevel()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder,InputStream)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.getNumberOfShannonFanoTrees()
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures : List
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[])
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.readIndex : int
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_4 : ZipMethod
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.getValue()
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.fileNameUtil : FileNameUtil
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCentralDirectoryData()
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(char[])
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.gpb : GeneralPurposeBit
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.useUTF8Flag : boolean
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finish()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.writeCounted(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryEnd()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],boolean)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues7()
Comp: org.apache.commons.compress.compressors.gzip.GzipUtils.isCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.packPos : long
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesDataDescriptor()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$402(ZipArchiveOutputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.available()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getSize()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useStrongEncryption(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.payloadSupplier : InputStreamSupplier
Comp: org.apache.commons.compress.archivers.zip.ZipLong.putLong(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.ftab : int[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream
Comp: org.apache.commons.compress.archivers.sevenz.BindPair.outIndex : long
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.unicodeName : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptionsFromCoder(Coder,InputStream)
Comp: org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet : List
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.in : BitInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.AES_ENCRYPTED : ZipMethod
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(byte[],ZipEncoding)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setTime(long)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.2.{...}
Comp: org.apache.commons.compress.archivers.dump.Dirent.name : String
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setVersionRequired(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getName()
Comp: org.tukaani.xz.LZMA2Options.setLcLp(int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.name()
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.isDirectory()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMaj()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getFormat()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Pack200Strategy,Map)
Comp: org.apache.commons.compress.archivers.sevenz.Coder.properties : byte[]
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.createTime : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.DD : byte[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.checkSumOK : boolean
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.vswap(int[],int,int,int)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders()
Comp: org.apache.commons.compress.archivers.zip.X0014_X509Certificates
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmin : long
Comp: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessTime(ZipLong)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(DumpArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.createExtraField(ZipShort)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.fileSpecPosition : int
Comp: org.apache.commons.compress.archivers.sevenz.Archive.packCrcsDefined : BitSet
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer : ByteBuffer
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setGID(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory()
Comp: org.apache.commons.compress.archivers.StreamingNotSupportedException
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutInt(int)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeLocalFileDataData(ZipExtraField[])
Comp: org.apache.commons.compress.archivers.zip.ZipFile
Comp: org.apache.commons.compress.archivers.arj.MainHeader.lastChapter : int
Comp: org.apache.commons.compress.archivers.sevenz.Folder.totalOutputStreams : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.checkOldFormat()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getPrefixesLength()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.create(int,ScatterGatherBackingStore)
Comp: org.apache.commons.compress.compressors.FileNameUtil.longestCompressedSuffix : int
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FIFO : TYPE
Comp: org.apache.commons.compress.archivers.arj.MainHeader.arjProtectionFactor : int
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.groupId : int
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(byte[])
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.SOCKET : TYPE
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BZIP2 : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.ZipShort.getBytes(int)
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.setModificationTime(long)
Comp: org.apache.commons.compress.changes.ChangeSet.addAddition(Change)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserName(String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setSize(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.name : String
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.setMode(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.allowStoredEntriesWithDataDescriptor : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.current : CurrentEntry
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.bigToLong(BigInteger)
Comp: org.tukaani.xz.XZInputStream.XZInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders()
Comp: org.apache.commons.compress.compressors.CompressorInputStream.count(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.flush()
Comp: org.apache.commons.compress.compressors.CompressorStreamProvider
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability[]
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.reverse(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.size : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$100(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.hostOS : int
Comp: org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForOutStream(int)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_UNAVAILABLE : CachedAvailability
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.isClosed : boolean
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encode(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sentMTFValues4_inUse16 : boolean[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderType()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSize()
Comp: org.apache.commons.compress.archivers.zip.ZipShort.hashCode()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.$assertionsDisabled : boolean
Comp: org.apache.commons.compress.archivers.dump.Dirent.type : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCreationDate()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(String)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.os : OutputStream
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.byId(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.relativeHeaderOffset : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForNonAsciiNames : boolean
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextZipEntry()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long,String)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.compressedSize : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(long)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_X86_FILTER : SevenZMethod
Comp: org.apache.commons.compress.changes.ChangeSet.delete(String)
Comp: org.apache.commons.compress.utils.IOUtils.toByteArray(InputStream)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(Date)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.supportsEncryptionOf(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(InputStream,Coders.1)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders()
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.close()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMin(long)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.readNextCode()
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.withZlibHeader()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSimpleName()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeArchiveEntry()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.ll8 : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.internalAttributes : int
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.modifyTime : ZipLong
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.count(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileATimes(DataOutput)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.distanceTree : BinaryTree
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.dialect : FramedSnappyDialect
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.expandCodeToOutputStack(int,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleZip64Extra(ZipArchiveEntry,long,boolean)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.FILE : TYPE
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecodingStream()
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.PKWareExtraHeader(ZipShort)
Comp: org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile.X0015_CertificateIdForFile()
Comp: org.apache.commons.compress.utils.FlushShieldFilterOutputStream.FlushShieldFilterOutputStream(OutputStream)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.inUncompressedChunk : boolean
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.endReached : boolean
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readSize()
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.CoderBase(Class[])
Comp: org.apache.commons.compress.compressors.FileNameUtil.longestUncompressedSuffix : int
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.hasNext()
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExternalAttributes()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.password : byte[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongGroupId()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isSparseRecord(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[])
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.namebuffer : byte[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,int)
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getCodeSize()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.getClearCode()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setAccessTime(Date)
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.compressionLevel : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedSize(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.noExtraFields : ZipExtraField[]
Comp: org.apache.commons.compress.compressors.pack200.Pack200Strategy
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.this$0 : SevenZOutputFile
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.getNTRec()
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField(String,byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.create(ScatterGatherBackingStore)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$400(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.closeArchiveEntry()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entrySize : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMergedFields()
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.readTimeAttr(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(byte[])
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipUtils
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI()
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fpop(int)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest)
Comp: org.apache.commons.compress.archivers.dump.UnrecognizedFormatException
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry[]
Comp: org.apache.commons.compress.parallel.InputStreamSupplier
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp
Comp: org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.startedAt : long
Comp: org.apache.commons.compress.archivers.sevenz.BindPair.inIndex : long
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort(BZip2CompressorOutputStream.Data,int)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.numberOptionOrDefault(Object,int)
Comp: org.apache.commons.compress.compressors.bzip2.CRC.crc32Table : int[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.size : long
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_1 : ZipMethod
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.level : int
Comp: org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.combinedCRC : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.level : int
Comp: org.apache.commons.compress.compressors.CompressorException
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$300(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.getCodeSize()
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.key : int
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyTime(ZipLong)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.longToBig(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.versionNeededToExtract(int,boolean)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.setDecompressConcatenated(boolean)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream
Comp: org.tukaani.xz.LZMA2Options.getOutputStream(FinishableOutputStream)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.sourcePayloadLength : long
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.copy(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.externalAttributes : long
Comp: org.apache.commons.compress.archivers.arj.MainHeader.archiverVersionNumber : int
Comp: org.apache.commons.compress.changes.ChangeSet
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.2.{...}
Comp: org.apache.commons.compress.archivers.zip.JarMarker.NULL : ZipShort
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Map)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSort()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedSize()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.initializeTables(int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.current : ZipArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.DefaultBackingStoreSupplier(ParallelScatterZipCreator.1)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.versionRequired : int
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseOctalOrBinary(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getMode()
Comp: org.tukaani.xz.FinishableWrapperOutputStream.FinishableWrapperOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.Flags
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getSize()
Comp: org.tukaani.xz.XZOutputStream
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_dd : int[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[])
Comp: org.apache.commons.compress.compressors.FileNameUtil.shortestUncompressedSuffix : int
Comp: org.apache.commons.compress.compressors.pack200.Pack200Strategy.TEMP_FILE : Pack200Strategy
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncode(String)
Comp: org.apache.commons.compress.archivers.StreamingNotSupportedException.format : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getRawName()
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit0_modifyTimePresent : boolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkFlag : byte
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isAntiItem()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.haveUnclosedEntry : boolean
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.lengthTree : BinaryTree
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.setGroupId(int)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.flush()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CFH : byte[]
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.Methods
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.dirFlag : boolean
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.accessDate : long
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.getTotalBytesWritten()
Comp: org.tukaani.xz.LZMA2Options.setPb(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(String)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long,byte[],int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.block : byte[]
Comp: org.apache.commons.compress.utils.Lists.newArrayList(Iterator)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStack : byte[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Map,String,long,long)
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.encoding : Simple8BitZipEncoding
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.headerSize : int
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.DeflateCompressorInputStream(InputStream,DeflateParameters)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding,boolean)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.cachedXZAvailability : CachedAvailability
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.securityVersion : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.generation : int
Comp: org.apache.commons.compress.utils.IOUtils.skip(InputStream,long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LFH_SIG : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.encoding : String
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setExtra(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.getUnicodeStringIfOriginalMatches(AbstractUnicodeExtraField,byte[])
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.ntrec : int
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.expectedChecksum : long
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.ArArchiveOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipEncoding.encode(String)
Comp: org.apache.commons.compress.archivers.zip.Zip64Mode[]
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,File,String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.rawFlag : int
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.isUTF8(String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.count(int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf : byte[]
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish()
Comp: org.apache.commons.compress.changes.ChangeSetResults.getAddedFromStream()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(BigInteger)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$408(SevenZOutputFile)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.packSizes : long[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.values()
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap.fileFolderIndex : int[]
Comp: org.apache.commons.compress.archivers.ArchiveException
Comp: org.apache.commons.compress.utils.CountingOutputStream.getBytesWritten()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.uid : int
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataLength()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.data : Data
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert64(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[],int)
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.LZMACompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(String,String)
Comp: org.apache.commons.compress.archivers.sevenz.Folder.Folder()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String,boolean,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets : Map
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.blockMode : boolean
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long)
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.ServiceLoaderIterator(Class,ClassLoader)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.init(boolean)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatUnsignedOctalString(long,byte[],int,int)
Comp: org.apache.commons.compress.utils.Iterators
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.writtenToOutputStreamForLastEntry : long
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getFlags()
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryBigInteger(byte[],int,int,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getGeneralPurposeBits(int,boolean)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.getBytesWritten()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue(byte[],int)
Comp: org.apache.commons.compress.archivers.sevenz.Coder.Coder()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.close()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rTPos : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse0xData(Map)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.CFH_SIG : ZipLong
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(ArchiveEntry)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.hasNext()
Comp: org.apache.commons.compress.compressors.bzip2.CRC.initialiseCRC()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.numberOfShannonFanoTrees : int
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.jarMarkerAdded : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdOffset : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setMethod(int)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.SIG_LENGTH : int
Comp: org.apache.commons.compress.utils.BitInputStream.MASKS : long[]
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.toString()
Comp: org.apache.commons.compress.changes.ChangeSet.changes : Set
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getName()
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.f : File
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(ExecutorService,ScatterGatherBackingStoreSupplier)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currName : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getPlatform()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Pack200Strategy,Map)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.haveUnclosedEntry : boolean
Comp: org.apache.commons.compress.compressors.gzip.GzipUtils.getUncompressedFilename(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSorter : BlockSort
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.fileFormat : short
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataData()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Utils
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.fillBuffer()
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.FileTypes
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setFlags(byte)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.X0017_StrongEncryptionHeader.X0017_StrongEncryptionHeader()
Comp: org.apache.commons.compress.archivers.sevenz.Folder.bindPairs : BindPair[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.BITS : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getIno()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(int)
Comp: org.apache.commons.compress.compressors.FileNameUtil.defaultExtension : String
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.buffer : ByteBuffer
Comp: org.apache.commons.compress.archivers.arj.MainHeader.extendedHeaderBytes : byte[]
Comp: org.apache.commons.compress.archivers.dump.Dirent.getParentIno()
Comp: org.apache.commons.compress.archivers.arj.MainHeader
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getCompressedSize()
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ArchiveEntry,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnixMode()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setMode(int)
Comp: org.apache.commons.compress.compressors.bzip2.Rand
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.complete()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.out : OutputStream
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_SPARC_FILTER : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.decompressNextSymbol()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsLive : int
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.setNameAndCommentFromExtraFields(ZipArchiveEntry,byte[],byte[])
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getName(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.label : String
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders()
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.zipToDate(ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.SZ_SIGNATURE : byte[]
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.compressorOutputStreamProviders : SortedMap
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.in : InputStream
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStore.close()
Comp: org.apache.commons.compress.archivers.sevenz.Folder.getUnpackSizeForCoder(Coder)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.blockSize : int
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.getKey()
Comp: org.apache.commons.compress.archivers.sevenz.Folder.packedStreams : long[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[],boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.crc : CRC32
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.AsiExtraField()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.values()
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(Object)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.BlockSort(BZip2CompressorOutputStream.Data)
Comp: org.apache.commons.compress.utils.ArchiveUtils
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setLocalFileDataData(byte[])
Comp: org.apache.commons.compress.changes.Change.Change(ArchiveEntry,InputStream,boolean)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$302(DumpArchiveEntry.TapeSegmentHeader,int)
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryData()
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.setCacheLZMAAvailablity(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finished : boolean
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf : byte[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.longFileMode : int
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.highChars : char[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtra()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNUStringTable(String)
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.METHOD : Feature
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.code : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.code : int
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger,ZipEightByteInteger,ZipLong)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.buf : ByteBuffer
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDeviceMin()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.compressedCrc32 : CRC32
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.origPtr : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readIdx : int
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.getInputView()
Comp: org.apache.commons.compress.utils.BitInputStream.bitsCachedSize : int
Comp: org.apache.commons.compress.archivers.zip.ZipShort.value : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry,ByteBuffer,long,boolean)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.toString()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.crc : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.addSizes(byte[])
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.writeRun()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setDirectory(boolean)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[])
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderHoles()
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.StreamBridge()
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.channel : SeekableByteChannel
Comp: org.apache.commons.compress.utils.CountingOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Constants
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.EMPTY : byte[]
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesEncryption()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(SevenZMethod)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS : UnicodeExtraFieldPolicy
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EOCD_SIG : byte[]
Comp: org.apache.commons.compress.changes.ChangeSetResults.hasBeenAdded(String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_READ : PERMISSION
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxHeader()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.decompressConcatenated : boolean
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.bytesRead : long
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.currEntry : TarArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.codeToEnum : Map
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setSize(long)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders()
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_PPC_FILTER : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.buffer : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.dataOffset : long
Comp: org.apache.commons.compress.utils.Charsets.ISO_8859_1 : Charset
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_EXEC : PERMISSION
Comp: org.apache.commons.compress.archivers.sevenz.Folder.unpackSizes : long[]
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.setEncoding(String)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[])
Comp: org.apache.commons.compress.utils.Lists.newArrayList()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.XZCompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.findByMethod(SevenZMethod)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionRequired(int)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.setClearCode(int)
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.setUID(long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.originalName : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$722(ZipArchiveInputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.closeArchiveEntry()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.UNKNOWN : TYPE
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentEntryIndex : int
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setSize(ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.1.{...}
Comp: org.apache.commons.compress.archivers.zip.ZipShort.getValue()
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setHeaderId(ZipShort)
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordSize : int
Comp: org.apache.commons.compress.utils.BitInputStream.close()
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.read()
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.gid : BigInteger
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.flush()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate.test(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.blockSize : int
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.encode(OutputStream,Object)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mtime : long
Comp: org.apache.commons.compress.compressors.bzip2.CRC.globalCrc : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf : ByteBuffer
Comp: org.apache.commons.compress.compressors.xz.XZUtils.HEADER_MAGIC : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getRemoteDevice()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModified()
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.storeNum : AtomicInteger
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.def : Deflater
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[])
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getBytesRead()
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getHeaderId()
Comp: org.apache.commons.compress.compressors.pack200.Pack200Strategy[]
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.getMetaData()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.BLKDEV : TYPE
Comp: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.InMemoryCachingStreamBridge()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams : ArrayList
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstPackStreamIndex : int[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsW(int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setModTime(Date)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.accessTime : ZipLong
Comp: org.apache.commons.compress.archivers.zip.ZipFile.CFH_SIG : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.Data(int)
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataData()
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON : CompressorStreamFactory
Comp: org.apache.commons.compress.utils.BitInputStream.bitsCached : long
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.PKWARE_IMPLODING : ZipMethod
Comp: org.apache.commons.compress.changes.Change.replaceMode : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isZip64Required(ZipArchiveEntry,Zip64Mode)
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.charsetName : String
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finished : boolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.maj : long
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readExtraData(int,DataInputStream,LocalFileHeader)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.getEntries()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.available()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.code : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.def : Deflater
Comp: org.tukaani.xz.LZMA2Options.getPb()
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.setCentralDirectoryData(byte[])
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupName(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.compareTo(Simple8BitZipEncoding.Simple8BitChar)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessTime()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.reset()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.assemLen : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setMode(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.in : InputStream
Comp: org.tukaani.xz.DeltaOptions.getOutputStream(FinishableOutputStream)
Comp: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.out : OutputStream
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.PPMD : ZipMethod
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.closed : boolean
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandCopy(long,int)
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.UnshrinkingInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.parse(byte[],int)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close()
Comp: org.apache.commons.compress.changes.ChangeSetResults.deleted(String)
Comp: org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorOutputStream(String,OutputStream)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.uncompressedBytesRemaining : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.entryOffset : long
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA : SevenZMethod
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsPutUByte(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.endBlock()
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.headerId : ZipShort
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_j2 : int
Comp: org.apache.commons.compress.archivers.zip.JarMarker.NO_BYTES : byte[]
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.finish()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.arjFlags : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getInode()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readCrc()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.EMPTY : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.packCrcs : long[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,int)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.workDone : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.magic : String
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasStream(boolean)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.charsetName : String
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.sevenz.Folder.findBindPairForInStream(int)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byte[])
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getCurrentOutputStream()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.readBlock(boolean)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.streams : List
Comp: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField(String,byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currSize : long
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getAccessJavaTime()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lastStoredEntry : ByteArrayInputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getAccessJavaTime()
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.stop()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.TapeInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.prefixes : int[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetUByte()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.$VALUES : PERMISSION[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data
Comp: org.apache.commons.compress.utils.IOUtils.SKIP_BUF : byte[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endBlock()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(byte[],byte[],ZipFile.1)
Comp: org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[])
Comp: org.apache.commons.compress.archivers.sevenz.Coders
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.numberOfTrees : int
Comp: org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.type : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$102(ZipArchiveOutputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getAccessDate()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.reserved : int
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.ENCRYPTION : Feature
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSimpleSort(BZip2CompressorOutputStream.Data,int,int,int,int)
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyJavaTime(Date)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(int)
Comp: int[][]
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.1.{...}
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fpush(int,int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close()
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.getInputView()
Comp: org.apache.commons.compress.archivers.zip.ZipLong.equals(Object)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillStarSparseData(Map)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.skip(long)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.longFileMode : int
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.es : ExecutorService
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.channel : SeekableByteChannel
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.SevenZMethodConfiguration(SevenZMethod,Object)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.1.{...}
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.highChars : char[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_rfreq : int[][]
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStore
Comp: org.apache.commons.compress.archivers.zip.BitStream.nextByte()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMinor : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getSize()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setTime(long)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflateBuffer : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.canHandleEntryData(ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.close()
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.oneByte : byte[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues6(int,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.crc : long
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(InputStream,boolean)
Comp: org.apache.commons.compress.changes.ChangeSetResults.getDeleted()
Comp: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UnicodeCommentExtraField()
Comp: org.apache.commons.compress.compressors.CompressorInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.BoundedSeekableByteChannelInputStream(SeekableByteChannel,long)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.GzipCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.DEFLATED : ZipMethod
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setGeneralPurposeBit(GeneralPurposeBit)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$714(ZipArchiveInputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.LZMA2 : SevenZMethod
Comp: org.tukaani.xz.LZMAInputStream
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.size : long
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.count(long)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setExternalAttributes(long)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,ExtraFieldUtils.UnparseableExtraField)
Comp: org.apache.commons.compress.archivers.zip.BinaryTree.read(BitStream)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.readGNUStringTable(byte[])
Comp: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.UCOM_ID : ZipShort
Comp: org.apache.commons.compress.utils.CountingOutputStream.write(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addExtraField(ZipExtraField)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummyByte : boolean
Comp: org.apache.commons.compress.archivers.arj.MainHeader.minVersionToExtract : int
Comp: org.apache.commons.compress.archivers.zip.BitStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUint64(DataOutput,long)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.readNextCode()
Comp: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getUID()
Comp: org.apache.commons.compress.changes.ChangeSetResults.ChangeSetResults()
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.available()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.is : InputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$502(ZipArchiveOutputStream.CurrentEntry,boolean)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.mode : int
Comp: org.apache.commons.compress.utils.ArchiveUtils.isArrayZero(byte[],int)
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.crc : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,String,long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeBits(DataOutput,BitSet,int)
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.finish()
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.DOS_TIME_MIN : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.Coder
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_ch2 : int
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.maxCodeSize : int
Comp: org.apache.commons.compress.utils.BoundedInputStream.BoundedInputStream(InputStream,long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFieldsNoCopy()
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.comment : String
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_len : byte[][]
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getRelativeHeaderOffset()
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap.StreamMap()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setRelativeHeaderOffset(ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.values()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.EMPTY : byte[]
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_AVAILABLE : CachedAvailability
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.clearCode : int
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR : Feature
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getMethod()
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.dosToJavaTime(long)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentMethods(Iterable)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry
Comp: org.apache.commons.compress.utils.BoundedInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long)
Comp: boolean[]
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String)
Comp: org.apache.commons.compress.archivers.sevenz.Folder.numUnpackSubStreams : int
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.perform(ChangeSetPerformer.ArchiveEntryIterator,ArchiveOutputStream)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(SeekableByteChannel)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.files : SevenZArchiveEntry[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setDefaults(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.nextArtificalDeviceAndInode : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues2(int,int)
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.write(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closed : boolean
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.recvDecodingTables()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData()
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability.CACHED_UNAVAILABLE : CachedAvailability
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.oneByte : byte[]
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateJavaTime(Date)
Comp: org.apache.commons.compress.archivers.zip.JarMarker.JarMarker()
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.next()
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.serviceLoaderIterator : Iterator
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.readFromStack(byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ZLIB : COMPRESSION_TYPE
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_READ : PERMISSION
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.SKIP : UnparseableExtraField
Comp: org.apache.commons.compress.archivers.zip.Zip64RequiredException
Comp: org.tukaani.xz.DeltaOptions.getInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.getBytesWritten()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.finished : boolean
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE[].clone()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.lastModifiedDate : long
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getDiskStartNumber()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.properties : Map
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$200(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NEVER : UnicodeExtraFieldPolicy
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_i2 : int
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.ArchiveInputStream()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setRemoteDeviceMaj(long)
Comp: org.apache.commons.compress.archivers.cpio.CpioUtil.fileType(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close()
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.LZMA2Decoder()
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read8(DataInputStream)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect[]
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.dump.Dirent.getIno()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.hasNext()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.access$400(ZipFile.NameAndComment)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding : String
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isPaxGNUSparse()
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getGroupId()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(Date)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$300(SevenZOutputFile)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(long)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_z : char
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.name : String
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.available()
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getSize()
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.LocalFileHeader()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.usesChecksumWithCompressedChunks()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_THUMB_FILTER : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.close()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.name : String
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.backingStoreSupplier : ScatterGatherBackingStoreSupplier
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders : Map
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.oneByte : byte[]
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.reason : Feature
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGlobalPaxHeaders()
Comp: org.apache.commons.compress.utils.Charsets.UTF_16BE : Charset
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCrc(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(char)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finished : boolean
Comp: org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeHeader(GzipParameters)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.minVersionToExtract : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean)
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.encode(String)
Comp: org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[])
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_code : int[][]
Comp: org.apache.commons.compress.archivers.sevenz.Archive
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.write(int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedCrc : long
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsFromCoder(Coder)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.arjFlags2 : int
Comp: org.apache.commons.compress.changes.ChangeSet.addDeletion(Change)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.FramedSnappyCompressorInputStream(InputStream,FramedSnappyDialect)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.setGID(long)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.2.{...}
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.find(int)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.close()
Comp: org.tukaani.xz.FilterOptions.getOutputStream(FinishableOutputStream)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files : List
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.calculateChecksum(byte[])
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.origPtr : int
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.addEntry(int,byte,int)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.streamCompressor : StreamCompressor
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decode(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipShort.getValue(byte[],int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.getInputStream()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.DummyByteAddingInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.cdata : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.fileName : String
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getCentralDirectoryData()
Comp: org.tukaani.xz.LZMAInputStream.LZMAInputStream(InputStream,long,byte,int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setInternalAttributes(int)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.sevenz.Folder[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$900(ZipArchiveInputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetInt()
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.dateToZip(Date)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setMethod(int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.BSD_LONGNAME_PREFIX_LEN : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.generateMTFValues()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setName(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createCentralFileHeader(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCompressedSize()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read()
Comp: org.apache.commons.compress.archivers.sevenz.Folder.hasCrc : boolean
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.readNextCode()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.devMajor : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive)
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.os : FileOutputStream
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.out : XZOutputStream
Comp: org.apache.commons.compress.archivers.dump.UnrecognizedFormatException.UnrecognizedFormatException()
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.version : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setWindowsAttributes(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSimpleName(String)
Comp: org.apache.commons.compress.archivers.sevenz.StartHeader.StartHeader()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder.CopyDecoder()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.OffsetEntry(ZipFile.1)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.count(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartA()
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCompressedCrcValue(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues3(int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.OutputStreamWrapper(SevenZOutputFile.1)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory : boolean
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.dumpDate : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.hashCode()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockSize100k : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.1.{...}
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.entryOffset : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.entry : CpioArchiveEntry
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$300(DumpArchiveEntry.TapeSegmentHeader)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.close()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.changes : Set
Comp: org.apache.commons.compress.archivers.jar.JarArchiveEntry.certificates : Certificate[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETGUI : PERMISSION
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.slidingDictionarySize : int
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextJarEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.copyRawEntries(ZipArchiveOutputStream,ZipArchiveEntryPredicate)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.exceptionMessage(byte[],int,int,int,byte)
Comp: org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.originalInput : InputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(ZipEntry)
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.put(int)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedFilePosition : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[])
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.write0(int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.next()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsFinishedWithStream()
Comp: org.apache.commons.compress.compressors.CompressorInputStream.count(int)
Comp: org.tukaani.xz.UnsupportedOptionsException.getMessage()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.entriesRead : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,String)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.CompressedEntry(ZipArchiveEntryRequest,long,long,long)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.prevEntry : ArArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList.X0019_EncryptionRecipientCertificateList()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ScatterStatistics
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$000(ZipFile.OffsetEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel : SeekableByteChannel
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCrc()
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry[]
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.code : byte
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(Coder,InputStream)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.internalIsXZCompressionAvailable()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ONE : byte[]
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding.canEncode(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMajor(int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalCountingStreams : CountingOutputStream[]
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.copy(int,int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ChangeSetPerformer(ChangeSet)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String)
Comp: org.apache.commons.compress.archivers.sevenz.BindPair
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.compressedSize : long
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.getOffsetEntry()
Comp: byte[][]
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.FileBasedScatterGatherBackingStore(File)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.decompressConcatenated : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipEncoding
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictionarySize(Coder)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDataPadCount()
Comp: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setPlatform(int)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.DD_SIG : ZipLong
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.UnrecognizedExtraField()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.securityEnvelopeFilePosition : int
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock : Object
Comp: org.apache.commons.compress.archivers.zip.ZipEncoding.decode(byte[])
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.writeOut(byte[],int,int)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.Feature(String)
Comp: org.apache.commons.compress.utils.BitInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.hostname : String
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setName(String)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.register(Class)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary
Comp: org.apache.commons.compress.utils.BitInputStream.clearBitCache()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.utils.CountingInputStream.read()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setAccessJavaTime(Date)
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.canAcceptOptions(Object)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.getFeature()
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.HEX_DIGITS : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.copyOf(ZipExtraField[],int)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.crc : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.inf : Inflater
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry()
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressConcatenated()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getValue()
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.JPEG : ZipMethod
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.mergeExtraFields(ZipExtraField[],boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.close()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment
Comp: org.tukaani.xz.UnsupportedOptionsException
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[])
Comp: org.apache.commons.compress.archivers.ArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.ZipLong.putLong(long,byte[],int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.unseqToSeq : byte[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION[].clone()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_fave : int[]
Comp: org.apache.commons.compress.archivers.zip.JarMarker.DEFAULT : JarMarker
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes : Map
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryEOF : boolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(ArchiveEntry)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.headerOffset : long
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateTime()
Comp: org.apache.commons.compress.archivers.zip.JarMarker.ID : ZipShort
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.LINK : TYPE
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSize : long
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.firstChapter : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getContentMethods()
Comp: org.apache.commons.compress.utils.CountingInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully(byte[])
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.MainHeader()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.hasHitEOF : boolean
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.getTableSize()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory
Comp: org.apache.commons.compress.archivers.zip.ZipLong.getValue()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.createArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeModified : int
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.HEADER_MAGIC : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setRawFlag(int)
Comp: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.UnicodePathExtraField(String,byte[],int,int)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.available()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.bs : ScatterGatherBackingStore
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesRead()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeOut(byte[])
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit1_accessTimePresent : boolean
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm[]
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.toString()
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.LZMADecoder()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.parent : int[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAccessDate(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues4()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getLocalFileDataData()
Comp: org.tukaani.xz.LZMA2InputStream.LZMA2InputStream(InputStream,int)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.numberOptionOrDefault(Object,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileMTimes(DataOutput)
Comp: org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer)
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.encodeHighChar(char)
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.count(long)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.read()
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSimpleSort(int[],int[],int,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getMode()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.addRepeatOfPreviousCode()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.recordSize : int
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getMethod()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileWindowsAttributes(DataOutput)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setContentCompression(SevenZMethod)
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStore.getInputStream()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.useUnicodeExtraFields : boolean
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.clone()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderSize : long
Comp: org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(InputStream,long,long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getIno()
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.canEncodeChar(char)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.blockSize : int
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setTableSize(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNUSparse()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.in : ZipFile
Comp: org.apache.commons.compress.archivers.dump.InvalidFormatException
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readOldGNUSparse()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.getCrc32()
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.oneByte : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.crcs : long[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBSDLongName(String)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.causedUseOfZip64 : boolean
Comp: org.apache.commons.compress.archivers.ArchiveException.initCause(Throwable)
Comp: org.apache.commons.compress.compressors.CompressorInputStream.CompressorInputStream()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.sevenZSignature : byte[]
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.unmask(long)
Comp: org.apache.commons.compress.utils.FlushShieldFilterOutputStream
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG : byte[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.find(int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.userId : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(Throwable)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.getBytesWrittenForLastEntry()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.fillGNUSparse1xData(Map)
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setNumberOfLinks(long)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read32(DataInputStream)
Comp: org.tukaani.xz.XZOutputStream.XZOutputStream(OutputStream,FilterOptions)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.supportsMethodOf(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.archive : Archive
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(String,long)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode)
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.expandCodeToOutputStack(int,boolean)
Comp: org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byte[],int,int)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.in : BitInputStream
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.DeltaDecoder()
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.PureJavaCrc32C()
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closeForWriting()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Utils.getUncompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.X7875_NewUnix()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.dataStart : long
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getPrefix(int)
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(String,long,long)
Comp: org.apache.commons.compress.utils.CRC32VerifyingInputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.getOperatingSystem()
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Date)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.crc : CRC32
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.length : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.init()
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.buffer : CircularBuffer
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addRepeatOfPreviousCode()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.permissions : Set
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCreateJavaTime()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.DeflateDecoder()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.ArjArchiveEntry(LocalFileHeader)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.groupName : String
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.uid : int
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.AbstractUnicodeExtraField()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCrc(long)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isBSDLongName(String)
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.isBit0_modifyTimePresent()
Comp: org.tukaani.xz.LZMA2Options
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.moveToFrontCodeAndSend()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.rmaj : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.temp_charArray2d : char[][]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.fallbackToUTF8 : boolean
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.expandCodeToOutputStack(int,boolean)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.decompressConcatenated : boolean
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.filesys : String
Comp: org.apache.commons.compress.archivers.ArchiveException.ArchiveException(String)
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.bytesWritten : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entry : CurrentEntry
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry)
Comp: org.apache.commons.compress.changes.Change.Change(String,int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getRawInputStream(ZipArchiveEntry)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next()
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.init()
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.getComment()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.bsGetBit()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.cdLength : long
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getLocalFileDataData()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(File,Pack200Strategy,Map)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.contentMethods : Iterable
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.getEncoding()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveException.DumpArchiveException(String,Throwable)
Comp: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.ArjArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateJavaTime(Date)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSymbolicLink()
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readSize()
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.reserved : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setLastModifiedDate(long)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasWindowsAttributes : boolean
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.originalCrc32 : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setComment(String)
Comp: org.tukaani.xz.SingleXZInputStream.SingleXZInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.runLength : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.weight : int[]
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.changes.ChangeSetResults.deleted : List
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.alignmentBoundary : int
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.getInputStream()
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.growBuffer(ByteBuffer,int)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.UNSHRINKING : ZipMethod
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStore.writeOut(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.FALLBACK_ENCODING : ZipEncoding
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.javaTimeToNtfsTime(Date)
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding.NioZipEncoding(Charset)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordBuf : byte[]
Comp: org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes(String)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.checkRequestedFeatures(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.paxGNUSparse : boolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.blockSize : int
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.bytesRead : long
Comp: org.apache.commons.compress.archivers.zip.ZipLong
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.this$0 : ZipArchiveInputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer : ByteBuffer
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.equals(Object)
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getInstance()
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.setTableSize(int)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.ArchiveInputStreamIterator(ArchiveInputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode0(int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.tableSize : int
Comp: org.apache.commons.compress.utils.BoundedInputStream
Comp: org.apache.commons.compress.archivers.cpio.CpioUtil.long2byteArray(long,int,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.sevenz.Archive.streamMap : StreamMap
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.parameters : GzipParameters
Comp: org.apache.commons.compress.archivers.zip.ZipLong.SINGLE_SEGMENT_SPLIT_MARKER : ZipLong
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.setLinkedFile(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selectorMtf : byte[]
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.deflateUntilInputIsNeeded()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.limit : int[][]
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.available()
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryData()
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.DeflateParameters()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.access$500(ZipFile.NameAndComment)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getCentralDirectoryData()
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setClearCode(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.preserveLeadingSlashes : boolean
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.OutputStreamCompressor(Deflater,OutputStream)
Comp: org.apache.commons.compress.archivers.zip.BinaryTree.tree : int[]
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.equals(Object)
Comp: org.apache.commons.compress.compressors.bzip2.CRC.CRC()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$402(DumpArchiveEntry.TapeSegmentHeader,int)
Comp: org.tukaani.xz.XZOutputStream.close()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZIP64_EOCD_SIG : byte[]
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.encode()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.DELTA_FILTER : SevenZMethod
Comp: org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream)
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.filepos : long
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.link : String
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.getMethodByCode(int)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(Calendar,long,byte[],int)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.fileSpecPosition : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(TarArchiveEntry,TarArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCentralDirectoryInChunks()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.realSize : long
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes(long,byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.initTT(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.allowableBlockSize : int
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExternalAttributes(long)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.currBytes : long
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.INCS : int[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$002(ZipFile.OffsetEntry,long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream
Comp: org.apache.commons.compress.archivers.ArchiveInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.method : int
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictSize(Object)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackSort(BZip2CompressorOutputStream.Data,int)
Comp: org.tukaani.xz.LZMA2Options.getDictSize()
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.getFilename()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeCopiedEntry(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[])
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.ordinal()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.nlink : int
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getNameCRC32()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.devname : String
Comp: org.apache.commons.compress.compressors.xz.XZUtils
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.read(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Map,TarArchiveEntry)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.decompressNextSymbol()
Comp: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],int,int,byte[],int,int,boolean)
Comp: org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.isUnixSymlink()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasWindowsAttributes()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.fileBytesWritten : long
Comp: org.apache.commons.compress.archivers.zip.ZipFile.canReadEntryData(ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.IMPLODING : ZipMethod
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.TOKENIZATION : ZipMethod
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readLittleEndianInt(DataInputStream)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.diskStart : ZipLong
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartC()
Comp: org.apache.commons.compress.utils.ArchiveUtils.isEqual(byte[],byte[],boolean)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(boolean)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[])
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(String,long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues5(int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setOffset(long)
Comp: org.apache.commons.compress.changes.Change.targetFile()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasAccessDate : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.offsetEntry : OffsetEntry
Comp: org.apache.commons.compress.archivers.zip.ZipFile.wordBuf : byte[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getMethod()
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : AtomicBoolean
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish()
Comp: org.apache.commons.compress.archivers.zip.UnicodePathExtraField.getHeaderId()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close()
Comp: org.apache.commons.compress.archivers.sevenz.Folder
Comp: org.apache.commons.compress.archivers.zip.JarMarker.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.dateTimeModified : int
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.isCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setEncoding(String)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.id : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$000(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.changes.ChangeSet.add(ArchiveEntry,InputStream,boolean)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.markSupported()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,boolean)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readIndex : int
Comp: org.apache.commons.compress.archivers.jar.JarArchiveEntry.manifestAttributes : Attributes
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setLastModifiedDate(Date)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.tmpbuf : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf : byte[]
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.name : String
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DeflateDecoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.name : byte[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.decode(ZipEncoding,byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.modTime : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closed : boolean
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.out : OutputStream
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.CircularBuffer(int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finished : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.codeSize : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.chksum : long
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.setCompressionLevel(int)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.1.{...}
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.ScatterGatherBackingStoreCompressor(Deflater,ScatterGatherBackingStore)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf : byte[]
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.mode : long
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isSparse()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.TarArchiveSparseEntry(byte[])
Comp: org.apache.commons.compress.utils.BitInputStream.readBits(int)
Comp: org.apache.commons.compress.utils.CountingOutputStream[]
Comp: int[]
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.input : InputStream
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getClearCode()
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessJavaTime(Date)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.setComment(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(int)
Comp: org.apache.commons.compress.archivers.ArchiveException.ArchiveException(String,Exception)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.STANDARD : FramedSnappyDialect
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.2.{...}
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.uid : long
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.code : int
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.in : DataInputStream
Comp: org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveOutputStream(String,OutputStream,String)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readHeader()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$700(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap.folderFirstFileIndex : int[]
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLength()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.getName()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.ZCompressorInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.crc : CRC
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sfmap : char[]
Comp: org.apache.commons.compress.archivers.zip.X0019_EncryptionRecipientCertificateList
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.value : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.ZERO : ZipShort
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.getTableSize()
Comp: org.apache.commons.compress.utils.Sets
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeSubStreamsInfo(DataOutput)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.reset()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.partialClear()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflater : Deflater
Comp: org.tukaani.xz.LZMA2Options.getLp()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(int)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.archiverVersionNumber : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setCompressedSize(long)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.oneByte : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.comment : String
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finished : boolean
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.setOperatingSystem(int)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.tlScatterStreams : ThreadLocal
Comp: org.apache.commons.compress.archivers.sevenz.Coder.numOutStreams : long
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding.decode(byte[])
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.encoding : String
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.dataDescriptorFlag : boolean
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeUnpackInfo(DataOutput)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.close()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.getAndMoveToFrontDecode_yy : char[]
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.heap : int[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getModTime()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.CpioArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.utils.Lists
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.setDirectory(boolean)
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.internalIsLZMACompressionAvailable()
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(String)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[])
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setAntiItem(boolean)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getUID()
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream
Comp: org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.LZERO : byte[]
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Pack200Strategy)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartB()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveException
Comp: org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.LZO : COMPRESSION_TYPE
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(String,String,int,DumpArchiveEntry.TYPE)
Comp: org.apache.commons.compress.archivers.sevenz.BindPair.BindPair()
Comp: org.apache.commons.compress.archivers.dump.ShortFileException.ShortFileException()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.initBlock()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.getContentMethods(SevenZArchiveEntry)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.uncompressedBytesRemaining : int
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.setFilename(String)
Comp: org.apache.commons.compress.archivers.cpio.CpioConstants
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.getNextEntry()
Comp: org.apache.commons.compress.compressors.xz.XZUtils.isXZCompressionAvailable()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.write(byte[])
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setCreateTime(ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.getCentralDirectoryData()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.crc : CRC32
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readOneByte()
Comp: org.apache.commons.compress.archivers.cpio.CpioUtil.byteArray2long(byte[],boolean)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.checksum : PureJavaCrc32C
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.shortBuf : byte[]
Comp: org.apache.commons.compress.changes.ChangeSet.deleteDir(String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.recordOffset : int
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.pushedBackBytes(long)
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.ntfsTimeToJavaTime(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.ZipArchiveInputStream(InputStream,String,boolean)
Comp: org.apache.commons.compress.archivers.cpio.CpioUtil
Comp: org.apache.commons.compress.changes.ChangeSetResults.addedFromStream : List
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.flushDeflater()
Comp: org.apache.commons.compress.compressors.xz.XZUtils.fileNameUtil : FileNameUtil
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.isGNULongName(String)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.closed : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addRawArchiveEntry(ZipArchiveEntry,InputStream)
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getOptions(Object)
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getEntrySize()
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.uid : BigInteger
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.expandLiteral(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZERO : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getTime()
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.appendSurrogate(ByteBuffer,char)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDeviceMin(long)
Comp: org.apache.commons.compress.compressors.CompressorInputStream
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.END : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setSize(long)
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField[]
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.localFileHeader : LocalFileHeader
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readStreamIdentifier()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.blockCRC : int
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.rawCentralDirectoryData : byte[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$102(DumpArchiveEntry.TapeSegmentHeader,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.max : long
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.dateToZipLong(Date)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatNameBytes(String,byte[],int,int,ZipEncoding)
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.filename : String
Comp: byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.create(OutputStream,Deflater)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.utils.CountingOutputStream.CountingOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCdata(int)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fvswap(int[],int,int,int)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders()
Comp: org.apache.commons.compress.utils.Charsets.UTF_16LE : Charset
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.mode : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.selector : byte[]
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_SIZE : ZipShort
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getHeaderId()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.mtfFreq : int[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getType()
Comp: org.tukaani.xz.LZMAOutputStream.LZMAOutputStream(OutputStream,LZMA2Options,boolean)
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.DumpArchiveSummary(byte[],ZipEncoding)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getMode()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.endReached : boolean
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long)
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasCrc()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.gid : int
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File)
Comp: org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(int)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord()
Comp: org.apache.commons.compress.compressors.pack200.InMemoryCachingStreamBridge.getInputView()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isCheckSumOK()
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.originalSizeEvenForVolumes : int
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream,short,int,String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getTime()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.ArchiveStreamFactory(String)
Comp: org.apache.commons.compress.utils.CountingInputStream.bytesRead : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setRawFlag(int)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.close()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeader(byte[],ZipEncoding,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasWindowsAttributes(boolean)
Comp: org.apache.commons.compress.archivers.sevenz.Folder.totalInputStreams : long
Comp: org.apache.commons.compress.compressors.CompressorInputStream.bytesRead : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream,int,int,String)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.comment : String
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.HostOs
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.getHeaderId()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.localDataStart : long
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesStrongEncryption()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.readFully(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.hashCode()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getModifyTime()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getHeaderId()
Comp: short[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(String,long,long)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatLongBinary(long,byte[],int,int,boolean)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$414(SevenZOutputFile,long)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entryBytesRead : long
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.ArArchiveEntry(String,long,int,int,int,long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.access$1000(ZipArchiveInputStream,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry()
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.trimLeadingZeroesForceMinLength(byte[])
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.minLens : int[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.name : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ArchiveInputStream.single : byte[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.crc : CRC
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseName(byte[],int,int,ZipEncoding)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE[].clone()
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.$VALUES : TYPE[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.summary : DumpArchiveSummary
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isExtended : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseLanguageEncodingFlag(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setName(String,byte[])
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.nextServiceLoader : Object
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.addEncoder(OutputStream,SevenZMethod,Object)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.volume : int
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.originalOutput : OutputStream
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closed : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.canWriteEntryData(ArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.setCompressedSize(ZipEightByteInteger)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getMode(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbMakeCodeLengths(byte[],int[],BZip2CompressorOutputStream.Data,int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.crc : CRC32
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.blockSize : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$100(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.compressorInputStreamProviders : SortedMap
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getGroupId()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.reset()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues0(int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry()
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.usesUTF8ForNames()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isTooLageForZip32(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.comment : byte[]
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.clone()
Comp: org.apache.commons.compress.archivers.sevenz.Coder.numInStreams : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.seqToUnseq : byte[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setGroupId(int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.addAsFirstExtraField(ZipExtraField)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.setLongFileMode(int)
Comp: char[].clone()
Comp: org.apache.commons.compress.changes.ChangeSetResults.getAddedFromChangeSet()
Comp: org.apache.commons.compress.archivers.sevenz.StreamMap
Comp: org.tukaani.xz.SingleXZInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.out : OutputStream
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_EXEC : PERMISSION
Comp: org.apache.commons.compress.archivers.arj.MainHeader.dateTimeCreated : int
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.CurrentEntry(ZipArchiveInputStream.1)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.assembleData()
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature)
Comp: org.apache.commons.compress.compressors.FileNameUtil.getUncompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyBuffer : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.zipArchiveEntry : ZipArchiveEntry
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_chPrev : int
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.deflater : Deflater
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.writeIndex : int
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.literalTree : BinaryTree
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasAccessDate(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeLocalFileHeader(ZipArchiveEntry,boolean)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.write(byte[],int,int,int)
Comp: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.1.{...}
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileAntiItems(DataOutput)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(File,String)
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.init(boolean)
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.remaining : long
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.Pack200CompressorOutputStream(OutputStream,Map)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.inflater : Inflater
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable)
Comp: org.apache.commons.compress.archivers.zip.Zip64Mode.Always : Zip64Mode
Comp: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.getOptionsAsProperties(Object)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.size : long
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.STICKY : PERMISSION
Comp: org.apache.commons.compress.archivers.zip.JarMarker.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.makeMaps()
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder
Comp: org.apache.commons.compress.archivers.sevenz.Folder.coders : Coder[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.streamCompressor : StreamCompressor
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.queue : Queue
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.checksumWithCompressedChunks : boolean
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartB()
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.HashAlgorithm
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.currentState : int
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setAccessTime(ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.TAPE : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.toDosTime(long)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.CpioArchiveOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntry,InputStreamSupplier)
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.out : DeflaterOutputStream
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream
Comp: org.apache.commons.compress.utils.BoundedInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.data : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.OffsetEntry.access$200(ZipFile.OffsetEntry)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.unzftab : int[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.positionAtEndOfCentralDirectoryRecord()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.nameMap : Map
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$500(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.entry : CpioArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.totalWrittenToOutputStream : long
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveOutputStreamProviders : SortedMap
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.count : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.finalize()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.initializeTables(int)
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitChar.unicode : char
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getHeaderId()
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.fill(int)
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.getLocalFileDataLength()
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.CompressorStreamFactory(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.NOT_ENCODEABLE : UnicodeExtraFieldPolicy
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.values()
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.flags : byte
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.out : OutputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord()
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.ordinal()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCreationDate : boolean
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.in : InputStream
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.getBytesRead()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isHostOsUnix()
Comp: org.tukaani.xz.LZMAOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.method : int
Comp: org.apache.commons.compress.archivers.dump.Dirent.Dirent(int,int,int,String)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.arjFlags : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.getAndMoveToFrontDecode()
Comp: org.apache.commons.compress.utils.IOUtils.readFully(InputStream,byte[])
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.offset : long
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setModifyJavaTime(Date)
Comp: org.apache.commons.compress.compressors.bzip2.CRC.updateCRC(int,int)
Comp: org.apache.commons.compress.compressors.CompressorOutputStream.CompressorOutputStream()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry(String,String)
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getSize()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setDevice(long)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.inUse : boolean[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[])
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCompressedCrcValue()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getUserId()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.hbAssignCodes(int[],byte[],int,int,int)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes(long,byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLinkName()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getModifyJavaTime()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.fileType : int
Comp: org.apache.commons.compress.utils.CountingOutputStream.bytesWritten : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(ByteArrayOutputStream,int,int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.Entry(ZipFile.OffsetEntry)
Comp: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.unpackSizes : long[]
Comp: org.apache.commons.compress.archivers.zip.ZipMethod
Comp: org.apache.commons.compress.compressors.CompressorInputStream.getBytesRead()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.write(int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.getPrefixesLength()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.last : int
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.getDictionarySize(Coder)
Comp: org.tukaani.xz.XZ
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.previousCode : int
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.isLZMACompressionAvailable()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getHeaderId()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.blockBuffer : byte[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getBytesRead()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.Data(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$202(DumpArchiveEntry.TapeSegmentHeader,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[])
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setCentralDirectoryExtra(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setName(String,byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.unparseableExtra : UnparseableExtraFieldData
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getHeaderCount()
Comp: org.apache.commons.compress.utils.ArchiveUtils.sanitize(String)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(File)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$500(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_WRITE : PERMISSION
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setGroupId(long)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.decompressUntilEOF : Boolean
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.bit2_createTimePresent : boolean
Comp: org.apache.commons.compress.utils.Charsets
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.windowsAttributes : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.bigNumberMode : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries : List
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsBuff : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zip64Mode : Zip64Mode
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.FallbackZipEncoding(String)
Comp: org.apache.commons.compress.archivers.zip.ZipShort.ZipShort(int)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalOrBinaryBytes(long,byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder.numberOptionOrDefault(Object,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.version : String
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending : Map
Comp: org.apache.commons.compress.compressors.FileNameUtil
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.USER_EXEC : PERMISSION
Comp: org.apache.commons.compress.compressors.xz.XZUtils.getCachedXZAvailability()
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.DefaultBackingStoreSupplier.get()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.DataOutputCompressor
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(int)
Comp: org.apache.commons.compress.compressors.gzip.GzipUtils.fileNameUtil : FileNameUtil
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.decompressBuf : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.numNonEmptyStreams : int
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.name : String
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(OutputStream,int)
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.GeneralPurposeBit()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.getOptions()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.currentLocalFileHeader : LocalFileHeader
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nMTF : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.sendMTFValues1(int,int)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getCentralDirectoryData()
Comp: org.apache.commons.compress.compressors.xz.XZUtils.setCacheXZAvailablity(boolean)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.reverseMapping : List
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream.bytesRemaining : long
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream
Comp: org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.find(int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getMode()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyStreams(DataOutput)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor.writeOut(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ArchiveStreamProvider
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.GzipCompressorOutputStream(OutputStream,GzipParameters)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.simpleName : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getAllExtraFields()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useDataDescriptor(boolean)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.crc : CRC32
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.writeOut(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.code : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderIndex : int
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.in : PushbackInputStream
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Map)
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.CurrentEntry(ZipArchiveEntry,ZipArchiveOutputStream.1)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.access$200(SevenZOutputFile)
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.CachedAvailability
Comp: org.apache.commons.compress.archivers.zip.ZipFile.encoding : String
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.eclass : int[]
Comp: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.hasCrc : BitSet
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.target : File
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(byte[])
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.gid : int
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.NONE : byte[]
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.GzipParameters()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,byte)
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.initializeTables(int)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.languageEncodingFlag : boolean
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.bsLive : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setComment(String)
Comp: org.tukaani.xz.LZMA2InputStream
Comp: org.apache.commons.compress.archivers.arj.MainHeader.comment : String
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readFully(DataInputStream,byte[])
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(String,byte,boolean)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.filesize : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entryOffset : long
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf : ByteBuffer
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.crc32 : CRC32
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass()
Comp: org.apache.commons.compress.archivers.zip.JarMarker.getHeaderId()
Comp: org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byte[])
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.EncryptionAlgorithm
Comp: org.apache.commons.compress.archivers.sevenz.BindPair[]
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.STORED : ZipMethod
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.encoding : String
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeCreated : int
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.getInputStream()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setUserId(int)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.get()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.encoding : String
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.reset()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$402(ZipArchiveInputStream.CurrentEntry,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_2 : ZipMethod
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.storedCombinedCRC : int
Comp: org.apache.commons.compress.archivers.ArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.Feature.SPLITTING : Feature
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.streamBridge : StreamBridge
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.fileType : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.DD_SIG : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.readLiteralLength(int)
Comp: org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier.get()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.streamBridge : StreamBridge
Comp: org.apache.commons.compress.archivers.zip.ZipFile.closeQuietly(ZipFile)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.count(long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mtime : long
Comp: org.apache.commons.compress.archivers.sevenz.CoderBase.acceptableOptions : Class[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$614(ZipArchiveInputStream.CurrentEntry,long)
Comp: org.apache.commons.compress.archivers.sevenz.AES256SHA256Decoder.AES256SHA256Decoder()
Comp: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory.X0016_CertificateIdForCentralDirectory()
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.addEntry(int,byte,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.CLRI : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.getId()
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.2.{...}
Comp: org.apache.commons.compress.archivers.zip.ZipLong.getBytes(long)
Comp: org.tukaani.xz.LZMAOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.setCreateTime(ZipLong)
Comp: org.tukaani.xz.FinishableWrapperOutputStream
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getSize()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasLastModifiedDate()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.addEntry(int,byte)
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.out : OutputStream
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getCentralDirectoryLength()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.strongEncryptionFlag : boolean
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names : HashMap
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(ArchiveEntry)
Comp: org.apache.commons.compress.compressors.pack200.StreamBridge.close()
Comp: org.apache.commons.compress.changes.Change.isReplaceMode()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.write(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE.ADDR : SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readString(DataInputStream)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.1.$SwitchMap$org$apache$commons$compress$archivers$dump$DumpArchiveConstants$COMPRESSION_TYPE : int[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.generateMTFValues_yy : byte[]
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer : byte[]
Comp: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.CACHED_AVAILABLE : CachedAvailability
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.hashCode()
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.in : ArchiveInputStream
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_READ : PERMISSION
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ArArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.pack200.Pack200Strategy.newStreamBridge()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.readToNull(DataInputStream)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getGID()
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[])
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveInputStreamProviders : SortedMap
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.data : Data
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.getGID()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.endCompression()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.LZMACompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.name : String
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getLocalFileDataExtra()
Comp: org.apache.commons.compress.archivers.zip.X0016_CertificateIdForCentralDirectory
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isOldGNUSparse()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getLongUserId()
Comp: org.apache.commons.compress.archivers.zip.Zip64Mode.AsNeeded : Zip64Mode
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.TarArchiveEntry(File,String)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.CompressedEntry.transferToArchiveEntry()
Comp: org.apache.commons.compress.archivers.arj.MainHeader.encryptionVersion : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.NameAndComment.NameAndComment(byte[],byte[])
Comp: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.UnixStat
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveSummary.previousDumpDate : long
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ctime : long
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry()
Comp: org.apache.commons.compress.changes.ChangeSetResults
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.TarArchiveOutputStream(OutputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.med3(byte,byte,byte)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setSize(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.AES256SHA256 : SevenZMethod
Comp: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.closed : boolean
Comp: org.tukaani.xz.DeltaOptions
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setUserId(long)
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getUnicodeName()
Comp: long[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.entries : List
Comp: org.apache.commons.compress.utils.BitInputStream.BitInputStream(InputStream,ByteOrder)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.IWORK_ARCHIVE : FramedSnappyDialect
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(ZipLong,ZipLong)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.createTime : ZipLong
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.numberOptionOrDefault(Object,int)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.blockBuffer : byte[]
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataData()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(long)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(CpioArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getExtendedName(int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createDeferred(ScatterGatherBackingStoreSupplier)
Comp: org.apache.commons.compress.archivers.zip.NioZipEncoding.charset : Charset
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.buf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.mergeCentralDirectoryData(ZipExtraField[])
Comp: org.apache.commons.compress.archivers.ArchiveStreamProvider.createArchiveInputStream(String,InputStream,String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.finish()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short,String)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.close()
Comp: org.apache.commons.compress.changes.ChangeSetResults.addedFromStream(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_tPos : int
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.flushDeflater()
Comp: org.apache.commons.compress.archivers.sevenz.Coder[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getCentralDirectoryExtra()
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.parseFromCentralDirectoryData(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fallbackQSort3(int[],int[],int,int)
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.fileAccessMode : int
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.THROW : UnparseableExtraField
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.entrySize : long
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.endReached : boolean
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator(ExecutorService)
Comp: org.tukaani.xz.FilterOptions
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.userId : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setLinkName(String)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.UNKNOWN : ZipMethod
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getParseableExtraFieldsNoCopy()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveSparseEntry.isExtended : boolean
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.encoding : String
Comp: org.apache.commons.compress.utils.Iterators.addAll(Collection,Iterator)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getUnparseableOnly()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.header : TapeSegmentHeader
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getCrcValue()
Comp: org.apache.commons.compress.archivers.sevenz.Coder.decompressionMethodId : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[])
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod.BCJ_ARM_FILTER : SevenZMethod
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf : byte[]
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.ArchiveOutputStream()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.pos : long
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.currBlkIdx : int
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.SETUID : PERMISSION
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.name : String
Comp: org.apache.commons.compress.archivers.zip.ZipMethod[]
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.verifyLastChecksumAndReset()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getEntries(String)
Comp: org.apache.commons.compress.utils.Charsets.US_ASCII : Charset
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isDirectory()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.size : long
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setName(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.access$200(ZipArchiveOutputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.EMPTY_TAR_ARCHIVE_ENTRIES : TarArchiveEntry[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.equals(Object)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.userName : String
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.read(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.read0()
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.writeTrailer()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.adjustToLong(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedCombinedCRC : int
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.OutputStreamCompressor
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder.numberOptionOrDefault(Object)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMinor()
Comp: org.tukaani.xz.FilterOptions.getInputStream(InputStream)
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.hashCode()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.access$500(DumpArchiveEntry.TapeSegmentHeader)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability.DONT_CACHE : CachedAvailability
Comp: org.apache.commons.compress.archivers.zip.ZipLong.getBytes()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(long)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.BoundedInputStream.BoundedInputStream(InputStream,long)
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.getBytesRead()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,Pack200Strategy)
Comp: org.apache.commons.compress.utils.CountingOutputStream.flush()
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream.bufUsed : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.ArchiveOutputStream.closeArchiveEntry()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getBytes(long)
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.out : OutputStream
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOneByte()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(int)
Comp: org.apache.commons.compress.compressors.CompressorException.CompressorException(String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getGeneralPurposeBit()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasUsedZip64 : boolean
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.SevenZArchiveEntry()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.getOriginalName()
Comp: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.isLink()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasStream : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$600(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.parseTarHeader(byte[],ZipEncoding)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.encode(OutputStream,Object)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.count(int)
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatBigIntegerBinary(long,byte[],int,int,boolean)
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(TarArchiveEntry,String,Map)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.totalCodesRead : long
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasCreationDate(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.getZipArchiveEntry()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert16(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.AED_SIG : ZipLong
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.SnappyCompressorInputStream(InputStream,int)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.currentCompressedChunk : SnappyCompressorInputStream
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.BZIP2 : ZipMethod
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.decompressNextSymbol()
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getLinkedFile()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.isCompressed : boolean
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.getCreateJavaTime()
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.LZMA : ZipMethod
Comp: org.apache.commons.compress.archivers.zip.ZipLong.getValue(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy()
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.UTF8_ZIP_ENCODING : ZipEncoding
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,String)
Comp: org.apache.commons.compress.archivers.zip.BitStream.nextBit()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully(byte[],int,int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.selector : byte[]
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_copy : int[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.recordsPerBlock : int
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor.SeekableByteChannelCompressor(Deflater,SeekableByteChannel)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getZip64Extra(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.3.{...}
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding(String)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues2_pos : byte[]
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.outputStackLocation : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setInternalAttributes(int)
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.setCompressionLevel(int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.gid : long
Comp: org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int)
Comp: org.apache.commons.compress.archivers.zip.PKWareExtraHeader.headerId : ZipShort
Comp: org.tukaani.xz.LZMAInputStream.LZMAInputStream(InputStream)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.quadrant : char[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.entry : ZipArchiveEntry
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.ASCII : ZipEncoding
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.setDevMinor(int)
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.addRepeatOfPreviousCode()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.getLongValue(byte[])
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod[]
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.normalizeFileName(String,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.loc : long
Comp: org.apache.commons.compress.compressors.CompressorOutputStream
Comp: org.apache.commons.compress.archivers.zip.AbstractUnicodeExtraField.getLocalFileDataLength()
Comp: org.apache.commons.compress.archivers.zip.ZipLong.ZipLong(byte[],int)
Comp: org.apache.commons.compress.utils.CountingInputStream.count(long)
Comp: org.apache.commons.compress.archivers.sevenz.StartHeader
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.compressionDoneAt : long
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(String)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setHasLastModifiedDate(boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.calculateStreamMap(Archive)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getDevice()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION[]
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.localFileData : byte[]
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.equals(Object)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setChksum(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.currentOutputStream : CountingOutputStream
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.READ : UnparseableExtraField
Comp: org.apache.commons.compress.changes.Change.type : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.out : OutputStream
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupNoRandPartC()
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.incrementCodeSize()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream.count(int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock()
Comp: org.apache.commons.compress.utils.ServiceLoaderIterator.getNextServiceLoader()
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.operatingSystem : int
Comp: org.apache.commons.compress.compressors.bzip2.CRC
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.WORLD_WRITE : PERMISSION
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.ScatterZipOutputStream(ScatterGatherBackingStore,StreamCompressor)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.hitCentralDirectory : boolean
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.DumpArchiveEntry()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.matches(byte[],int)
Comp: org.apache.commons.compress.changes.Change.input : InputStream
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getNumberOfLinks()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.hbCreateDecodeTables(int[],int[],int[],char[],int,int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasZip64Extra(ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.blockSort(BZip2CompressorOutputStream.Data,int)
Comp: org.apache.commons.compress.archivers.zip.FallbackZipEncoding.decode(byte[])
Comp: org.apache.commons.compress.compressors.lzma.LZMAUtils.getUncompressedFilename(String)
Comp: org.tukaani.xz.LZMA2Options.getLc()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileEmptyFiles(DataOutput)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.in : InputStream
Comp: org.apache.commons.compress.compressors.pack200.TempFileCachingStreamBridge.TempFileCachingStreamBridge()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$300(ZipArchiveInputStream.CurrentEntry)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.currentFolderInputStream : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.LZMA2Decoder
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.calendarInstance : Calendar
Comp: org.apache.commons.compress.compressors.bzip2.BZip2Utils.getCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.read()
Comp: org.apache.commons.compress.archivers.zip.BinaryTree.BinaryTree(int)
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntry,InputStreamSupplier)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.count(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.currentChar : int
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.pushEncodedChar(ByteBuffer,char)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getSize()
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.centralData : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.addDummy()
Comp: org.apache.commons.compress.archivers.tar.TarUtils
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON : ArchiveStreamFactory
Comp: org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream.deflate()
Comp: org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer(String,byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFileNames(DataOutput)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getVolume()
Comp: org.apache.commons.compress.archivers.sevenz.Archive.Archive()
Comp: org.apache.commons.compress.archivers.zip.ZipLong.ZIP64_MAGIC : ZipLong
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.ino : int
Comp: org.apache.commons.compress.parallel.InputStreamSupplier.get()
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.archivers.arj.MainHeader.archiveSize : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraFields(boolean)
Comp: org.apache.commons.compress.compressors.FileNameUtil.compressSuffix : Map
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.getStatisticsMessage()
Comp: org.apache.commons.compress.archivers.dump.TapeInputStream.readOffset : int
Comp: org.apache.commons.compress.utils.IOUtils.copy(InputStream,OutputStream,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getCentralDirectoryData()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockSize100k : int
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.equals(Object)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.size : long
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.EXPANDING_LEVEL_3 : ZipMethod
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.CurrentEntry.access$302(ZipArchiveInputStream.CurrentEntry,InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(long,long)
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.closed : boolean
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField(ZipEightByteInteger,ZipEightByteInteger)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getBytesRead()
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.minimumMatchLength : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill()
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.fswap(int[],int,int)
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.HEADER_ID : ZipShort
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.count(int)
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.linkName : String
Comp: org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderCrc : long
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyDialect.streamIdentifier : boolean
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.writeEntryHeader(ArArchiveEntry)
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.getTableSize()
Comp: org.apache.commons.compress.archivers.jar.JarArchiveEntry.JarArchiveEntry(JarEntry)
Comp: org.apache.commons.compress.archivers.zip.Zip64Mode
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.getCodeSize()
Comp: org.apache.commons.compress.utils.BitInputStream
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.getModificationTime()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.mainHeader : MainHeader
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_hh : int[]
Comp: org.apache.commons.compress.archivers.zip.ScatterStatistics.mergingElapsed : long
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive)
Comp: org.apache.commons.compress.utils.BoundedInputStream.read()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.count(int)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.unsignedIntToSignedByte(int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.mode : int
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveInputStreamIterator.next : ArchiveEntry
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.setSize(long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int)
Comp: org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream.slideBuffer()
Comp: org.apache.commons.compress.utils.CountingInputStream.getBytesRead()
Comp: org.apache.commons.compress.compressors.lzw.LZWInputStream.setClearCode(int)
Comp: org.apache.commons.compress.archivers.zip.ZipUtil.signedByteToUnsignedInt(byte)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.copyFromZipInputStream(InputStream)
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.checksum : Checksum
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data
Comp: org.apache.commons.compress.utils.CRC32VerifyingInputStream.CRC32VerifyingInputStream(InputStream,long,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getComment()
Comp: org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.StreamCompressor(Deflater)
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.reAlignReading()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.hasCrc : boolean
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeStreamsInfo(DataOutput)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.addUnicodeExtraFields(ZipArchiveEntry,boolean,ByteBuffer)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map)
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.SimpleEncodingHolder.SimpleEncodingHolder(char[])
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.backingStore : ScatterGatherBackingStore
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtra(byte[])
Comp: org.apache.commons.compress.archivers.tar.TarConstants
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.getHasAccessDate()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.Entry.setSize(long)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.Zip64ExtendedInformationExtraField()
Comp: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.UnparseableExtraField.UnparseableExtraField(int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveEntry.lastModified : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.nInUse : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.sendMTFValues_cost : short[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.SEGMENT_TYPE
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.zipEncoding : ZipEncoding
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZipEightByteInteger(BigInteger)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupBlock()
Comp: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.decodeByte(byte)
Comp: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.isDirectory()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.getDevMajor()
Comp: org.apache.commons.compress.changes.Change.getEntry()
Comp: org.apache.commons.compress.compressors.xz.XZUtils.getCompressedFilename(String)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.resetCodeSize()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.holes : int
Comp: org.apache.commons.compress.compressors.deflate.DeflateParameters.setWithZlibHeader(boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.CurrentEntry.bytesRead : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.su_rNToGo : int
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.dateTimeAccessed : int
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close()
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.ScatterGatherBackingStoreCompressor.writeOut(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ZipFile.setSizesAndOffsetFromZip64Extra(ZipArchiveEntry,ZipFile.OffsetEntry,int)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.getExtraField(ZipShort)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.WAVPACK : ZipMethod
Comp: org.tukaani.xz.LZMAOutputStream
Comp: org.apache.commons.compress.archivers.zip.UnparseableExtraFieldData.centralDirectoryData : byte[]
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.close()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.useUnicodeExtraFields : boolean
Comp: org.apache.commons.compress.archivers.jar.JarArchiveOutputStream.JarArchiveOutputStream(OutputStream,String)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.setUseZip64(Zip64Mode)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.in : InputStream
Comp: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo.SubStreamsInfo()
Comp: org.apache.commons.compress.archivers.sevenz.DeltaDecoder
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setVersionMadeBy(int)
Comp: org.apache.commons.compress.changes.ChangeSet.ChangeSet()
Comp: org.apache.commons.compress.compressors.FileNameUtil.getCompressedFilename(String)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder.BZIP2Decoder()
Comp: org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore.getInputStream()
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.stack_ll : int[]
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.read(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.getLocalFileDataData()
Comp: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.CAFE_DOOD : byte[]
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.setTableSize(int)
Comp: org.apache.commons.compress.utils.CountingOutputStream.count(long)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE[].clone()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map,String,byte,String)
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.fileBased(File,int)
Comp: org.apache.commons.compress.archivers.zip.X7875_NewUnix.ONE_THOUSAND : BigInteger
Comp: org.apache.commons.compress.archivers.sevenz.Coders.CODER_MAP : Map
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setUID(long)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.getUserId()
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry : ZipArchiveEntry
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[])
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.method : int
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.fmap : int[]
Comp: org.apache.commons.compress.archivers.ar.ArArchiveOutputStream.finish()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.name : String
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.mainSort_runningOrder : int[]
Comp: org.apache.commons.compress.utils.ChecksumVerifyingInputStream.expectedChecksum : long
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setGeneralPurposeBit(GeneralPurposeBit)
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.setModifyTime(ZipEightByteInteger)
Comp: org.apache.commons.compress.compressors.xz.XZCompressorInputStream.matches(byte[],int)
Comp: org.apache.commons.compress.archivers.zip.ZipExtraField.parseFromLocalFileData(byte[],int,int)
Comp: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.setTime(long)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(boolean)
Comp: org.apache.commons.compress.utils.Charsets.UTF_8 : Charset
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest(ZipArchiveEntry,InputStreamSupplier)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isStarSparse()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.contentMethods : Iterable
Comp: org.apache.commons.compress.archivers.zip.ZipShort.getBytes()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel : SeekableByteChannel
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.reparseCentralDirectoryData(boolean,boolean,boolean,boolean)
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.getHeaderId()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator : Comparator
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.PERMISSION.GROUP_WRITE : PERMISSION
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveUtil.convert32(byte[],int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TYPE.CHRDEV : TYPE
Comp: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.UnsupportedZipFeatureException(ZipMethod,ZipArchiveEntry)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.BZip2CompressorInputStream(InputStream,boolean)
Comp: org.apache.commons.compress.archivers.ArchiveStreamFactory.1.{...}
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data.inUse : boolean[]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.compressedSize : long
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getHostOs()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writePackInfo(DataOutput)
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.out : LZMAOutputStream
Comp: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.ParallelScatterZipCreator()
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.read16(DataInputStream)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.getName()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.ZipArchiveEntry()
Comp: org.apache.commons.compress.archivers.jar.JarArchiveInputStream.JarArchiveInputStream(InputStream)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.writeEntryHeaderField(long,byte[],int,int,boolean)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readMainHeader()
Comp: org.apache.commons.compress.archivers.arj.ArjArchiveEntry.getLastModifiedDate()
Comp: org.apache.commons.compress.archivers.zip.ExplodingInputStream.dictionarySize : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isLink()
Comp: org.apache.commons.compress.archivers.zip.GeneralPurposeBit.useEncryption(boolean)
Comp: org.apache.commons.compress.archivers.zip.StreamCompressor.deflate()
Comp: org.apache.commons.compress.utils.Charsets.UTF_16 : Charset
Comp: org.apache.commons.compress.compressors.gzip.GzipParameters.getCompressionLevel()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File,byte[])
Comp: org.apache.commons.compress.archivers.arj.LocalFileHeader.extendedHeaders : byte[][]
Comp: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setCreationDate(long)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.hasCompressionLevelChanged : boolean
Comp: org.tukaani.xz.LZMA2Options.setDictSize(int)
Comp: org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG : ZipLong
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry()
Comp: org.apache.commons.compress.archivers.tar.TarUtils.DEFAULT_ENCODING : ZipEncoding
Comp: org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder()
Comp: org.apache.commons.compress.archivers.zip.X0015_CertificateIdForFile
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.$VALUES : COMPRESSION_TYPE[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.ino : int
Comp: org.apache.commons.compress.archivers.sevenz.Coders.CopyDecoder
Comp: org.apache.commons.compress.archivers.zip.CircularBuffer.writeIndex : int
Comp: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.this$0 : ZipFile
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(boolean)
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator.hasNext()
Comp: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory()
Comp: org.apache.commons.compress.archivers.zip.ZipEightByteInteger.ZERO : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream)
Comp: org.apache.commons.compress.archivers.zip.ZipMethod.getCode()
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated()
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethod
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.hasHitEOF : boolean
Comp: org.apache.commons.compress.changes.ChangeSetPerformer
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.nInUse : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData()
Comp: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf : byte[]
Comp: org.apache.commons.compress.archivers.zip.UnrecognizedExtraField.localData : byte[]
Comp: org.apache.commons.compress.archivers.zip.UnicodeCommentExtraField.getHeaderId()
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.offset : long
Comp: org.apache.commons.compress.compressors.xz.XZUtils.getUncompressedFilename(String)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.CpioArchiveEntry(short)
Comp: org.apache.commons.compress.archivers.sevenz.SubStreamsInfo
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.platform : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeCounted(byte[])
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.X000A_NTFS()
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGlobalPaxHeader()
Comp: org.apache.commons.compress.archivers.zip.ZipShort.equals(Object)
Comp: org.apache.commons.compress.archivers.sevenz.Coders.DummyByteAddingInputStream.addDummyByte : boolean
Comp: org.apache.commons.compress.archivers.zip.ZipFile.archiveName : String
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.type : TYPE
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.mode : int
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ArchiveEntryIterator
Comp: org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf : byte[]
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BZIP2Decoder
Comp: org.apache.commons.compress.utils.CountingOutputStream.close()
Comp: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.sevenz.SevenZMethodConfiguration.options : Object
Comp: org.apache.commons.compress.archivers.zip.ZipFile.access$600(ZipFile)
Comp: org.apache.commons.compress.changes.Change.getInput()
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.BZip2CompressorOutputStream(OutputStream)
Comp: org.apache.commons.compress.archivers.dump.UnsupportedCompressionAlgorithmException.UnsupportedCompressionAlgorithmException(String)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.encoding : String
Comp: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.opts : FilterOptions
Comp: org.apache.commons.compress.archivers.zip.UnshrinkingInputStream.setPrefix(int,int)
Comp: org.apache.commons.compress.compressors.xz.XZUtils.CachedAvailability[]
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.atime : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.computedBlockCRC : int
Comp: org.apache.commons.compress.archivers.tar.TarArchiveEntry.isGNULongNameEntry()
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.finalize()
Comp: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.nestedEnum : Enumeration
Comp: org.apache.commons.compress.archivers.zip.X000A_NTFS.TIME_ATTR_TAG : ZipShort
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.Data.cftab : int[]
Comp: org.apache.commons.compress.archivers.zip.Zip64RequiredException.Zip64RequiredException(String)
Comp: org.apache.commons.compress.utils.Sets.newHashSet(Object[])
Comp: org.apache.commons.compress.archivers.tar.TarUtils.parseBoolean(byte[],int)
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.blockRandomised : boolean
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveEntry.min : long
Comp: org.apache.commons.compress.utils.IOUtils.closeQuietly(Closeable)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding()
Comp: org.apache.commons.compress.archivers.zip.ZipEncodingHelper.simpleEncodings : Map
Comp: org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField.size : ZipEightByteInteger
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.active : DumpArchiveEntry
Comp: org.apache.commons.compress.archivers.tar.TarUtils.formatCheckSumOctalBytes(long,byte[],int,int)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveConstants.COMPRESSION_TYPE.BZLIB : COMPRESSION_TYPE
Comp: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write(byte[],int,int)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.count(int)
Comp: org.apache.commons.compress.compressors.bzip2.BlockSort.workLimit : int
Comp: org.apache.commons.compress.archivers.zip.BitStream.nextBits(int)
Comp: org.apache.commons.compress.archivers.zip.AsiExtraField.setUserId(int)
Comp: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readOnce(byte[],int,int)
Comp: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(int,boolean)
Comp: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.UnicodeExtraFieldPolicy(String)
Comp: org.apache.commons.compress.archivers.dump.DumpArchiveEntry.TapeSegmentHeader.getCount()
Comp: org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream.DeflateCompressorOutputStream(OutputStream,DeflateParameters)
Comp: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.TarArchiveInputStream(InputStream,int,String)
Comp: org.apache.commons.compress.compressors.z.ZCompressorInputStream.incrementCodeSize()
Comp: org.apache.commons.compress.archivers.sevenz.StartHeader.nextHeaderOffset : long
Comp: org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.setupRandPartA()
Comp: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int


[OUTPUT] Initial |S| = 365
[OUTPUT] Analysing Commits ... 
[DEBUG] === Inspecting commit: 613c5ae7 : [b29395d bump release version, use latest release apidocs] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 244e8b80 : [cd6de3a embrace parent 42] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: c394e20e : [cd6de3a embrace parent 42] .travis.yml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6400c2b6 : [35891d3 bump version] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: c4ea6b86 : [35891d3 bump version] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1487a9b0 : [4543847 fix release notes] RELEASE-NOTES.txt ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5af84f7b : [8c6c659 prepare RC1 of Commons Compress 1.13] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1af250ff : [8c6c659 prepare RC1 of Commons Compress 1.13] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: e00de02c : [e87e838 re-generated various generated pages] src/site/xdoc/mail-lists.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7cec6dbc : [e87e838 re-generated various generated pages] src/site/xdoc/issue-tracking.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: ee791588 : [e87e838 re-generated various generated pages] CONTRIBUTING.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: ef6c48fe : [592dac7 Updated download page in preparation for 1.13 release.] src/site/xdoc/download_compress.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6e057d6f : [b9acd7c update release notes for 1.13] RELEASE-NOTES.txt ===
[DEBUG] 
[DEBUG] === Inspecting commit: db92cdcb : [810883c use jacoco for coveralls report] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: bfe7211c : [810883c use jacoco for coveralls report] .travis.yml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 21d93f0b : [72f048d make JIRA report more useful] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 438a517c : [71df15e use latest version of japicmp] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 0052d944 : [1bc62d6 no reason to specify newVersion in japicmp] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 215da506 : [b3d0c26 use jacoco instead of cobertura, use japicmp] src/site/resources/profile.japicmp ===
[DEBUG] 
[DEBUG] === Inspecting commit: 50c9b560 : [b3d0c26 use jacoco instead of cobertura, use japicmp] src/site/resources/profile.jacoco ===
[DEBUG] 
[DEBUG] === Inspecting commit: fa3ed1d7 : [b3d0c26 use jacoco instead of cobertura, use japicmp] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1bbbde4a : [bf88f6d false positives] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 345e5f60 : [bf88f6d false positives] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: e0d32f5e : [ea35f64 remove unused code] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictSize(Object) : org.apache.commons.compress.archivers.sevenz.LZMADecoder : (83, 88)
[DEBUG] 
[DEBUG] === Inspecting commit: cd89a282 : [c497504 COMPRESS-372 record changes] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 429ca044 : [0f4caeb COMPRESS-372 add latest release API doc link] src/site/site.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: ce9d97e1 : [85184c3 COMPRESS-377 properly close StreamCompressor] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close() : org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close() : (121, 128) --> (121, 129)
[DEBUG] 
[DEBUG] === Inspecting commit: 93ced5a0 : [85184c3 COMPRESS-377 properly close StreamCompressor] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 204c7ba1 : [ce6c33a flag false positive] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: ae2b71da : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(int) : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(int) : (98, 101) --> (98, 101)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(byte[],int,int) : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(byte[],int,int) : (57, 96) --> (57, 96)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_1_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (108, 108)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_4_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (111, 111)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_3_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (110, 110)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_2_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (109, 109)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_7_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (114, 114)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_0_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (107, 107)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_5_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (112, 112)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_6_START : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (113, 113)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_4_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (111, 111)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_0_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (107, 107)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_3_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (110, 110)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_6_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (113, 113)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_2_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (109, 109)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_1_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (108, 108)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_7_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (114, 114)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_5_start : int : org.apache.commons.compress.compressors.snappy.PureJavaCrc32C : (112, 112)
[DEBUG] 
[DEBUG] === Inspecting commit: 342df448 : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf : byte[] : org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf : byte[] : (61, 61) --> (61, 63)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer : byte[] : org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer : byte[] : (60, 60) --> (60, 61)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.StreamCompressor.BUFFER_SIZE : int : org.apache.commons.compress.archivers.zip.StreamCompressor : (59, 59)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.StreamCompressor.bufferSize : int : org.apache.commons.compress.archivers.zip.StreamCompressor : (59, 59)
[DEBUG] 
[DEBUG] === Inspecting commit: e1593871 : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.peek() : org.apache.commons.compress.archivers.dump.TapeInputStream.peek() : (211, 230) --> (211, 230)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord() : org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord() : (232, 248) --> (232, 248)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int) : org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int) : (107, 151) --> (107, 151)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : (153, 197) --> (153, 197)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.read() : org.apache.commons.compress.archivers.dump.TapeInputStream.read() : (97, 105) --> (97, 105)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean) : org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean) : (53, 83) --> (53, 83)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.dump.TapeInputStream.RECORD_SIZE : int : org.apache.commons.compress.archivers.dump.TapeInputStream : (41, 41)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.dump.TapeInputStream.recordSize : int : org.apache.commons.compress.archivers.dump.TapeInputStream : (41, 41)
[DEBUG] 
[DEBUG] === Inspecting commit: 5a8bc68b : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.StreamBridge.stop() : org.apache.commons.compress.compressors.pack200.StreamBridge.stop() : (63, 74) --> (63, 74)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.StreamBridge.getInput() : org.apache.commons.compress.compressors.pack200.StreamBridge.getInput() : (46, 56) --> (46, 56)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock : Object : org.apache.commons.compress.compressors.pack200.StreamBridge : (36, 36)
[DEBUG] Delete: FIELD: org.apache.commons.compress.compressors.pack200.StreamBridge.INPUT_LOCK : Object : org.apache.commons.compress.compressors.pack200.StreamBridge : (36, 36)
[DEBUG] 
[DEBUG] === Inspecting commit: b766a327 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32() : (926, 939) --> (925, 938)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]) : org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]) : (954, 996) --> (953, 995)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory() : (867, 895) --> (866, 894)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>) : (633, 725) --> (632, 724)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader() : org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader() : (1073, 1082) --> (1072, 1081)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder() : org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder() : (350, 364) --> (349, 363)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64() : (897, 924) --> (896, 923)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : (597, 631) --> (596, 630)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String) : org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String) : (398, 414) --> (397, 413)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : (1026, 1071) --> (1025, 1070)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.shortBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (148, 148)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (150, 150)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator : Comparator<ZipArchiveEntry> : org.apache.commons.compress.archivers.zip.ZipFile : (1188, 1216)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (149, 149)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (151, 151)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (145, 145)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (147, 147)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.wordBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (146, 146)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (152, 152)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (148, 148)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.OFFSET_COMPARATOR : Comparator<ZipArchiveEntry> : org.apache.commons.compress.archivers.zip.ZipFile : (1189, 1217)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.WORD_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (146, 146)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.CFH_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (147, 147)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.CFH_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (151, 151)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipFile : (145, 145)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.WORD_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (150, 150)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (149, 149)
[DEBUG] 
[DEBUG] === Inspecting commit: 23cfd01c : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor() : (730, 761) --> (730, 761)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long) : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long) : (532, 562) --> (532, 562)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive() : (912, 926) --> (912, 926)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long) : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long) : (965, 987) --> (965, 987)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry() : (219, 325) --> (219, 325)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (156, 156)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (159, 159)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (157, 157)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (155, 155)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (158, 158)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.TWO_DWORD_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (159, 159)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.SHORT_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (157, 157)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.WORD_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (158, 158)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.SKIP_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (156, 156)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH_BUF : byte[] : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (155, 155)
[DEBUG] 
[DEBUG] === Inspecting commit: dd2ae574 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData() : org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData() : (350, 381) --> (350, 381)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf : byte[] : org.apache.commons.compress.archivers.tar.TarArchiveInputStream : (52, 52)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.SMALL_BUF : byte[] : org.apache.commons.compress.archivers.tar.TarArchiveInputStream : (52, 52)
[DEBUG] 
[DEBUG] === Inspecting commit: 6ddc0a45 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int) : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int) : (276, 281) --> (276, 281)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry() : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry() : (223, 274) --> (223, 274)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (86, 86)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (85, 85)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (87, 87)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.SIX_BYTES_BUF : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (87, 87)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.TWO_BYTES_BUF : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (85, 85)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.FOUR_BYTES_BUF : byte[] : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream : (86, 86)
[DEBUG] 
[DEBUG] === Inspecting commit: 6ebc8178 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry() : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry() : (75, 166) --> (75, 166)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (62, 62)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (59, 59)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (61, 61)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (60, 60)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (58, 58)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.NAME_BUF : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (58, 58)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LAST_MODIFIED_BUF : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (59, 59)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ID_BUF : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (60, 60)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LENGTH_BUF : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (62, 62)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.FILE_MODE_BUF : byte[] : org.apache.commons.compress.archivers.ar.ArArchiveInputStream : (61, 61)
[DEBUG] 
[DEBUG] === Inspecting commit: 26e82725 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveInputStream.read() : org.apache.commons.compress.archivers.ArchiveInputStream.read() : (66, 83) --> (66, 83)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveInputStream.single : byte[] : org.apache.commons.compress.archivers.ArchiveInputStream : (42, 42)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.ArchiveInputStream.SINGLE : byte[] : org.apache.commons.compress.archivers.ArchiveInputStream : (42, 42)
[DEBUG] 
[DEBUG] === Inspecting commit: 1281d5ea : [5e0980f whitelist byte-arrays deliberately shared in package] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 2c30ee17 : [5e0980f whitelist byte-arrays deliberately shared in package] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 867966d7 : [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean) : org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean) : (180, 199) --> (180, 199)
[DEBUG] 
[DEBUG] === Inspecting commit: 4b23f80d : [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : (153, 197) --> (153, 197)
[DEBUG] 
[DEBUG] === Inspecting commit: e30c9d25 : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 1249628e : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: b9575302 : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 09abf153 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: ef3adcd4 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: aa1de082 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: b1537829 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: b6b8b823 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 0b7ccf3f : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 73c87f12 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: ce13209e : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 3d15ac14 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: ad40f5bb : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: d14d9d0e : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 22b75f2a : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 26b669e6 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 0d085efa : [b03521d whitespace] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: f6048cbc : [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object) : org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object) : (102, 113) --> (98, 105)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream) : org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream) : (68, 85) --> (68, 81)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object) : org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object) : (54, 66) --> (54, 66)
[DEBUG] 
[DEBUG] === Inspecting commit: e8242b0f : [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(Coder,InputStream) : org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(Coder,InputStream) : (57, 62) --> (57, 62)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(Object) : org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(Object) : (50, 55) --> (50, 55)
[DEBUG] 
[DEBUG] === Inspecting commit: facaf054 : [587430d properly make UnsupportedZipFeatureException Serializable] src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry : ZipArchiveEntry : org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry : ZipArchiveEntry : (31, 31) --> (31, 32)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.serialVersionUID : long : org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.serialVersionUID : long : (32, 32) --> (32, 34)
[DEBUG] 
[DEBUG] === Inspecting commit: b47f1377 : [5294726 improve null-safety] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry) : org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry) : (371, 380) --> (371, 380)
[DEBUG] 
[DEBUG] === Inspecting commit: e50d19f6 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 99317f97 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: cdf1d691 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 6d9e254b : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: a65b28e1 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: c274002f : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 9166e399 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock() : org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock() : (181, 221) --> (181, 221)
[DEBUG] 
[DEBUG] === Inspecting commit: 002eb601 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish() : org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish() : (126, 145) --> (126, 145)
[DEBUG] 
[DEBUG] === Inspecting commit: d39d0669 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass() : org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass() : (448, 451) --> (448, 453)
[DEBUG] 
[DEBUG] === Inspecting commit: df8c6210 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next() : org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next() : (274, 277) --> (274, 278)
[DEBUG] 
[DEBUG] === Inspecting commit: edbf0241 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.LFH_OFFSET_FOR_FILENAME_LENGTH : long : org.apache.commons.compress.archivers.zip.ZipFile.LFH_OFFSET_FOR_FILENAME_LENGTH : long : (1010, 1023) --> (1010, 1025)
[DEBUG] 
[DEBUG] === Inspecting commit: 96d5c830 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory() : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory() : (1354, 1420) --> (1354, 1420)
[DEBUG] 
[DEBUG] === Inspecting commit: 4e3fc2b8 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive() : (911, 925) --> (911, 925)
[DEBUG] 
[DEBUG] === Inspecting commit: 4edfd224 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream) : org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream) : (222, 254) --> (222, 254)
[DEBUG] 
[DEBUG] === Inspecting commit: 3f9d8ac1 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean) : org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean) : (180, 199) --> (180, 199)
[DEBUG] 
[DEBUG] === Inspecting commit: d91174ca : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map<String, String>,String,byte,String) : org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map<String, String>,String,byte,String) : (642, 693) --> (642, 693)
[DEBUG] 
[DEBUG] === Inspecting commit: eaf1462f : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry) : (431, 445) --> (431, 445)
[DEBUG] 
[DEBUG] === Inspecting commit: 8d6d7f4d : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long) : (153, 197) --> (153, 197)
[DEBUG] 
[DEBUG] === Inspecting commit: c95cc044 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry() : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry() : (228, 319) --> (228, 319)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI() : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI() : (171, 193) --> (171, 193)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS() : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS() : (195, 217) --> (195, 217)
[DEBUG] 
[DEBUG] === Inspecting commit: 95404941 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry) : org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry) : (308, 336) --> (308, 336)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean) : org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean) : (338, 367) --> (338, 367)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int) : org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int) : (509, 533) --> (509, 533)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry) : org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry) : (275, 306) --> (275, 306)
[DEBUG] 
[DEBUG] === Inspecting commit: 3339d4a1 : [d5867f1 run rat check on travis] .travis.yml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 3d75817d : [a172b4b Move apache-rat configuration from site to pluginManagement section, so that it also applies when mvn apache-rat:check is run.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: dcecc6e0 : [726ba6f COMPRESS-367 record Mike Mole's patch] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: bae962cb : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/resources/invalid-zip.zip ===
[DEBUG] 
[DEBUG] === Inspecting commit: cf4c42fc : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: aaeb0697 : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: c20ca719 : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry() : (219, 324) --> (219, 325)
[DEBUG] 
[DEBUG] === Inspecting commit: eaca4c73 : [e0c83d2 add a few more patterns to .gitattributes] .gitattributes ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1cb282ef : [8de4b8a line-ends] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: e6cb7146 : [8de4b8a line-ends] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: cac82518 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 335afb15 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2d360ebe : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: d9eed1f5 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: a1319194 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: b51c1230 : [ffe346a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 54c412a9 : [6c52318 Don't need local var.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry) : org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry) : (530, 552) --> (530, 551)
[DEBUG] 
[DEBUG] === Inspecting commit: a954595d : [c3d2cec [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry) : org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry) : (530, 558) --> (530, 552)
[DEBUG] 
[DEBUG] === Inspecting commit: 69542460 : [05415c0 Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 3546cb85 : [7b7f490 Formatting.] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 3494fa5d : [eda3a02 Typo.] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: f82ff584 : [5c9661c param name 'input' should not hide field.] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[]) : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[]) : (189, 191) --> (189, 191)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,boolean) : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,boolean) : (205, 211) --> (205, 211)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int) : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int) : (201, 203) --> (201, 203)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],boolean) : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],boolean) : (197, 199) --> (197, 199)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[]) : org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[]) : (193, 195) --> (193, 195)
[DEBUG] 
[DEBUG] === Inspecting commit: ac85b9e6 : [f1a5821 Better local variable name.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : (462, 543) --> (462, 543)
[DEBUG] 
[DEBUG] === Inspecting commit: f25487f9 : [a428e42 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : (460, 541) --> (462, 543)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR_HEADER_SIZE : int : org.apache.commons.compress.archivers.ArchiveStreamFactory : (91, 91)
[DEBUG] 
[DEBUG] === Inspecting commit: d1379de1 : [03239b0 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : (458, 539) --> (460, 541)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP_SIGNATURE_SIZE : int : org.apache.commons.compress.archivers.ArchiveStreamFactory : (91, 91)
[DEBUG] 
[DEBUG] === Inspecting commit: dbda57bb : [7145b4a Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream) : (456, 537) --> (458, 539)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.SIGNATURE_SIZE : int : org.apache.commons.compress.archivers.ArchiveStreamFactory : (91, 91)
[DEBUG] 
[DEBUG] === Inspecting commit: 88299e8d : [a214d4c Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: ba6447fb : [3fc9325 Unnecessary cast from int to int.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[]) : org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[]) : (35, 44) --> (35, 44)
[DEBUG] 
[DEBUG] === Inspecting commit: dfb6fbaa : [8954230 Format nit.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: bb1b39a4 : [35523dd Fix Javadoc warning.] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 9d6e4c98 : [703715e [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 7cef611e : [3fdcafd [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 2317d007 : [b9153ca [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>) : org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>) : (109, 161) --> (109, 151)
[DEBUG] 
[DEBUG] === Inspecting commit: 437cb749 : [2be44aa Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: f506f5b2 : [4d55183 In-line local variable.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : (119, 123) --> (119, 122)
[DEBUG] 
[DEBUG] === Inspecting commit: f50acfa2 : [9f468f1 [COMPRESS-362] Bullet-proof code using try-with-resources statements] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader() : org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader() : (214, 267) --> (214, 267)
[DEBUG] 
[DEBUG] === Inspecting commit: 1c540da5 : [fe5ffa6 Document new service loader feature.] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: f6c0fabd : [fe5ffa6 Document new service loader feature.] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5dc1fd17 : [735ba6d Document the 'current' (next) release is 1.13 and requires Java 7.] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: e85ab262 : [1686712 Rename section for 1.13.] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 52255beb : [332b7a3 Reverse order of what's new subsections: the latest comes first.] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 62ca5b2f : [398c102 Link to 1.13 Javadocs.] src/site/site.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: a90b397d : [427d742 Update maven-pmd-plugin from 3.6 to 3.7.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: df2a0069 : [c55c6c8 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 01204ddc : [d4c3261 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 9501525c : [696dbe9 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 5e827a76 : [dd9f895 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : (119, 122) --> (119, 123)
[DEBUG] 
[DEBUG] === Inspecting commit: 068495b2 : [7e69189 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 5683f4d2 : [fa4f029 Formatting.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 328cd2c2 : [c7c2fe4 Update findbugs-maven-plugin from 3.0.3 to 3.0.4.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 890f8fcf : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.FlushShieldFilterOutputStream : org.apache.commons.compress.utils.FlushShieldFilterOutputStream : (26, 40)
[DEBUG] 
[DEBUG] === Inspecting commit: 8d89dca5 : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object) : org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object) : (46, 55) --> (46, 51)
[DEBUG] 
[DEBUG] === Inspecting commit: 2f09bbdc : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object) : (119, 127) --> (119, 122)
[DEBUG] 
[DEBUG] === Inspecting commit: 0439e56d : [99eb4cb Remove unused imports.] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 4cb7917d : [99eb4cb Remove unused imports.] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: fec75d1b : [99eb4cb Remove unused imports.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 520f52a0 : [d5f3062 the new ServiceLoader stuff is worth a special notice] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 9e321058 : [66726ea COMPRESS-375 record changes made by Plamen] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 201c2566 : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier : org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier : (24, 40)
[DEBUG] 
[DEBUG] === Inspecting commit: a94bb274 : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: f433dd5d : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier) : org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator : (196, 220)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier) : org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator : (139, 150)
[DEBUG] 
[DEBUG] === Inspecting commit: 9906de5c : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.archivers.sevenz.LZMADecoder : org.apache.commons.compress.archivers.sevenz.LZMADecoder : (30, 121)
[DEBUG] 
[DEBUG] === Inspecting commit: 78239032 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1d79fa9a : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfigurationTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 18e604ab : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: c8dccad9 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/limitations.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6b26db1b : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2602bc53 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 18cfc4f0 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java ---
[DEBUG] Delete: CLASS: org.apache.commons.compress.archivers.sevenz.Coders.LZMADecoder : org.apache.commons.compress.archivers.sevenz.Coders : (102, 116)
[DEBUG] 
[DEBUG] === Inspecting commit: 47968788 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 9058043d : [e8cee81 copy paste error] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: e7f1444a : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream : org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream : (28, 80)
[DEBUG] 
[DEBUG] === Inspecting commit: 9f3e4ddb : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 01dd4a37 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/limitations.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 96f126ad : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: ebc96f8e : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 70c16590 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames() : org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames() : (577, 580) --> (582, 585)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream) : org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream) : (493, 545) --> (494, 550)
[DEBUG] 
[DEBUG] === Inspecting commit: cb41d57d : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5ca95e56 : [1a31dec upgrade XZ for Java dependency] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6913417a : [c1e7372 CONTRIBUTING.md: replace references to commons-text with references to commons-compress] CONTRIBUTING.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 275e5792 : [cf1362e add CONTRIBUTING.md to fix link in README.md] CONTRIBUTING.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2d030984 : [5dab55a README.md: fix javadoc link] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 65021b5c : [0b04d80 README.md: use latest released version in dependency declaration example] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6ce41fee : [14441db README.md: fix jira link] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5348c008 : [7c93eb1 Update README.md.] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 873f4790 : [a99b6bb Add badges.] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: 96d2829c : [e126bf9 Add README.md as generated by 'mvn commons:readme-md'] README.md ===
[DEBUG] 
[DEBUG] === Inspecting commit: aa4dd8f8 : [db8bdf6 Enable TravisCI.] .travis.yml ===
[DEBUG] 
[DEBUG] === Inspecting commit: eca66f08 : [db8bdf6 Enable TravisCI.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7bc0d58c : [350f01c [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: e7e1e35c : [350f01c [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: a9a0575a : [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean) : org.apache.commons.compress.compressors.CompressorStreamProvider : (34, 57)
[DEBUG] Delete: METHOD: org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream) : org.apache.commons.compress.compressors.CompressorStreamProvider : (34, 52)
[DEBUG] 
[DEBUG] === Inspecting commit: 1163b497 : [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream) : org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream) : (415, 486) --> (415, 435)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders() : (160, 199) --> (160, 199)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders() : (201, 241) --> (201, 241)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>) : org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>) : (286, 291) --> (286, 291)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean) : org.apache.commons.compress.compressors.CompressorStreamFactory : (437, 491)
[DEBUG] 
[DEBUG] === Inspecting commit: 59bd1515 : [545c399 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: c6e7f564 : [22edc12 [COMPRESS-369]] src/test/resources/META-INF/services/org.apache.commons.compress.archivers.ArchiveStreamProvider ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7b222004 : [22edc12 [COMPRESS-369]] src/test/java/org/apache/commons/compress/archivers/TestArchiveStreamProvider.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: d9b9f3ba : [22edc12 [COMPRESS-369]] src/test/java/org/apache/commons/compress/archivers/ArchiveServiceLoaderTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 9696cbcc : [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.archivers.ArchiveStreamProvider : org.apache.commons.compress.archivers.ArchiveStreamProvider : (26, 88)
[DEBUG] 
[DEBUG] === Inspecting commit: 61567296 : [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream) : (182, 250) --> (300, 315)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding : String : org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding : String : (127, 130) --> (149, 154)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream) : org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream) : (252, 306) --> (380, 395)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String) : org.apache.commons.compress.archivers.ArchiveStreamFactory : (164, 166)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set<String>,ArchiveStreamProvider,TreeMap<String, ArchiveStreamProvider>) : org.apache.commons.compress.archivers.ArchiveStreamFactory : (154, 159)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (209, 248)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (160, 162)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (547, 550)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (531, 537)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String) : org.apache.commons.compress.archivers.ArchiveStreamFactory : (317, 378)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (150, 152)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (539, 545)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String) : org.apache.commons.compress.archivers.ArchiveStreamFactory : (397, 446)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (168, 207)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames() : org.apache.commons.compress.archivers.ArchiveStreamFactory : (552, 555)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveInputStreamProviders : SortedMap<String, ArchiveStreamProvider> : org.apache.commons.compress.archivers.ArchiveStreamFactory : (146, 146)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveOutputStreamProviders : SortedMap<String, ArchiveStreamProvider> : org.apache.commons.compress.archivers.ArchiveStreamFactory : (148, 148)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON : ArchiveStreamFactory : org.apache.commons.compress.archivers.ArchiveStreamFactory : (91, 91)
[DEBUG] 
[DEBUG] === Inspecting commit: a9c16a4e : [22edc12 [COMPRESS-369]] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 00d8a6cc : [a61a952 Better assert failure message.] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6edbbad8 : [c4a5b14 Add org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString()] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 028a11ba : [c49ccc9 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 166a7e9d : [263513a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: f452b25b : [f98b32e [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 5be44c82 : [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Sets.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/Sets.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.Sets : org.apache.commons.compress.utils.Sets : (25, 48)
[DEBUG] 
[DEBUG] === Inspecting commit: 0c2b6bd7 : [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames() : org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames() : (279, 284) --> (277, 280)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames() : org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames() : (272, 277) --> (272, 275)
[DEBUG] 
[DEBUG] === Inspecting commit: a208a81a : [f965bc2 [COMPRESS-368]] src/test/resources/META-INF/services/org.apache.commons.compress.compressors.CompressorStreamProvider ===
[DEBUG] 
[DEBUG] === Inspecting commit: f0dbb665 : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 42b2edbd : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorServiceLoaderTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: bc8db5f6 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/ServiceLoaderIterator.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/ServiceLoaderIterator.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.ServiceLoaderIterator : org.apache.commons.compress.utils.ServiceLoaderIterator : (27, 91)
[DEBUG] 
[DEBUG] === Inspecting commit: 9f91f5a9 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Lists.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/Lists.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.Lists : org.apache.commons.compress.utils.Lists : (25, 59)
[DEBUG] 
[DEBUG] === Inspecting commit: c1b081d3 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Iterators.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/Iterators.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.Iterators : org.apache.commons.compress.utils.Iterators : (26, 59)
[DEBUG] 
[DEBUG] === Inspecting commit: 184cd142 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.compressors.CompressorStreamProvider : org.apache.commons.compress.compressors.CompressorStreamProvider : (26, 86)
[DEBUG] 
[DEBUG] === Inspecting commit: 85b7e6c3 : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 723a4921 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream) : org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream) : (325, 371) --> (490, 542)
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream) : org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream) : (261, 323) --> (413, 484)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getPack200() : org.apache.commons.compress.compressors.CompressorStreamFactory : (561, 563)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton() : org.apache.commons.compress.compressors.CompressorStreamFactory : (549, 551)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getBzip2() : org.apache.commons.compress.compressors.CompressorStreamFactory : (553, 555)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory : (593, 599)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String) : org.apache.commons.compress.compressors.CompressorStreamFactory : (486, 488)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory : (601, 607)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyRaw() : org.apache.commons.compress.compressors.CompressorStreamFactory : (577, 579)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getGzip() : org.apache.commons.compress.compressors.CompressorStreamFactory : (557, 559)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate() : org.apache.commons.compress.compressors.CompressorStreamFactory : (585, 587)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator() : org.apache.commons.compress.compressors.CompressorStreamFactory : (286, 288)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames() : org.apache.commons.compress.compressors.CompressorStreamFactory : (279, 284)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyFramed() : org.apache.commons.compress.compressors.CompressorStreamFactory : (573, 575)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory : (189, 228)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory : (230, 270)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>) : org.apache.commons.compress.compressors.CompressorStreamFactory : (182, 187)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getZ() : org.apache.commons.compress.compressors.CompressorStreamFactory : (581, 583)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getXz() : org.apache.commons.compress.compressors.CompressorStreamFactory : (565, 567)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getLzma() : org.apache.commons.compress.compressors.CompressorStreamFactory : (569, 571)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders() : org.apache.commons.compress.compressors.CompressorStreamFactory : (290, 292)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames() : org.apache.commons.compress.compressors.CompressorStreamFactory : (272, 277)
[DEBUG] Insert: METHOD: org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressUntilEOF() : org.apache.commons.compress.compressors.CompressorStreamFactory : (589, 591)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.CompressorStreamFactory.compressorInputStreamProviders : SortedMap<String, CompressorStreamProvider> : org.apache.commons.compress.compressors.CompressorStreamFactory : (172, 172)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.CompressorStreamFactory.compressorOutputStreamProviders : SortedMap<String, CompressorStreamProvider> : org.apache.commons.compress.compressors.CompressorStreamFactory : (173, 173)
[DEBUG] Insert: FIELD: org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON : CompressorStreamFactory : org.apache.commons.compress.compressors.CompressorStreamFactory : (88, 88)
[DEBUG] 
[DEBUG] === Inspecting commit: baa76c5f : [f965bc2 [COMPRESS-368]] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1bc9a1d1 : [f538f38 avoid overflow when resizing] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : (131, 145) --> (133, 153)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int) : (160, 169) --> (168, 181)
[DEBUG] Insert: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.NAIVE_RESIZE_LIMIT : int : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (40, 40)
[DEBUG] 
[DEBUG] === Inspecting commit: abb8a68d : [46f57bf properly return -1 from read on EOF] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: ac883128 : [46f57bf properly return -1 from read on EOF] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : (104, 116) --> (104, 119)
[DEBUG] 
[DEBUG] === Inspecting commit: 741de3b7 : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: d6038d25 : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: c4e0997c : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(int) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (64, 73)
[DEBUG] 
[DEBUG] === Inspecting commit: faf5faf9 : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel) : org.apache.commons.compress.archivers.zip.ZipFile : (222, 237)
[DEBUG] 
[DEBUG] === Inspecting commit: d81ca039 : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (104, 117)
[DEBUG] 
[DEBUG] === Inspecting commit: f367cf13 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: ed868d74 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: d56990ef : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/site/xdoc/zip.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2a3b06fc : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: d5e558f4 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String) : org.apache.commons.compress.archivers.zip.ZipFile : (222, 240)
[DEBUG] 
[DEBUG] === Inspecting commit: b09ce165 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: e7194681 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: d1ea3af8 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (104, 121)
[DEBUG] 
[DEBUG] === Inspecting commit: be62d0d0 : [d8d9294 class is no longer used] src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java ===
[DEBUG] --- Delete File: src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java ---
[DEBUG] Delete: CLASS: org.apache.commons.compress.archivers.sevenz.BoundedRandomAccessFileInputStream : org.apache.commons.compress.archivers.sevenz.BoundedRandomAccessFileInputStream : (24, 63)
[DEBUG] 
[DEBUG] === Inspecting commit: 8ff820e5 : [3d509a0 array is exposed intentionally] findbugs-exclude-filter.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 04c24c2b : [652343f fix eol-style] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: ced329a1 : [e958122 missing license headers] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: bf565fbd : [e958122 missing license headers] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 354cac8e : [72b1789 COMPRESS-327 tests and tweaks for SeekableInMemoryByteChannel] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 8cdd8da6 : [72b1789 COMPRESS-327 tests and tweaks for SeekableInMemoryByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : (104, 120) --> (101, 115)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : (79, 92) --> (77, 89)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long) : (54, 61) --> (53, 61)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long) : (68, 77) --> (68, 75)
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (141, 145)
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (135, 139)
[DEBUG] 
[DEBUG] === Inspecting commit: e4b7a23d : [a2976b6 modify SeekableInMemoryByteChannel based on feedback by Maciej and Bernd Eckenfels] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : (104, 122) --> (104, 120)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : (77, 92) --> (79, 92)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen() : (99, 102) --> (99, 102)
[DEBUG] Update: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int : (36, 36) --> (38, 39)
[DEBUG] Update: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[] : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[] : (34, 34) --> (36, 36)
[DEBUG] Update: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int : (36, 36) --> (38, 39)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close() : (94, 97) --> (94, 97)
[DEBUG] Insert: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : AtomicBoolean : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (37, 37)
[DEBUG] Delete: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : boolean : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (35, 35)
[DEBUG] 
[DEBUG] === Inspecting commit: bbca65c1 : [d9fe818 also compare file contents, patch by Maciej N] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2ca52001 : [1e0957d typo] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: ba08a267 : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 64f10bf8 : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: cef686c5 : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer) : (91, 94) --> (104, 122)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer) : (63, 78) --> (77, 92)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long) : (46, 50) --> (52, 59)
[DEBUG] Update: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[] : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[] : (32, 32) --> (33, 34)
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long) : (57, 61) --> (66, 75)
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (124, 129)
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel() : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (43, 45)
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int) : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (131, 140)
[DEBUG] Insert: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (36, 36)
[DEBUG] Insert: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (36, 36)
[DEBUG] Delete: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : long : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (34, 34)
[DEBUG] Delete: FIELD: org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : long : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (34, 34)
[DEBUG] 
[DEBUG] === Inspecting commit: ad848b76 : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.utils.SeekableInMemoryByteChannel : org.apache.commons.compress.utils.SeekableInMemoryByteChannel : (27, 95)
[DEBUG] 
[DEBUG] === Inspecting commit: c6d5f625 : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 28f506e2 : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 3123a167 : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : (991, 1035) --> (991, 1036)
[DEBUG] 
[DEBUG] === Inspecting commit: 4b910bbf : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int) : (766, 772) --> (766, 773)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int) : (779, 786) --> (780, 792)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer : ByteBuffer : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper : (765, 765)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.BUF_SIZE : int : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper : (764, 764)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish() : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish() : (236, 288) --> (237, 286)
[DEBUG] 
[DEBUG] === Inspecting commit: 2d4f3cc3 : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]) : (204, 258) --> (204, 251)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (521, 598)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (614, 627)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (964, 978)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (438, 519)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (266, 292)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (629, 785)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (362, 389)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (1007, 1018)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (305, 334)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (980, 982)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (336, 360)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (600, 612)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (391, 436)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (294, 303)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(DataInput,int) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (606, 618)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(DataInput) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (527, 604)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (397, 442)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (444, 525)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (272, 298)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(DataInput,int) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (620, 633)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(DataInput) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (970, 984)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(DataInput,long) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (1009, 1031)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (311, 340)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (635, 791)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (368, 395)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(DataInput) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (300, 309)
[DEBUG] Delete: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(DataInput,Archive) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (342, 366)
[DEBUG] 
[DEBUG] === Inspecting commit: 5961b176 : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/zip.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 571a8645 : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/limitations.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 9ec1adaa : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/index.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: b9a1685a : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/examples.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 13b83f07 : [57511f5 COMPRESS-327 update documentation] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 72ffcf8d : [57511f5 COMPRESS-327 update documentation] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: fa3cf19d : [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable() : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable() : (299, 310) --> (320, 331)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(OutputStream) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(OutputStream) : (265, 274) --> (268, 277)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean) : (1010, 1074) --> (1031, 1095)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean) : (636, 686) --> (657, 707)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean) : (508, 515) --> (529, 536)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode) : (772, 800) --> (793, 821)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode) : (802, 822) --> (823, 843)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry) : (1507, 1522) --> (1528, 1543)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy() : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy() : (1534, 1548) --> (1555, 1569)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode) : (570, 611) --> (591, 632)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry) : (1112, 1130) --> (1133, 1151)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(File) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(File) : (276, 297) --> (279, 305)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(int) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(int) : (1438, 1440) --> (1459, 1461)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(SeekableByteChannel) : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream : (307, 318)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel : SeekableByteChannel : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream : (233, 236)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.raf : RandomAccessFile : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream : (230, 233)
[DEBUG] 
[DEBUG] === Inspecting commit: 42a2851e : [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater) : org.apache.commons.compress.archivers.zip.StreamCompressor : (99, 109)
[DEBUG] Insert: CLASS: org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor : org.apache.commons.compress.archivers.zip.StreamCompressor : (325, 339)
[DEBUG] 
[DEBUG] === Inspecting commit: 074ebd26 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 46388b65 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: a96ed453 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 44a9739a : [cd235a8 remove reference to RandomAccessFile] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 1f91950a : [d8fc27b COMPRESS-327 read zip archives from arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32() : (848, 860) --> (890, 903)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String,boolean) : org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String,boolean) : (196, 227) --> (204, 220)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]) : org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]) : (875, 913) --> (918, 960)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory() : (793, 820) --> (831, 859)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(byte[],int,int) : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(byte[],int,int) : (1037, 1065) --> (1088, 1125)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(long,long) : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(long,long) : (1017, 1020) --> (1059, 1067)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read() : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read() : (1022, 1035) --> (1069, 1086)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(int) : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream : (1127, 1132)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.MAX_BUF_LEN : int : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream : (1053, 1053)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream : (1054, 1054)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int) : org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int) : (915, 928) --> (962, 973)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>) : (560, 651) --> (597, 689)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader() : org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader() : (997, 1005) --> (1036, 1045)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64() : org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64() : (822, 846) --> (861, 888)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : (526, 558) --> (561, 595)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : (945, 995) --> (990, 1034)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean) : org.apache.commons.compress.archivers.zip.ZipFile : (222, 239)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean,boolean) : org.apache.commons.compress.archivers.zip.ZipFile : (241, 262)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (152, 152)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.CFH_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (151, 151)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.archive : SeekableByteChannel : org.apache.commons.compress.archivers.zip.ZipFile : (129, 132)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.WORD_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (150, 150)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BBUF : ByteBuffer : org.apache.commons.compress.archivers.zip.ZipFile : (149, 149)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.archive : RandomAccessFile : org.apache.commons.compress.archivers.zip.ZipFile : (125, 128)
[DEBUG] 
[DEBUG] === Inspecting commit: 04ac4efb : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 0b5ebac4 : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/utils/IOUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/IOUtils.java ---
[DEBUG] Insert: METHOD: org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer) : org.apache.commons.compress.utils.IOUtils : (172, 199)
[DEBUG] 
[DEBUG] === Inspecting commit: 711ed657 : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer) : (1032, 1044) --> (1032, 1036)
[DEBUG] 
[DEBUG] === Inspecting commit: 5f623f49 : [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java ===
[DEBUG] --- New File: src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java ---
[DEBUG] Insert: CLASS: org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream : org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream : (25, 92)
[DEBUG] 
[DEBUG] === Inspecting commit: 194a4eff : [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]) : (279, 308) --> (310, 339)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry) : org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry) : (855, 879) --> (886, 910)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File,byte[]) : (86, 113) --> (90, 102)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.close() : org.apache.commons.compress.archivers.sevenz.SevenZFile.close() : (125, 142) --> (150, 167)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long) : (229, 238) --> (259, 269)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]) : (178, 227) --> (203, 257)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[],boolean) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (119, 138)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (104, 117)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer) : org.apache.commons.compress.archivers.sevenz.SevenZFile : (1032, 1044)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZFile.channel : SeekableByteChannel : org.apache.commons.compress.archivers.sevenz.SevenZFile : (77, 77)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZFile.file : RandomAccessFile : org.apache.commons.compress.archivers.sevenz.SevenZFile : (73, 73)
[DEBUG] 
[DEBUG] === Inspecting commit: 170fc653 : [87f0f2e COMPRESS-327 write 7z archives to arbirary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int) : (741, 746) --> (765, 771)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int) : (753, 759) --> (778, 785)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish() : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish() : (219, 263) --> (235, 287)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close() : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close() : (104, 115) --> (120, 131)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(File) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(File) : (59, 68) --> (63, 73)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(SeekableByteChannel) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile : (75, 84)
[DEBUG] Insert: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel : SeekableByteChannel : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile : (50, 50)
[DEBUG] Delete: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.file : RandomAccessFile : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile : (46, 46)
[DEBUG] 
[DEBUG] === Inspecting commit: 2f72fa3a : [9e32a2c record fix for COMPRESS-364] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: cb335038 : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/test/resources/archive_with_bytes_after_data.zip ===
[DEBUG] 
[DEBUG] === Inspecting commit: ccc59242 : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 58eaa6af : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry() : (592, 646) --> (592, 651)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes() : org.apache.commons.compress.archivers.zip.ZipArchiveInputStream : (653, 663)
[DEBUG] 
[DEBUG] === Inspecting commit: c959ea31 : [f010260 COMPRESS-366 clarify TarArchiveEntry javadocs] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: f6590254 : [f010260 COMPRESS-366 clarify TarArchiveEntry javadocs] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 492b8da0 : [7ee18aa Use try with resources.] src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7c7ed9ff : [e71827b Use try with resources.] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: b59f2079 : [159d9c6 Avoid unclosed stream warnings] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: a1a5bcd1 : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: f8cba421 : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/main/java/org/apache/commons/compress/utils/BitInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/BitInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.BitInputStream.readBits(int) : org.apache.commons.compress.utils.BitInputStream.readBits(int) : (71, 108) --> (71, 136)
[DEBUG] 
[DEBUG] === Inspecting commit: 99af473a : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 3329ae10 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: e9bb47f2 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 36dab520 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: d26ef2eb : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 37bca22a : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/ZTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 60ef0b18 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/XZTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: ae3c6a31 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 68977c90 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 3847673a : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1003619e : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 186efdd3 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7a3d581c : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 1cc4e4c0 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 7addf1c4 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 44a79c03 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/Lister.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 0871fdbe : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: b4aa0f52 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2c677cf9 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 266cd6bb : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 0941ea32 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 3436f0d9 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: c4c8baea : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: fdc2c9ca : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 2b017048 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/AbstractTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: c6b04799 : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : (258, 295) --> (258, 293)
[DEBUG] 
[DEBUG] === Inspecting commit: be430dbc : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField) : org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField) : (122, 194) --> (122, 192)
[DEBUG] 
[DEBUG] === Inspecting commit: 84d9b1e0 : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]) : (279, 311) --> (279, 308)
[DEBUG] 
[DEBUG] === Inspecting commit: d6616169 : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry() : org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry() : (223, 270) --> (223, 274)
[DEBUG] 
[DEBUG] === Inspecting commit: ebf43450 : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 82faff28 : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: eb74e09d : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 28700c7b : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 35d7cf64 : [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : (258, 295) --> (258, 295)
[DEBUG] 
[DEBUG] === Inspecting commit: 49468d02 : [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock() : org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock() : (180, 220) --> (180, 220)
[DEBUG] 
[DEBUG] === Inspecting commit: ca32aa03 : [4865194 Add final modifier to method parameters.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : org.apache.commons.compress.utils.ArchiveUtils.sanitize(String) : (258, 295) --> (258, 295)
[DEBUG] 
[DEBUG] === Inspecting commit: 08cc1480 : [4865194 Add final modifier to method parameters.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyDialect.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyDialect.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: aa4fca09 : [7f110cf Javadoc.] src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 9c43972e : [0714e10 Statement unnecessarily nested within else clause.] src/main/java/org/apache/commons/compress/archivers/Lister.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/Lister.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream) : org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream) : (57, 64) --> (57, 63)
[DEBUG] 
[DEBUG] === Inspecting commit: 03549fc9 : [dee8220 Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 76921382 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: f5e289e1 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 64e470e8 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6dd2bd9c : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 66ac7288 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: d82930f1 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: a5c465aa : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 57309a44 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: e0fd00f5 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 78cd844a : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6b8971a6 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/LongPathTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6e2ae3a4 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: e6fc334e : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 155d9cd8 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/ArchiveReadTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 33568e73 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/AbstractTestCase.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: a7c72d94 : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>) : org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>) : (168, 192) --> (168, 191)
[DEBUG] 
[DEBUG] === Inspecting commit: 95dbbf46 : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest) : org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest) : (88, 103) --> (88, 100)
[DEBUG] 
[DEBUG] === Inspecting commit: e7787a0d : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream() : org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream() : (901, 919) --> (895, 913)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long) : org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long) : (229, 244) --> (229, 238)
[DEBUG] 
[DEBUG] === Inspecting commit: 27444e47 : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream) : org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream) : (105, 120) --> (105, 121)
[DEBUG] 
[DEBUG] === Inspecting commit: db08ad89 : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.CLI.main(String[]) : org.apache.commons.compress.archivers.sevenz.CLI.main(String[]) : (119, 139) --> (116, 133)
[DEBUG] 
[DEBUG] === Inspecting commit: 7f37b235 : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/Lister.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/Lister.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.Lister.main(String[]) : org.apache.commons.compress.archivers.Lister.main(String[]) : (37, 61) --> (37, 55)
[DEBUG] Insert: METHOD: org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream) : org.apache.commons.compress.archivers.Lister : (57, 64)
[DEBUG] 
[DEBUG] === Inspecting commit: d9b4556d : [f52ecf8 Format nits.] src/main/java/org/apache/commons/compress/archivers/Lister.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/Lister.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: c370d30f : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 9a53c1f7 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>) : org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>) : (109, 161) --> (109, 161)
[DEBUG] 
[DEBUG] === Inspecting commit: 6c3c9acf : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 83d3c209 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 68e02100 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: b6ac0311 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.compressors.FileNameUtil.compressSuffix : Map<String, String> : org.apache.commons.compress.compressors.FileNameUtil.compressSuffix : Map<String, String> : (33, 38) --> (33, 38)
[DEBUG] 
[DEBUG] === Inspecting commit: 2386b3a2 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.changes.ChangeSetResults.deleted : List<String> : org.apache.commons.compress.changes.ChangeSetResults.deleted : List<String> : (30, 30) --> (29, 30)
[DEBUG] Update: FIELD: org.apache.commons.compress.changes.ChangeSetResults.addedFromStream : List<String> : org.apache.commons.compress.changes.ChangeSetResults.addedFromStream : List<String> : (29, 29) --> (28, 29)
[DEBUG] Update: FIELD: org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet : List<String> : org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet : List<String> : (28, 28) --> (28, 28)
[DEBUG] 
[DEBUG] === Inspecting commit: b32763a4 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream) : org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream) : (96, 176) --> (96, 176)
[DEBUG] 
[DEBUG] === Inspecting commit: 02e8cb70 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSet.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/changes/ChangeSet.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.changes.ChangeSet.changes : Set<Change> : org.apache.commons.compress.changes.ChangeSet.changes : Set<Change> : (37, 37) --> (37, 37)
[DEBUG] Update: METHOD: org.apache.commons.compress.changes.ChangeSet.getChanges() : org.apache.commons.compress.changes.ChangeSet.getChanges() : (158, 165) --> (158, 165)
[DEBUG] 
[DEBUG] === Inspecting commit: f4e3e2d5 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: 92c4cd18 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.entries : List<ZipArchiveEntry> : org.apache.commons.compress.archivers.zip.ZipFile.entries : List<ZipArchiveEntry> : (88, 93) --> (88, 93)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ZipFile.nameMap : Map<String, LinkedList<ZipArchiveEntry>> : org.apache.commons.compress.archivers.zip.ZipFile.nameMap : Map<String, LinkedList<ZipArchiveEntry>> : (95, 99) --> (93, 99)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory() : (526, 558) --> (526, 558)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>) : (945, 995) --> (945, 995)
[DEBUG] 
[DEBUG] === Inspecting commit: 48c6733c : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: fbf2e8e8 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets : Map<ZipArchiveEntry, Long> : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets : Map<ZipArchiveEntry, Long> : (200, 204) --> (198, 204)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries : List<ZipArchiveEntry> : org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries : List<ZipArchiveEntry> : (170, 174) --> (170, 174)
[DEBUG] 
[DEBUG] === Inspecting commit: 2e280cea : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort) : org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort) : (463, 483) --> (463, 483)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]) : org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]) : (319, 334) --> (319, 334)
[DEBUG] 
[DEBUG] === Inspecting commit: 00714581 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(char[]) : org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(char[]) : (101, 118) --> (101, 118)
[DEBUG] 
[DEBUG] === Inspecting commit: 5891ece2 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items : Queue<CompressedEntry> : org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items : Queue<CompressedEntry> : (49, 49) --> (49, 49)
[DEBUG] 
[DEBUG] === Inspecting commit: b0687389 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures : List<Future<Object>> : org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures : List<Future<Object>> : (58, 58) --> (58, 58)
[DEBUG] 
[DEBUG] === Inspecting commit: 05c6ddf4 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: d86d1b2c : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField) : org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField) : (122, 194) --> (122, 194)
[DEBUG] 
[DEBUG] === Inspecting commit: 0f89c1b0 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry) : org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry) : (259, 322) --> (259, 322)
[DEBUG] 
[DEBUG] === Inspecting commit: 70a15b4a : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders : Map<String, String> : org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders : Map<String, String> : (82, 82) --> (82, 82)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream) : org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream) : (452, 504) --> (452, 504)
[DEBUG] 
[DEBUG] === Inspecting commit: be09fdf4 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files : List<SevenZArchiveEntry> : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files : List<SevenZArchiveEntry> : (47, 47) --> (47, 47)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream() : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream() : (277, 317) --> (277, 317)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes : Map<SevenZArchiveEntry, long[]> : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes : Map<SevenZArchiveEntry, long[]> : (57, 57) --> (56, 57)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable<T>) : org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable<T>) : (732, 738) --> (732, 738)
[DEBUG] 
[DEBUG] === Inspecting commit: bcdab561 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry) : org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry) : (864, 888) --> (864, 888)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams : ArrayList<InputStream> : org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams : ArrayList<InputStream> : (80, 80) --> (80, 80)
[DEBUG] 
[DEBUG] === Inspecting commit: 99f9a4d3 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable<? extends SevenZMethodConfiguration>) : org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable<? extends SevenZMethodConfiguration>) : (442, 466) --> (442, 466)
[DEBUG] 
[DEBUG] === Inspecting commit: 601a5c09 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders() : org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders() : (48, 63) --> (48, 63)
[DEBUG] 
[DEBUG] === Inspecting commit: bbb405da : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending : Map<Integer, DumpArchiveEntry> : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending : Map<Integer, DumpArchiveEntry> : (69, 69) --> (68, 69)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String) : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String) : (93, 150) --> (93, 150)
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry) : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry) : (409, 451) --> (409, 451)
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names : Map<Integer, Dirent> : org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names : Map<Integer, Dirent> : (66, 66) --> (66, 66)
[DEBUG] 
[DEBUG] === Inspecting commit: f5abff14 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java ---
[DEBUG] 
[DEBUG] === Inspecting commit: f680f27b : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java ---
[DEBUG] Update: FIELD: org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names : HashMap<String, CpioArchiveEntry> : org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names : HashMap<String, CpioArchiveEntry> : (79, 80) --> (79, 80)
[DEBUG] 
[DEBUG] === Inspecting commit: b80873ae : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java ===
[DEBUG] --- Modify File: src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java ---
[DEBUG] Update: METHOD: org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader() : org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader() : (214, 267) --> (214, 267)
[DEBUG] 
[DEBUG] === Inspecting commit: 3a920ada : [f5a9851 [COMPRESS-360] Update Java requirement from 6 to 7.] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 4c88f2d9 : [f8e0994 [COMPRESS-360] Update Java requirement from 6 to 7.] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: ae4fa4bc : [f8e0994 [COMPRESS-360] Update Java requirement from 6 to 7.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 6eacaf52 : [6c8345b Tests for [COMPRESS-359] Pack200 is broken.] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java ===
[DEBUG] 
[DEBUG] === Inspecting commit: 313beb44 : [9e6f0b3 commons-parent 39 -> 40.] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: c71e6377 : [9a677fb Bump to next development version] src/changes/changes.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: 4d38c3b1 : [9a677fb Bump to next development version] pom.xml ===
[DEBUG] 
[DEBUG] === Inspecting commit: ea272458 : [9a677fb Bump to next development version] RELEASE-NOTES.txt ===
[DEBUG] 

[OUTPUT] Analysing Hunk Dependency ... 
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
[DEBUG] Done: [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
[DEBUG] Done: [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [c3d2cec [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [1e0957d typo] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [d8fc27b COMPRESS-327 read zip archives from arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [cd235a8 remove reference to RandomAccessFile] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java
[DEBUG] Done: [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
[DEBUG] Done: [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
[DEBUG] Done: [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
[DEBUG] Done: [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
[DEBUG] Done: [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
[DEBUG] Done: [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/utils/IOUtils.java
[DEBUG] Done: [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
[DEBUG] Done: [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
[DEBUG] Done: [263513a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
[DEBUG] Done: [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java
[DEBUG] Done: [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
[DEBUG] Done: [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java
[DEBUG] Done: [a428e42 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
[DEBUG] Done: [7145b4a Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
[DEBUG] Done: [03239b0 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
[DEBUG] Done: [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java
[DEBUG] Done: [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java
[DEBUG] Done: [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java
[DEBUG] Done: [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java
[DEBUG] Done: [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
[DEBUG] Done: [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
[DEBUG] Done: [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
[DEBUG] Done: [87f0f2e COMPRESS-327 write 7z archives to arbirary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java
[DEBUG] Done: [85184c3 COMPRESS-377 properly close StreamCompressor] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
[DEBUG] Done: [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
[DEBUG] Done: [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [8de4b8a line-ends] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [6c52318 Don't need local var.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
[DEBUG] Done: [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
[DEBUG] Done: [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
[DEBUG] Done: [3fc9325 Unnecessary cast from int to int.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java
[DEBUG] Done: [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Lists.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
[DEBUG] Done: [5c9661c param name 'input' should not hide field.] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java
[DEBUG] Done: [4d55183 In-line local variable.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
[DEBUG] Done: [dd9f895 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
[DEBUG] Done: [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSet.java
[DEBUG] Done: [72b1789 COMPRESS-327 tests and tweaks for SeekableInMemoryByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [a2976b6 modify SeekableInMemoryByteChannel based on feedback by Maciej and Bernd Eckenfels] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
[DEBUG] Done: [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java
[DEBUG] Done: [b9153ca [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
[DEBUG] Done: [f1a5821 Better local variable name.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java
[DEBUG] Done: [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
[DEBUG] Done: [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java
[DEBUG] Done: [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
[DEBUG] Done: [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
[DEBUG] Done: [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
[DEBUG] Done: [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Iterators.java
[DEBUG] Done: [f538f38 avoid overflow when resizing] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java
[DEBUG] Done: [658812c ZipArchiveInputStream.closeEntry fails to advance] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
[DEBUG] Done: [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
[DEBUG] Done: [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/main/java/org/apache/commons/compress/utils/BitInputStream.java
[DEBUG] Done: [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
[DEBUG] Done: [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
[DEBUG] Done: [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/ServiceLoaderIterator.java
[DEBUG] Done: [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.java
[DEBUG] Done: [9f468f1 [COMPRESS-362] Bullet-proof code using try-with-resources statements] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
[DEBUG] Done: [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java
[DEBUG] Done: [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java
[DEBUG] Done: [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Sets.java
[DEBUG] Done: [4865194 Add final modifier to method parameters.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
[DEBUG] Done: [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
[DEBUG] Done: [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
[DEBUG] Done: [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java
[DEBUG] Done: [46f57bf properly return -1 from read on EOF] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
[DEBUG] Done: [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
[DEBUG] Hunk depends on: e50d19f6 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java : added back.
[DEBUG] Hunk depends on: e6cb7146 : [8de4b8a line-ends] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java : added back.
[DEBUG] Hunk depends on: 166a7e9d : [263513a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java : added back.
[DEBUG] Hunk depends on: 2ca52001 : [1e0957d typo] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java : added back.
[DEBUG] Hunk depends on: 074ebd26 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java : added back.
[DEBUG] Hunk depends on: 44a9739a : [cd235a8 remove reference to RandomAccessFile] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java : added back.
[DEBUG] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java : 201c2566d2c49710a9319158c972d7992442a85e
[DEBUG] src/main/java/org/apache/commons/compress/archivers/Lister.java : 7f37b23556618ad92787e50544afe2630178c1ee

[DEBUG] Original |H| 365
[DEBUG] Tracker:
[
ea27245816d0b9ee911bdc12488ab446327b3d10 : []
4d38c3b19b5793d88b5a3faf563b9fcfe333b2c1 : []
c71e63774847594c30f13461308cf77bffa76452 : []
313beb44749007bfd1a747d2ecf73626199a6bac : []
6eacaf52e52fdefae7a6fba163ca9993df401559 : []
ae4fa4bccd503b791ccdb308d152634d4b40b91c : []
4c88f2d931ab22d8d8d99d60b66e1e071167de6b : []
3a920adaf0ebb84d17bfad29a0540f6a58d1ef54 : []
b80873aebcc5b7d44c4c41fe49ac23acbdf44bcd : [[org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader():UPD,TEST]]
f680f27b98929acaf7cada2ab3c95efe68393fa2 : [[org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.names : HashMap<String, CpioArchiveEntry>:UPD,TEST]]
f5abff146f12cb307a1cd8b0d6f9a4c6fe1dd606 : []
bbb405da53357741604979a4912b92409cd55655 : [[org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(DumpArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.pending : Map<Integer, DumpArchiveEntry>:UPD,TEST], [org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.names : Map<Integer, Dirent>:UPD,TEST], [org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.DumpArchiveInputStream(InputStream,String):UPD,TEST]]
601a5c099816926205e42684dd5997b1ff2953bd : [[org.apache.commons.compress.archivers.sevenz.Folder.getOrderedCoders():UPD,TEST]]
99f9a4d3f93fc37b2c093db9ccad6a7176e24b92 : [[org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry.setContentMethods(Iterable<? extends SevenZMethodConfiguration>):UPD,TEST]]
bcdab561938644574689d63e6bde2fe349f0a3e9 : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.deferredBlockStreams : ArrayList<InputStream>:UPD,TEST]]
be09fdf4b67e27d7131320e45fe97bef8adfc8db : [[org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.reverse(Iterable<T>):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.files : List<SevenZArchiveEntry>:UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.setupFileOutputStream():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.additionalSizes : Map<SevenZArchiveEntry, long[]>:UPD,TEST]]
70a15b4a1f07106f0c20b331122200b2525de3b7 : [[org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(InputStream):UPD,TEST], [org.apache.commons.compress.archivers.tar.TarArchiveInputStream.globalPaxHeaders : Map<String, String>:UPD,TEST]]
0f89c1b05902cc63cda6ec7c2b649c5a0990d84b : [[org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(ArchiveEntry):UPD,TEST]]
d86d1b2c5c142e6615f127f2cf3254b6e9ee44b8 : [[org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField):UPD,TEST]]
05c6ddf41a513bfd61dd61341e54f13db2167f60 : []
b0687389fc074a044d355344214752ab03d28e2e : [[org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.futures : List<Future<Object>>:UPD,TEST]]
5891ece2862449b67172d128e169f518cfd27394 : [[org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.items : Queue<CompressedEntry>:UPD,TEST]]
007145812936038e452a7119c38ba3ec71ea2769 : [[org.apache.commons.compress.archivers.zip.Simple8BitZipEncoding.Simple8BitZipEncoding(char[]):UPD,TEST]]
2e280cea1e8318924e6351ce3303d069b24bb382 : [[org.apache.commons.compress.archivers.zip.ZipArchiveEntry.removeExtraField(ZipShort):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveEntry.setExtraFields(ZipExtraField[]):UPD,TEST]]
fbf2e8e8f1b749d96580e37d8315467b224f759e : [[org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.offsets : Map<ZipArchiveEntry, Long>:UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.entries : List<ZipArchiveEntry>:UPD,TEST]]
48c6733cba5aab78ea24e935bec620d1dd792dbc : []
92c4cd1808036711f40a90d0a87dc617b7bd475d : [[org.apache.commons.compress.archivers.zip.ZipFile.entries : List<ZipArchiveEntry>:UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.nameMap : Map<String, LinkedList<ZipArchiveEntry>>:UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST]]
f4e3e2d53829de369489a0c0b1b06a146bdc3698 : []
02e8cb701986c1c7219a60029ebbc700ded4e4d5 : [[org.apache.commons.compress.changes.ChangeSet.getChanges():UPD,TEST], [org.apache.commons.compress.changes.ChangeSet.changes : Set<Change>:UPD,TEST]]
b32763a44ddf546341e2a79fbe5252b418f070a2 : [[org.apache.commons.compress.changes.ChangeSetPerformer.perform(ArchiveEntryIterator,ArchiveOutputStream):UPD,TEST]]
2386b3a20f9b6254721a4b5ed6ac8a12f04a574b : [[org.apache.commons.compress.changes.ChangeSetResults.addedFromStream : List<String>:UPD,TEST], [org.apache.commons.compress.changes.ChangeSetResults.deleted : List<String>:UPD,TEST], [org.apache.commons.compress.changes.ChangeSetResults.addedFromChangeSet : List<String>:UPD,TEST]]
b6ac03119ef816eefda89cdf4b3078b752e7c0ef : [[org.apache.commons.compress.compressors.FileNameUtil.compressSuffix : Map<String, String>:UPD,TEST]]
68e021006d537031d4ac2de35235de7aa76c8c45 : []
83d3c209c6c764fed9423a3647cd61c9b39233f8 : []
6c3c9acf1323a36215b0cf8a4fc85ae6a5956633 : []
9a53c1f7a5d10ff11e1c77dec4ae6636bc0a8fd0 : [[org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>):UPD,TEST]]
c370d30f87f874ca3c16515a58d9af06695e94c5 : []
d9b4556d1a60c1aba9a9ac20d9f472c20f97bf90 : []
7f37b23556618ad92787e50544afe2630178c1ee : [[org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream):INS,DROP], [org.apache.commons.compress.archivers.Lister.main(String[]):UPD,DROP]]
db08ad89950aaa2102c8296536655c0144c2e576 : [[org.apache.commons.compress.archivers.sevenz.CLI.main(String[]):UPD,DROP]]
27444e47895260fb9cd9a6c81469d59a7f69b96f : [[org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.writeTo(ZipArchiveOutputStream):UPD,TEST]]
e7787a0dbe30753557b7fe1702e4e2623a91df70 : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.getCurrentStream():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long):UPD,TEST]]
95dbbf4617114a2f4efc3942fbc1c8e79987f2fb : [[org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.addArchiveEntry(ZipArchiveEntryRequest):UPD,TEST]]
a7c72d944ad2099e110fe54461ae545707802a66 : [[org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream.Pack200CompressorInputStream(InputStream,File,Pack200Strategy,Map<String, String>):UPD,TEST]]
33568e730850a9ab7ae311e2e418a8d9c41102d8 : []
155d9cd8c46b65584242b5fdd56d4922ff09c537 : []
e6fc334eeb9d653ed8c5d7b899f662ab7d5bbb6a : []
6e2ae3a48b475017ecde5ba4238e20eb3bf5b9f0 : []
6b8971a695d96164d8e93570b87d67c9e3166437 : []
78cd844a7f50cee0e8048c57e8225d510eee4cf7 : []
e0fd00f5aafeb5a5dcaedbc419b43a2fe0cc0e0e : []
57309a442c783279c12ddba722d9383e7ddaba72 : []
a5c465aa3780285020a0e45af7c6f73fc0a16894 : []
d82930f1487000a72ea485fcf6dc5d0965b48d4f : []
66ac7288c4a40272131d5f324cafe34afdc4322e : []
6dd2bd9c8ceb475fa3469d5b74703182c420d15e : []
64e470e86417bfff38cf7d16e91babd70c4bc03c : []
f5e289e177e3effdc85287b419cdc8ce203e8dd2 : []
7692138205f43e4ae0c3d9003e20d6bb4fc7c1e1 : []
03549fc962445296dd01c6c5a2e8b4a4a4a0d639 : []
9c43972e7d67cb6d9f9bb9fde54357e4364e2e31 : [[org.apache.commons.compress.archivers.Lister.createArchiveInputStream(String[],InputStream):UPD,DROP]]
aa4fca09eb8e4ad00e620fd511c078fd5e4e8d6f : []
08cc1480618687bc68425d9eec905fd3f1fbf352 : []
ca32aa03bfb94f074d9908ad9a2a8d0419951f66 : [[org.apache.commons.compress.utils.ArchiveUtils.sanitize(String):UPD,TEST]]
49468d02f180238b8766be21bbd16cb6cf18c38a : [[org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock():UPD,TEST]]
35d7cf640f4539b33b85cbca0ed0ad16a4768f9a : [[org.apache.commons.compress.utils.ArchiveUtils.sanitize(String):UPD,TEST]]
28700c7bbbd3a0dcb9e3bcfd962125fe2292728c : []
eb74e09d667367307dd21a6cd161ee9a7ca2b8e0 : []
82faff288d2ffd018bb5b73c023bc9a7f8083f22 : []
ebf43450b643c909f8791ed3d26916e9ca9a2f34 : []
d6616169678cf70e464982a7fb4346fc3ed8c556 : [[org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry():UPD,TEST]]
84d9b1e05f10efbb5c3c842294886244aa26fd19 : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]):UPD,TEST]]
be430dbcca61f213d4d688071689be6ec255d4fa : [[org.apache.commons.compress.archivers.zip.ExtraFieldUtils.parse(byte[],boolean,UnparseableExtraField):UPD,TEST]]
c6b047997de0676a9cd1dced8528f335b9da25aa : [[org.apache.commons.compress.utils.ArchiveUtils.sanitize(String):UPD,TEST]]
2b0170482941505ccb0f8f273af9e30c4bd60265 : []
fdc2c9ca4049b2aef80564b12f349c197b37a464 : []
c4c8baeabaf38b6053d3db9c3e79ed8b0c17a0fa : []
3436f0d9c37914c45aedfb6ac1211895ffd0b60e : []
0941ea32709eceedd360254ae5900d7e15602666 : []
266cd6bbaf2381b33b6d1f7dc9cc447e122c72b4 : []
2c677cf9023661d823241ec16cf71ab5eeffb9d1 : []
b4aa0f52065d6f39e90bf3577d6035f28383bf2b : []
0871fdbe8c4dbf631f4d221a8078e0c3cf98c44c : []
44a79c035c815ddab28dd3d03b3c380d2606fb5c : []
7addf1c400bac2a5239d5115aba41f0dff19a736 : []
1cc4e4c007ada7d9321a6721f5a1e24cb7bcd598 : []
7a3d581c684467da74e1c800d437f95a817788d1 : []
186efdd3d7846a451d6fb60bc17597f2b47ca3b5 : []
1003619e6e922546ea2cf9469c3d7652b8da8db6 : []
3847673a1f1fd282637687d978fdb11322f78ded : []
68977c90cfc2dadc28125b3f555216a717f4c559 : []
ae3c6a31aa7e87f348fd0bdedb62c5674f8ab118 : []
60ef0b18f7a5a20bdb1ebec588a49dd85ab3a963 : []
37bca22ab92b6aca3ec0194db78f2af6002b8ded : []
d26ef2eb16808e187c53868f247423dfdd059a44 : []
36dab520c649eb34e59bb8811735637294111465 : []
e9bb47f2fffd95fe8083f9cda4c49d0f2e26f423 : []
3329ae10f224fc13884cee7abc21e98d173f9040 : []
99af473ac2135fbae3b66fe5bbca21863d17881a : []
f8cba421c374a24a30090e597abfd5ec5c0a2b5a : [[org.apache.commons.compress.utils.BitInputStream.readBits(int):UPD,TEST]]
a1a5bcd137b1b3d9ba70ba1f1953b1b473da7f93 : []
b59f2079540dbe993204e4f701f6e6d8160c735b : []
7c7ed9ff49ab668d7fe770ec5a1dd751cbddf0b1 : []
492b8da0e02f2c3f87cb878b2f2b12d2e32b4500 : []
f6590254342e4cee325d3511ed656cce597b65e2 : []
c959ea31bd4d9ad6695068d5402112b59f2635b8 : []
58eaa6af349525b3f4faa38ccd67788d1d2ea85b : [[org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes():INS,TEST]]
ccc5924230d1acc80805636fa53d585f921dc1b7 : []
cb33503834f33de210271f96bff362f6fc897d10 : []
2f72fa3ae66fb95f37cdfb0a70697a33c6d0e297 : []
170fc65325989ee7ccf595243e507ce9abad5056 : [[org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(SeekableByteChannel):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.channel : SeekableByteChannel:INS,COMP], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.close():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.SevenZOutputFile(File):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.file : RandomAccessFile:DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int):UPD,TEST]]
194a4eff5228b099cf23d37cded035d6fdd9d8e2 : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.channel : SeekableByteChannel:INS,COMP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(File,byte[]):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[],boolean):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,String,byte[]):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.file : RandomAccessFile:DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.close():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.buildDecoderStack(Folder,long,int,SevenZArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readStartHeader(long):UPD,TEST]]
5f623f49d246487f09870f7cb68168ad8460604c : [[org.apache.commons.compress.archivers.sevenz.BoundedSeekableByteChannelInputStream:INS,TEST]]
711ed6577256d259b09869b20e696c41c936734e : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.readFully(ByteBuffer):UPD,TEST]]
0b5ebac47dbcbeb37333748cb40ca66c527942ef : [[org.apache.commons.compress.utils.IOUtils.readFully(ReadableByteChannel,ByteBuffer):INS,TEST]]
04ac4efb0d07f805374ad34c74a15b74c35e1870 : []
1f91950a58df41df1ce4bcbc8e64b32a60e77cf6 : [[org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BBUF : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(int):INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader():UPD,COMP], [org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean,boolean):INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.BoundedInputStream(long,long):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.WORD_BBUF : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BBUF : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String,String,boolean):INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.archive : RandomAccessFile:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.archive : SeekableByteChannel:INS,COMP], [org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(File,String,boolean):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.CFH_BBUF : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.buffer : ByteBuffer:INS,COMP], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.read(byte[],int,int):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.BoundedInputStream.MAX_BUF_LEN : int:INS,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.skipBytes(int):UPD,TEST]]
44a9739a505ecdffbc3cff1aef5dcd1087a7e026 : []
a96ed453cda6d355f43339c700a08f537c401a57 : []
46388b65bbd9e61b5e676dfb3dbd530bca920a78 : []
074ebd268a7cc1bb6b6781589bd44344f018a028 : []
42a2851ea412e8c3f739b062d1db0c54db8940c6 : [[org.apache.commons.compress.archivers.zip.StreamCompressor.create(SeekableByteChannel,Deflater):INS,TEST], [org.apache.commons.compress.archivers.zip.StreamCompressor.SeekableByteChannelCompressor:INS,TEST]]
fa3cf19d96dfe80473013024edd5965c70868e4b : [[org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(OutputStream):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.handleSizesAndCrc(long,long,Zip64Mode):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(SeekableByteChannel):INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeDataDescriptor(ZipArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.getEffectiveZip64Mode(ZipArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.shouldAddZip64Extra(ZipArchiveEntry,Zip64Mode):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.createLocalFileHeader(ZipArchiveEntry,ByteBuffer,boolean,boolean):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.channel : SeekableByteChannel:INS,COMP], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.rewriteSizesAndCrc(boolean):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.destroy():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.closeEntry(boolean,boolean):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.ZipArchiveOutputStream(File):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isSeekable():UPD,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.raf : RandomAccessFile:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.isDeflatedToOutputStream(int):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.validateSizeInformation(Zip64Mode):UPD,TEST]]
72ffcf8d60d9dc82adde3d524d4b16b697ffc91e : []
13b83f07edceff5448f623e980410f92e434764f : []
b9a1685ac4a5c4e9002a83ea48fa8c42f3051854 : []
9ec1adaae84bf025de7c0cdd6a1c7f7fc01a6668 : []
571a86453c6f847e65956126c4dc216d9c62b158 : []
5961b176864c67398c7c6e7b7bb9ca82ff3269e2 : []
2d4f3cc36cf441fc79e30f190eb748533141d80f : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(DataInput):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(DataInput):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(DataInput):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readFolder(ByteBuffer):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(ByteBuffer,int):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(ByteBuffer,int):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readPackInfo(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeaders(byte[]):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(ByteBuffer,Archive):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readSubStreamsInfo(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.getUnsignedByte(ByteBuffer):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(DataInput,long):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readArchiveProperties(ByteBuffer):INS,COMP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readUnpackInfo(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readAllOrBits(DataInput,int):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readBits(DataInput,int):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(DataInputStream,Archive,byte[]):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readEncodedHeader(ByteBuffer,Archive,byte[]):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.skipBytesFully(ByteBuffer,long):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readUint64(ByteBuffer):INS,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readFilesInfo(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readHeader(DataInput,Archive):DEL,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZFile.readStreamsInfo(DataInput,Archive):DEL,DROP]]
4b910bbf5a0fd41ac0534892a64fd69bc4ca9328 : [[org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(int):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.BUF_SIZE : int:INS,DROP], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.finish():UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.write(byte[],int,int):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.OutputStreamWrapper.buffer : ByteBuffer:INS,TEST]]
3123a167b9740cefb5d46c60e324227d43575de5 : [[org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST]]
28f506e28e22ed2c7752fcbbfb8cb67b6c3ae59b : []
c6d5f62539b7402147fc831690c0a7c53d4168a6 : []
ad848b76e1433a69c4bc3258ebb385877601669b : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel:INS,TEST]]
cef686c542b9ad213171f9730b881dea7be021be : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.array():INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : long:DEL,DROP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[]:UPD,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int:INS,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int:INS,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel():INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : long:DEL,DROP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int):INS,TEST]]
64f10bf87093e67a77784a0079c873280adb9709 : []
ba08a267cefcec8335aec69437c4c10ebb3c7870 : []
2ca520010315daa0d7cfdbcc3ffefe1e4f483afa : []
bbca65c1b356af7d4159bb6e4ec5aecedaac2e26 : []
e4b7a23df05aee62ec4874491f2a2537cee9b480 : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.close():UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : AtomicBoolean:INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.closed : boolean:DEL,DROP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.isOpen():UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.data : byte[]:UPD,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position : int:UPD,COMP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.size : int:UPD,COMP]]
8cdd8da6e4096bc0dd0429c0cdc9b3f743ab0a7b : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.repositionIfNecessary():INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.position(long):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.truncate(long):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.ensureOpen():INS,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer):UPD,TEST]]
354cac8e623f56c86b34c1ea1495b68a1a138680 : []
bf565fbd43ae30be6b649dca564b28fb30672a30 : []
ced329a1f4f373d169a523255ae609c095c17343 : []
04c24c2b5dec5ec9714f97b1dc81f6e8b3c2b2b9 : []
8ff820e585395265775a93cd606a4797b9d3725f : []
be62d0d066a7854e774e0b5af2bfce4ba497962c : [[org.apache.commons.compress.archivers.sevenz.BoundedRandomAccessFileInputStream:DEL,DROP]]
d1ea3af8708bbf878fef29d78271eb2d2369fa3a : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel,byte[]):INS,TEST]]
e7194681124ab4f93c55f6740209f3b08946f242 : []
b09ce165eaec313ca35c33e96d335b23a096f85b : []
d5e558f4d0c7dddd5588999ae9a22f66a433a603 : [[org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel,String):INS,TEST]]
2a3b06fcf6238d2cbd3fac92e3a3a3f8b68d1756 : []
d56990ef68ab4116c8410bf66315eeb65d1bd202 : []
ed868d74c3cc1f75188be38855d55e85f61f8bc8 : []
f367cf13f019dec0d614a0224bb8f9833d2a2bb6 : []
d81ca039244d39aa67408fa0f6976e6cecdf2d16 : [[org.apache.commons.compress.archivers.sevenz.SevenZFile.SevenZFile(SeekableByteChannel):INS,TEST]]
faf5faf945339c89f3d1570bdef209139b160dfa : [[org.apache.commons.compress.archivers.zip.ZipFile.ZipFile(SeekableByteChannel):INS,TEST]]
c4e0997c7322493a78f5c873c743a67692b1aa18 : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.SeekableInMemoryByteChannel(int):INS,TEST]]
d6038d2556219a5956655362c775ea890d91f38b : []
741de3b7f100b1e733fb5accca36bbee270a17d9 : []
ac883128d49d475080f6218ddc98e32f76f55182 : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.read(ByteBuffer):UPD,TEST]]
abb8a68d55d6eab1db5c24b68df9dab7c84f3065 : []
1bc9a1d1b231b5b5e446a9605541db390f9fc3ea : [[org.apache.commons.compress.utils.SeekableInMemoryByteChannel.NAIVE_RESIZE_LIMIT : int:INS,DROP], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.resize(int):UPD,TEST], [org.apache.commons.compress.utils.SeekableInMemoryByteChannel.write(ByteBuffer):UPD,TEST]]
baa76c5f42709100062d7def4bcf9dcf12e6213c : []
723a49213fb77f0bbb17809625cbe52a1cfea1bc : [[org.apache.commons.compress.compressors.CompressorStreamFactory.getGzip():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream):UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.findCompressorStreamProviders():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getDeflate():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getXz():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.serviceLoaderIterator():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getDecompressUntilEOF():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorInputStreamProviders():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyRaw():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getZ():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getLzma():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getCompressorOutputStreamProviders():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getSingleton():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>):INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.compressorInputStreamProviders : SortedMap<String, CompressorStreamProvider>:INS,COMP], [org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream):UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.compressorOutputStreamProviders : SortedMap<String, CompressorStreamProvider>:INS,COMP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames():INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.toKey(String):INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getSnappyFramed():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getBzip2():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.getPack200():INS,DROP], [org.apache.commons.compress.compressors.CompressorStreamFactory.SINGLETON : CompressorStreamFactory:INS,TEST]]
85b7e6c30bc451908e135fd346074d33f5e1f546 : []
184cd1420a97ed08469d5dd6005f18149073b78d : [[org.apache.commons.compress.compressors.CompressorStreamProvider:INS,COMP]]
c1b081d39263ba0e08f492c0314ea44eb48c281c : [[org.apache.commons.compress.utils.Iterators:INS,TEST]]
9f91f5a992999cfc49ac9d6a605cd713403cf237 : [[org.apache.commons.compress.utils.Lists:INS,TEST]]
bc8db5f657e9d1ac07817e74d0b369d9db79f985 : [[org.apache.commons.compress.utils.ServiceLoaderIterator:INS,TEST]]
42b2edbd9f157a9ee2ccecb06825b11715e26678 : []
f0dbb665fe06689c63eca5541d54f4332a29dcbb : []
a208a81acb78b8a1ad40f6f1af1f13d3a65bcfed : []
0c2b6bd7026b02f6775b9d0d277c1790ffc8db76 : [[org.apache.commons.compress.compressors.CompressorStreamFactory.getInputStreamCompressorNames():UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames():UPD,TEST]]
5be44c8261ad3199e03fce0cb7cee7d16723c129 : [[org.apache.commons.compress.utils.Sets:INS,TEST]]
f452b25beec858c35f9e4aad30e2e2dcb93dba9f : []
166a7e9d55d4391db52cd512c7dc70a7589511e6 : []
028a11ba7646424eae3f718b0e6536aa780ab825 : []
6edbbad8153a3007fb38253cd422d42fe5c07b8e : []
00d8a6cc1ab5625503ec602965fe866e72599850 : []
a9c16a4e6f5cceeaeb2a5d9154b38a561e5a8cef : []
6156729673c585d235cb59a0c2db333b66b4b7c5 : [[org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream,String):INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream,String):INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(String,InputStream):UPD,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.findArchiveStreamProviders():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(String,OutputStream):UPD,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.putAll(Set<String>,ArchiveStreamProvider,TreeMap<String, ArchiveStreamProvider>):INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveOutputStreamProviders : SortedMap<String, ArchiveStreamProvider>:INS,COMP], [org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveInputStreamProviders():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.archiveInputStreamProviders : SortedMap<String, ArchiveStreamProvider>:INS,COMP], [org.apache.commons.compress.archivers.ArchiveStreamFactory.serviceLoaderIterator():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveOutputStreamProviders():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.toKey(String):INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.SINGLETON : ArchiveStreamFactory:INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.entryEncoding : String:UPD,COMP], [org.apache.commons.compress.archivers.ArchiveStreamFactory.getInputStreamArchiveNames():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.getArchiveOutputStreamProviders():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.getOutputStreamArchiveNames():INS,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.findAvailableArchiveInputStreamProviders():INS,TEST]]
9696cbcc23b33789d88bb7389a56afd189c2fc06 : [[org.apache.commons.compress.archivers.ArchiveStreamProvider:INS,COMP]]
d9b9f3bae65cda7cca773f8c8dc10700f4b499c7 : []
7b2220042a7ebbae84c0c935c6d66a404da15f2e : []
c6e7f564d5a55862ef59b58056d77ffa6f31a0e2 : []
59bd1515be9ab601c0a44308c2ece75b7156e25d : []
1163b497a9aac1c615f466e237fcc9d0ac4f1641 : [[org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorOutputStreamProviders():UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream,boolean):INS,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.putAll(Set<String>,CompressorStreamProvider,TreeMap<String, CompressorStreamProvider>):UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.findAvailableCompressorInputStreamProviders():UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorInputStream(String,InputStream):UPD,TEST]]
a9a0575aa504456a34388030cc26e50ea85c13b8 : [[org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream):DEL,DROP], [org.apache.commons.compress.compressors.CompressorStreamProvider.createCompressorInputStream(String,InputStream,boolean):INS,COMP]]
e7e1e35cb736cd3fcf1aec8726f67761e69eae74 : []
7bc0d58c0a2b56dfc946e7aa33b10743adfe5d0d : []
eca66f089816db3c59b365a47ecf1cc22a640eb1 : []
aa4dd8f86a8e52b2457240f44ba3a34ff3963da7 : []
96d2829c2a71753dd240daa1e0fa3a375797c975 : []
873f479066d7ac9d27af2aa14a405a78b9a4c6ac : []
5348c00860c5b5b980fc79ba5e7fe1d3118cb821 : []
6ce41feed4040b3f4876376e4270098cfa5870d9 : []
65021b5c0dcd3bb1efa3e6b349c97cbb9848aed4 : []
2d0309842f3a15388b583ccc8c28b7059673b8e0 : []
275e57925968e85bc186eaef4d76beb785637687 : []
6913417a8206fb025a31e5099ea1d3d4e6432443 : []
5ca95e5658c581c87d71f3b1c6916b41ed13807b : []
cb41d57d6f610be7571779cf73f3c454e8b7c3d5 : []
70c165908ba0b27cdc20c57d549c158563c458ae : [[org.apache.commons.compress.compressors.CompressorStreamFactory.getOutputStreamCompressorNames():UPD,TEST], [org.apache.commons.compress.compressors.CompressorStreamFactory.createCompressorOutputStream(String,OutputStream):UPD,TEST]]
ebc96f8e3d374300ae5a495ee783a52efbb0e49b : []
96f126add87f67b78f7268710f115a3df27a10f7 : []
01dd4a37d71d9958b98d0c0bdd0e929b0268317d : []
9f3e4ddb39ce7f49bbbf011253776390110bcf87 : []
e7f1444a2c070a648149316ef369f1f71bfad970 : [[org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream:INS,TEST]]
9058043ddf349204a321566db867edb3bbf39784 : []
47968788ac0a391d2c6e6d0473f0252516543456 : []
18cfc4f05819a1db6013324bb2b13050101c0f43 : [[org.apache.commons.compress.archivers.sevenz.Coders.LZMADecoder:DEL,DROP]]
2602bc5351b9e1eacf773d5b0b8ca69f116f8feb : []
6b26db1b8ae197269901305d844929913151fb38 : []
c8dccad9b39f4632d3747ed82448a9551b7f6a6e : []
18e604ab385acd54eaf89278e16b603ec81684f3 : []
1d79fa9a0e4008acb8913058f4173d51b6c5d0fd : []
782390325323816c4dbf05ef1e15f2fe0c8befa5 : []
9906de5c087f51937076b772485ee7a0ffc57efe : [[org.apache.commons.compress.archivers.sevenz.LZMADecoder:INS,TEST]]
f433dd5dad7fd9c4dd2baa797c7951cc75f1ca12 : [[org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.addArchiveEntry(ZipArchiveEntryRequestSupplier):INS,TEST], [org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.createCallable(ZipArchiveEntryRequestSupplier):INS,TEST]]
a94bb27407fcee957fb2935a0bfb6ce20cc6c795 : []
201c2566d2c49710a9319158c972d7992442a85e : [[org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequestSupplier:INS,DROP]]
9e32105863d6607f4ee659603c0c12714d34fee8 : []
520f52a08f69f7e2bdb0e8b5a5e845b19a3d4435 : []
fec75d1bc0e7bbe2a8b5ebc6e3ef03b026092f7f : []
4cb7917d65118c617f760fa413f97891aa7a4ea4 : []
0439e56d5ce06865974274353871a65ebf8882f1 : []
2f09bbdc982a97c51f35b0e8e2582c52deee7b82 : [[org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object):UPD,TEST]]
8d89dca50074bf3e1e8285cc46267c38477d45a7 : [[org.apache.commons.compress.archivers.sevenz.LZMADecoder.encode(OutputStream,Object):UPD,TEST]]
890f8fcfb87eebb5689b1a6838545953e6e31242 : [[org.apache.commons.compress.utils.FlushShieldFilterOutputStream:INS,TEST]]
328cd2c20b8aeb28670ce49e2f391373507c5269 : []
5683f4d24be536f807fc7d92ef62cbe0b991cf57 : []
068495b2ffdf3370028356317c19f847f8f13b15 : []
5e827a76058bf02cf30fedd9d647f51106169684 : [[org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object):UPD,TEST]]
9501525c4bfe6ee32c233814ca996dcb31ad413d : []
01204ddc0896a9978f417f9ce5484bb40719236c : []
df2a0069a421425bff33cc5c98a5403f028489cc : []
a90b397d0fe9f3480cdf73c2c848b7507c3acfc2 : []
62ca5b2f55b75be36fd0dcb1e70ac04810e1dbf2 : []
52255beb80e97ef648e2cd0760a99016cc734cef : []
e85ab262d23085b4b276d949f5e7674259a5466e : []
5dc1fd179a2c6d50f343ea49eda9ab666dd34605 : []
f6c0fabdd700835ea25375cca85ed67197020e50 : []
1c540da5e7baab4be7013d10bd39db8ecd42aea9 : []
f50acfa2af20e09ef96f6c2836f7f958b794936e : [[org.apache.commons.compress.archivers.arj.ArjArchiveInputStream.readLocalFileHeader():UPD,TEST]]
f506f5b2d16892e40689e2bb2392b45034e3150d : [[org.apache.commons.compress.archivers.sevenz.Coders.BCJDecoder.encode(OutputStream,Object):UPD,TEST]]
437cb7492674f63237ec36f9aaddea37b37007d6 : []
2317d0079e555ddce3fc4415635d74b3c58e5bfb : [[org.apache.commons.compress.compressors.pack200.Pack200Utils.normalize(File,File,Map<String, String>):UPD,TEST]]
7cef611e35b5d5cbf66c08b82eb343a694414dcc : []
9d6e4c98d7796d97045913fec2d8da2edaadc7c2 : []
bb1b39a48b950d0f7fdcfc76a791c731fdfcbf4b : []
dfb6fbaa855dd003a52268d9396c6f2be84f6989 : []
ba6447fb42a906888b19c02b4d930b3b995a71e4 : [[org.apache.commons.compress.archivers.sevenz.LZMADecoder.decode(String,InputStream,long,Coder,byte[]):UPD,TEST]]
88299e8dd84b7d0730a8c9c78df1c66e19d321b4 : []
dbda57bb4f1be6c4c5bf4a89928e3bc056b3f5f6 : [[org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream):UPD,TEST], [org.apache.commons.compress.archivers.ArchiveStreamFactory.SIGNATURE_SIZE : int:INS,DROP]]
d1379de16b63b7a93b12633dcf89e394738fff7c : [[org.apache.commons.compress.archivers.ArchiveStreamFactory.DUMP_SIGNATURE_SIZE : int:INS,DROP], [org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream):UPD,TEST]]
f25487f955fdf77da54d827c7ef1763d1389bb8a : [[org.apache.commons.compress.archivers.ArchiveStreamFactory.TAR_HEADER_SIZE : int:INS,DROP], [org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream):UPD,TEST]]
ac85b9e62bc5aabc10593638880db90b0d7722f7 : [[org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(InputStream):UPD,TEST]]
f82ff5845e1472141bd618b8a2f483d603e36b4e : [[org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asLong(byte[]):UPD,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],boolean):UPD,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int):UPD,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[]):UPD,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.asInt(byte[],int,boolean):UPD,TEST]]
3494fa5d692a62a4c114ac72c00eec8482b12a95 : []
3546cb85b0672b3ea73de1c84e1675404449bdb7 : []
6954246080a6def356384c35c3d0a6c7f89eba8d : []
a954595daadfbee766187d5b76537855d91f3a12 : [[org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry):UPD,TEST]]
54c412a9a5bc534b7736699b38f4127f3ed03b84 : [[org.apache.commons.compress.archivers.zip.ZipFile.getUnixSymlink(ZipArchiveEntry):UPD,TEST]]
b51c123061caf2e21f0bb309d698809c5c7c867b : []
a131919449bedf05db5052fbd80194ba4ce3883d : []
d9eed1f5bb968f6cc2ebfe5ae7a1c130b73e6091 : []
2d360ebedce4790c6c1ff4b284b0c36fc5649cf4 : []
335afb15a698463fea0f0f30c271bac22bef6e48 : []
cac82518a765d8c2733963b49b8cd5d5c287d9f0 : []
e6cb7146fa2ce8908636736dae1a60eb220824ee : []
1cb282ef2424e3d511e5d87472df616c6a9797d8 : []
eaca4c733e7ad6ab9736307df29bf3dd43b7bdd5 : []
c20ca719f12bc84b8b9eb5b3d5e7910a76d644b8 : [[org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry():UPD,TEST]]
aaeb06972547f1640e54d3e23134e095b1781dbc : []
cf4c42fc808d28c22bc087fdbe943204120ff0fe : []
bae962cbacf53287af6592ba4078871178085e18 : []
dcecc6e0246a824c1a23e3bf2702cb7d5fb3d22b : []
3d75817db83aaf242a1c0714f010a7afc233b3a6 : []
3339d4a1160e5e6e9ce4ea31f1e30e44da98ed40 : []
95404941ce5dcb10a36faf7ed8bad1844f249e13 : [[org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(CpioArchiveEntry):UPD,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(long,int,int):UPD,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(CpioArchiveEntry,boolean):UPD,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(CpioArchiveEntry):UPD,COMP]]
c95cc044a3e36e2d85f74ae111a37323e1fa59e1 : [[org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI():UPD,TEST], [org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS():UPD,TEST], [org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry():UPD,TEST]]
8d6d7f4db2eca7228dd097a9d8ae497a68f183a0 : [[org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long):UPD,TEST]]
eaf1462f9e1beca1f159a1d732c5e32061265372 : [[org.apache.commons.compress.archivers.sevenz.SevenZOutputFile.writeFolder(DataOutput,SevenZArchiveEntry):UPD,TEST]]
d91174ca0dfb4bc277354186aaa6dbff96b626f5 : [[org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(TarArchiveEntry,String,Map<String, String>,String,byte,String):UPD,TEST]]
3f9d8ac186c85bed4f0772224cfe77fbed94bbf6 : [[org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean):UPD,TEST]]
4edfd224013a09c3c22e7d836a4c394b5d0f55fc : [[org.apache.commons.compress.archivers.zip.ParallelScatterZipCreator.writeTo(ZipArchiveOutputStream):UPD,TEST]]
4e3fc2b8470fd71522051ae9f79d88d164d98e88 : [[org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive():UPD,TEST]]
96d5c83095ac2f4758b24604fe0aef3859b9d518 : [[org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.writeZip64CentralDirectory():UPD,TEST]]
edbf024128391a158b993455547711e347fd188b : [[org.apache.commons.compress.archivers.zip.ZipFile.LFH_OFFSET_FOR_FILENAME_LENGTH : long:UPD,DROP]]
df8c6210b83f2107a0c9da8d4434bc2fe7cc8aa5 : [[org.apache.commons.compress.changes.ChangeSetPerformer.ZipFileIterator.next():UPD,TEST]]
d39d0669931711ce150396750a1cf2d8d0e11161 : [[org.apache.commons.compress.compressors.bzip2.BlockSort.getEclass():UPD,TEST]]
002eb6013a79a805966a8a3b73dfba463ab8a368 : [[org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream.finish():UPD,TEST]]
9166e3996c7af60d3aca227dfb38fca44e9f4ce9 : [[org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream.readNextBlock():UPD,TEST]]
c274002f76e74243aeafddf9377f1ac577d10d20 : []
a65b28e1222eeb1e88b78f612925f8d2bed2efe3 : []
6d9e254b2c736a4408e888c113ae94eab7fc8a66 : []
cdf1d691f5a32041b695717d8594e3d08dffbe3c : []
99317f97cc818e6cc044bbf73793d43afc9269ee : []
e50d19f6760e0761dd850e27592c566182c3dfe8 : []
b47f1377ea6e718ece6184ed1cf693661c263442 : [[org.apache.commons.compress.archivers.tar.TarArchiveEntry.equals(TarArchiveEntry):UPD,DROP]]
facaf054d4ff653997d8d74d23424fc3e5fae123 : [[org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.serialVersionUID : long:UPD,DROP], [org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException.entry : ZipArchiveEntry:UPD,COMP]]
e8242b0f6470d0ab6caccb8f2f2ecbd3b6f37dc7 : [[org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsAsProperties(Object):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.CoderBase.getOptionsFromCoder(Coder,InputStream):UPD,TEST]]
f6048cbc47e6f88f858bf1ce87c6ffdc2f1e9e1c : [[org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsAsProperties(Object):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptions(Object):UPD,TEST], [org.apache.commons.compress.archivers.sevenz.LZMADecoder.getOptionsFromCoder(Coder,InputStream):UPD,TEST]]
0d085efa6116162d469c1be204b2aed8dac59d38 : []
26b669e617d498307bceeb3ccc0b2f095c2f4298 : []
22b75f2a01189b1c2b1dea6cfbcfb9338838b101 : []
d14d9d0ef7d69ce12b76a0a551d97b5784a3efdd : []
ad40f5bbe58bcca71e92ad737d0877c10f62be15 : []
3d15ac144fdfeac0b921cd9130645e3f11aea774 : []
ce13209ed7e4ba9d2fa1a19e3773389b4ba1748d : []
73c87f12fcb6f9b64a4b9aa806af138e473e4aa8 : []
0b7ccf3f645d8feb97a15cf63adcec480595acdf : []
b6b8b823106468cce5356d330f2fa2b61093ea60 : []
b1537829a9c45e06f392de5dd12635ae0342e0ab : []
aa1de082c9e9adf1d8f83f3498477006622f903b : []
ef3adcd4410e593474d87aaa05d6d0d0f901efa5 : []
09abf1535cf58ea53465ec20bf257b67840cfda5 : []
b957530293900acaccb9d2f1661bb9ff13beab38 : []
1249628e077cb12bf524f16d1ee8f6bca00cfb49 : []
e30c9d256429226fb785bf6544376748aaec97db : []
4b23f80d5d700a606174a6c51669d00c781f6541 : [[org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long):UPD,TEST]]
867966d710de925fb2ec420ef7083dd70bdd3ceb : [[org.apache.commons.compress.archivers.tar.TarUtils.parseBinaryLong(byte[],int,int,boolean):UPD,TEST]]
2c30ee1771c2c7910583150d0394d0e5d5f35946 : []
1281d5eaaad33920e7c525dd915019e4c5637483 : []
26e827251f0132aa51e14d4751653e17f5874921 : [[org.apache.commons.compress.archivers.ArchiveInputStream.single : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ArchiveInputStream.read():UPD,TEST], [org.apache.commons.compress.archivers.ArchiveInputStream.SINGLE : byte[]:DEL,DROP]]
6ebc81788ab6531d3f7b289c0cb44933e590e87d : [[org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LAST_MODIFIED_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.fileModeBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lengthBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.LENGTH_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.ID_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.idBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.nameBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.getNextArEntry():UPD,TEST], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.NAME_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.FILE_MODE_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.ar.ArArchiveInputStream.lastModifiedBuf : byte[]:INS,TEST]]
6ddc0a4567c64f24cf93346d99ac6d0537e3fd5b : [[org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry():UPD,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.twoBytesBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.TWO_BYTES_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.sixBytesBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(int):UPD,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.fourBytesBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.FOUR_BYTES_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.SIX_BYTES_BUF : byte[]:DEL,DROP]]
dd2ae574742679f43690b4467092d01ee908434d : [[org.apache.commons.compress.archivers.tar.TarArchiveInputStream.SMALL_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData():UPD,TEST], [org.apache.commons.compress.archivers.tar.TarArchiveInputStream.smallBuf : byte[]:INS,TEST]]
23cfd01ca22520ad4d28060c44727cbb6b9bf904 : [[org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(long):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(long):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.LFH_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.SHORT_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.lfhBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.SKIP_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.TWO_DWORD_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.wordBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.WORD_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.twoDwordBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.shortBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor():UPD,TEST]]
b766a327805499eb3bc51ca8288d23aa11217aad : [[org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory64():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.dwordBbuf : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory32():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.wordBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BBUF : ByteBuffer:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.CFH_BBUF : ByteBuffer:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.cfhBbuf : ByteBuffer:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.WORD_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.dwordBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.tryToLocateSignature(long,long,byte[]):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.startsWithLocalFileHeader():UPD,COMP], [org.apache.commons.compress.archivers.zip.ZipFile.WORD_BBUF : ByteBuffer:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.offsetComparator : Comparator<ZipArchiveEntry>:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.OFFSET_COMPARATOR : Comparator<ZipArchiveEntry>:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.CFH_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.shortBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.getEntriesInPhysicalOrder(String):UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.cfhBuf : byte[]:INS,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.DWORD_BBUF : ByteBuffer:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.populateFromCentralDirectory():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.SHORT_BUF : byte[]:DEL,DROP], [org.apache.commons.compress.archivers.zip.ZipFile.positionAtCentralDirectory():UPD,TEST], [org.apache.commons.compress.archivers.zip.ZipFile.wordBbuf : ByteBuffer:INS,TEST]]
5a8bc68b53deccfe4beb34620991bb62a5d39800 : [[org.apache.commons.compress.compressors.pack200.StreamBridge.stop():UPD,TEST], [org.apache.commons.compress.compressors.pack200.StreamBridge.getInput():UPD,TEST], [org.apache.commons.compress.compressors.pack200.StreamBridge.inputLock : Object:INS,TEST], [org.apache.commons.compress.compressors.pack200.StreamBridge.INPUT_LOCK : Object:DEL,DROP]]
e159387194c106b941df4eb2681fc9619d14b13f : [[org.apache.commons.compress.archivers.dump.TapeInputStream.readRecord():UPD,TEST], [org.apache.commons.compress.archivers.dump.TapeInputStream.peek():UPD,TEST], [org.apache.commons.compress.archivers.dump.TapeInputStream.skip(long):UPD,TEST], [org.apache.commons.compress.archivers.dump.TapeInputStream.read(byte[],int,int):UPD,TEST], [org.apache.commons.compress.archivers.dump.TapeInputStream.resetBlockSize(int,boolean):UPD,TEST], [org.apache.commons.compress.archivers.dump.TapeInputStream.RECORD_SIZE : int:INS,DROP], [org.apache.commons.compress.archivers.dump.TapeInputStream.recordSize : int:DEL,DROP], [org.apache.commons.compress.archivers.dump.TapeInputStream.read():UPD,DROP]]
342df448207c66ee319e73e2f7131b7eb869c297 : [[org.apache.commons.compress.archivers.zip.StreamCompressor.bufferSize : int:DEL,DROP], [org.apache.commons.compress.archivers.zip.StreamCompressor.outputBuffer : byte[]:UPD,TEST], [org.apache.commons.compress.archivers.zip.StreamCompressor.BUFFER_SIZE : int:INS,DROP], [org.apache.commons.compress.archivers.zip.StreamCompressor.readerBuf : byte[]:UPD,TEST]]
ae2b71daae558ffe97f4e2dff83aefca72e9ae11 : [[org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(byte[],int,int):UPD,TEST], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_4_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_7_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_3_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_0_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_2_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_0_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.update(int):UPD,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_5_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_5_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_1_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_3_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_7_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_2_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_4_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_6_START : int:INS,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_6_start : int:DEL,DROP], [org.apache.commons.compress.compressors.snappy.PureJavaCrc32C.T8_1_START : int:INS,DROP]]
204c7ba16db8a909ae200e6af2894e8fb7fca696 : []
93ced5a0a58fb17d6f43dcbe7e82e3413f6dee6e : []
ce9d97e1a1d190c383f3d70a539f926eaa034f16 : [[org.apache.commons.compress.archivers.zip.ScatterZipOutputStream.close():UPD,TEST]]
429ca044a1704c5eec63840ac23e3a55a403f59e : []
cd89a282517280e765982653aa7b1b5586f8da27 : []
e0d32f5ee1dcb36aa059a7e261623125c08dc572 : [[org.apache.commons.compress.archivers.sevenz.LZMADecoder.getDictSize(Object):DEL,DROP]]
345e5f603bcfdd35c22b34b5c605846a6c74f50d : []
1bbbde4abe2b10c3a2f58293ba042d2dff27874f : []
fa3ed1d7897df475ac75536a7abb054daca8d404 : []
50c9b560d09be861cb34bc383f943e81069cce5e : []
215da506dd049825cd6b2d4a286bee816d6612d7 : []
0052d944086689f50bb9344f78b3afaa64fb6b6a : []
438a517cf62dc91181d161a31bc9a0d278317906 : []
21d93f0bbadfa8a1fa460a498c3150c53988c499 : []
bfe7211cd469dbf3208850d81287707e5cbff782 : []
db92cdcbfd821ba9aceab3f2e491853cccb4eb50 : []
6e057d6f5cc71357860713f2f82cd0c9b96ab7c5 : []
ef6c48fede579b0d36a5f02a27daab05de1cdc29 : []
ee79158815e0c3528e269b97c0c13ff810976ee8 : []
7cec6dbc35e1f0ad60664912e5fbea82df8a1795 : []
e00de02cef13995034d0ff8d588d7e3410ce5b37 : []
1af250ff44f8e001863803e6605493d1b596ea44 : []
5af84f7b07471cbc74e0c785a790ce119238490b : []
1487a9b05a04cd60167f005b10c6e6a082368907 : []
c4ea6b862dafe72122b634c429e5d14bb66bafcc : []
6400c2b6f2007e6d177b941b64643e8c02bf7c58 : []
c394e20eb65e8a5ec5240ac9dd8960680ccf972e : []
244e8b804197f91128dd1468b18a6eb938945df6 : []
613c5ae73caeead2ff63c87b3d43c4a6443e32da : []
]
[OUTPUT] Results:
DROP: 613c5ae7 : [b29395d bump release version, use latest release apidocs] README.md
DROP: 244e8b80 : [cd6de3a embrace parent 42] pom.xml
DROP: c394e20e : [cd6de3a embrace parent 42] .travis.yml
DROP: 6400c2b6 : [35891d3 bump version] src/changes/changes.xml
DROP: c4ea6b86 : [35891d3 bump version] pom.xml
DROP: 1487a9b0 : [4543847 fix release notes] RELEASE-NOTES.txt
DROP: 5af84f7b : [8c6c659 prepare RC1 of Commons Compress 1.13] src/site/xdoc/index.xml
DROP: 1af250ff : [8c6c659 prepare RC1 of Commons Compress 1.13] pom.xml
DROP: e00de02c : [e87e838 re-generated various generated pages] src/site/xdoc/mail-lists.xml
DROP: 7cec6dbc : [e87e838 re-generated various generated pages] src/site/xdoc/issue-tracking.xml
DROP: ee791588 : [e87e838 re-generated various generated pages] CONTRIBUTING.md
DROP: ef6c48fe : [592dac7 Updated download page in preparation for 1.13 release.] src/site/xdoc/download_compress.xml
DROP: 6e057d6f : [b9acd7c update release notes for 1.13] RELEASE-NOTES.txt
DROP: db92cdcb : [810883c use jacoco for coveralls report] pom.xml
DROP: bfe7211c : [810883c use jacoco for coveralls report] .travis.yml
DROP: 21d93f0b : [72f048d make JIRA report more useful] pom.xml
DROP: 438a517c : [71df15e use latest version of japicmp] pom.xml
DROP: 0052d944 : [1bc62d6 no reason to specify newVersion in japicmp] pom.xml
DROP: 215da506 : [b3d0c26 use jacoco instead of cobertura, use japicmp] src/site/resources/profile.japicmp
DROP: 50c9b560 : [b3d0c26 use jacoco instead of cobertura, use japicmp] src/site/resources/profile.jacoco
DROP: fa3ed1d7 : [b3d0c26 use jacoco instead of cobertura, use japicmp] pom.xml
DROP: 1bbbde4a : [bf88f6d false positives] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
DROP: 345e5f60 : [bf88f6d false positives] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
DROP: e0d32f5e : [ea35f64 remove unused code] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
DROP: cd89a282 : [c497504 COMPRESS-372 record changes] src/changes/changes.xml
DROP: 429ca044 : [0f4caeb COMPRESS-372 add latest release API doc link] src/site/site.xml
TEST: ce9d97e1 : [85184c3 COMPRESS-377 properly close StreamCompressor] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
DROP: 93ced5a0 : [85184c3 COMPRESS-377 properly close StreamCompressor] src/changes/changes.xml
DROP: 204c7ba1 : [ce6c33a flag false positive] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
TEST: ae2b71da : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java
TEST: 342df448 : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java
TEST: e1593871 : [2b5ba89 rename class constants that look like instance fields] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
TEST: 5a8bc68b : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java
TEST: b766a327 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: 23cfd01c : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
TEST: dd2ae574 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
TEST: 6ddc0a45 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
TEST: 6ebc8178 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
TEST: 26e82725 : [c61c68d rename instance fields that look like class fields] src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java
DROP: 1281d5ea : [5e0980f whitelist byte-arrays deliberately shared in package] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
DROP: 2c30ee17 : [5e0980f whitelist byte-arrays deliberately shared in package] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 867966d7 : [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
TEST: 4b23f80d : [0c73ea7 two more trivial fixes for Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
DROP: e30c9d25 : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
DROP: 1249628e : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
DROP: b9575302 : [a033621 move NOSONAR to first line of multi-line statements] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
DROP: 09abf153 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
DROP: ef3adcd4 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java
DROP: aa1de082 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java
DROP: b1537829 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java
DROP: b6b8b823 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
DROP: 0b7ccf3f : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
DROP: 73c87f12 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java
DROP: ce13209e : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
DROP: 3d15ac14 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java
DROP: ad40f5bb : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java
DROP: d14d9d0e : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
DROP: 22b75f2a : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
DROP: 26b669e6 : [066ee4c suppress warnings on impossible exceptions and exceptions mandated by the public API] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
DROP: 0d085efa : [b03521d whitespace] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
TEST: f6048cbc : [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
TEST: e8242b0f : [bcc204d don't wrap XZ for Java's exception] src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java
COMP: facaf054 : [587430d properly make UnsupportedZipFeatureException Serializable] src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java
DROP: b47f1377 : [5294726 improve null-safety] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
HUNK: e50d19f6 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java
DROP: 99317f97 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java
DROP: cdf1d691 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: 6d9e254b : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
DROP: a65b28e1 : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
DROP: c274002f : [6b75de4 silence Sonar where I disagree with it] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 9166e399 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
TEST: 002eb601 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java
TEST: d39d0669 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java
TEST: df8c6210 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java
DROP: edbf0241 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: 96d5c830 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
TEST: 4e3fc2b8 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
TEST: 4edfd224 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
TEST: 3f9d8ac1 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
TEST: d91174ca : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
TEST: eaf1462f : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
TEST: 8d6d7f4d : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java
TEST: c95cc044 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
TEST: 95404941 : [8705e97 trivial fixes of bugs reported by Sonar] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
DROP: 3339d4a1 : [d5867f1 run rat check on travis] .travis.yml
DROP: 3d75817d : [a172b4b Move apache-rat configuration from site to pluginManagement section, so that it also applies when mvn apache-rat:check is run.] pom.xml
DROP: dcecc6e0 : [726ba6f COMPRESS-367 record Mike Mole's patch] src/changes/changes.xml
DROP: bae962cb : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/resources/invalid-zip.zip
DROP: cf4c42fc : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
DROP: aaeb0697 : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
TEST: c20ca719 : [f015344 COMPRESS-367 Throw ZipException on invalid entry with ZipArchiveInputStream] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
DROP: eaca4c73 : [e0c83d2 add a few more patterns to .gitattributes] .gitattributes
DROP: 1cb282ef : [8de4b8a line-ends] src/site/xdoc/examples.xml
HUNK: e6cb7146 : [8de4b8a line-ends] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: cac82518 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java
DROP: 335afb15 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java
DROP: 2d360ebe : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
DROP: d9eed1f5 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java
DROP: a1319194 : [459314a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/archivers/ArTestCase.java
DROP: b51c1230 : [ffe346a [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStreamTest.java
TEST: 54c412a9 : [6c52318 Don't need local var.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: a954595d : [c3d2cec [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: 69542460 : [05415c0 Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java
DROP: 3546cb85 : [7b7f490 Formatting.] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
DROP: 3494fa5d : [eda3a02 Typo.] src/site/xdoc/examples.xml
TEST: f82ff584 : [5c9661c param name 'input' should not hide field.] src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
TEST: ac85b9e6 : [f1a5821 Better local variable name.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
TEST: f25487f9 : [a428e42 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
TEST: d1379de1 : [03239b0 Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
TEST: dbda57bb : [7145b4a Refactor magic number.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
DROP: 88299e8d : [a214d4c Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
TEST: ba6447fb : [3fc9325 Unnecessary cast from int to int.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
DROP: dfb6fbaa : [8954230 Format nit.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
DROP: bb1b39a4 : [35523dd Fix Javadoc warning.] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
DROP: 9d6e4c98 : [703715e [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
DROP: 7cef611e : [3fdcafd [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java
TEST: 2317d007 : [b9153ca [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java
DROP: 437cb749 : [2be44aa Add @SuppressWarnings(resource).] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
TEST: f506f5b2 : [4d55183 In-line local variable.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
TEST: f50acfa2 : [9f468f1 [COMPRESS-362] Bullet-proof code using try-with-resources statements] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
DROP: 1c540da5 : [fe5ffa6 Document new service loader feature.] src/site/xdoc/index.xml
DROP: f6c0fabd : [fe5ffa6 Document new service loader feature.] src/site/xdoc/examples.xml
DROP: 5dc1fd17 : [735ba6d Document the 'current' (next) release is 1.13 and requires Java 7.] src/site/xdoc/index.xml
DROP: e85ab262 : [1686712 Rename section for 1.13.] src/site/xdoc/index.xml
DROP: 52255beb : [332b7a3 Reverse order of what's new subsections: the latest comes first.] src/site/xdoc/index.xml
DROP: 62ca5b2f : [398c102 Link to 1.13 Javadocs.] src/site/site.xml
DROP: a90b397d : [427d742 Update maven-pmd-plugin from 3.6 to 3.7.] pom.xml
DROP: df2a0069 : [c55c6c8 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java
DROP: 01204ddc : [d4c3261 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java
DROP: 9501525c : [696dbe9 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java
TEST: 5e827a76 : [dd9f895 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
DROP: 068495b2 : [7e69189 Fix Javadoc 8 errors.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java
DROP: 5683f4d2 : [fa4f029 Formatting.] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
DROP: 328cd2c2 : [c7c2fe4 Update findbugs-maven-plugin from 3.0.3 to 3.0.4.] pom.xml
TEST: 890f8fcf : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java
TEST: 8d89dca5 : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
TEST: 2f09bbdc : [7757914 Refactor code into a reusable output stream.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
DROP: 0439e56d : [99eb4cb Remove unused imports.] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
DROP: 4cb7917d : [99eb4cb Remove unused imports.] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java
DROP: fec75d1b : [99eb4cb Remove unused imports.] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
DROP: 520f52a0 : [d5f3062 the new ServiceLoader stuff is worth a special notice] src/site/xdoc/index.xml
DROP: 9e321058 : [66726ea COMPRESS-375 record changes made by Plamen] src/changes/changes.xml
DROP: 201c2566 : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequestSupplier.java
DROP: a94bb274 : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java
TEST: f433dd5d : [fdbfa5d COMPRESS-375 Allow the deferred creation of  for parallel zips] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
TEST: 9906de5c : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java
DROP: 78239032 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
DROP: 1d79fa9a : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfigurationTest.java
DROP: 18e604ab : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java
DROP: c8dccad9 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/limitations.xml
DROP: 6b26db1b : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/index.xml
DROP: 2602bc53 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/site/xdoc/examples.xml
DROP: 18cfc4f0 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
DROP: 47968788 : [9238eab COMPRESS-374 support writing LZMA in 7z archives] src/changes/changes.xml
DROP: 9058043d : [e8cee81 copy paste error] src/changes/changes.xml
TEST: e7f1444a : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.java
DROP: 9f3e4ddb : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java
DROP: 01dd4a37 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/limitations.xml
DROP: 96f126ad : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/index.xml
DROP: ebc96f8e : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/site/xdoc/examples.xml
TEST: 70c16590 : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
DROP: cb41d57d : [7117039 COMPRESS-373 support for writing legacy lzma streams] src/changes/changes.xml
DROP: 5ca95e56 : [1a31dec upgrade XZ for Java dependency] pom.xml
DROP: 6913417a : [c1e7372 CONTRIBUTING.md: replace references to commons-text with references to commons-compress] CONTRIBUTING.md
DROP: 275e5792 : [cf1362e add CONTRIBUTING.md to fix link in README.md] CONTRIBUTING.md
DROP: 2d030984 : [5dab55a README.md: fix javadoc link] README.md
DROP: 65021b5c : [0b04d80 README.md: use latest released version in dependency declaration example] README.md
DROP: 6ce41fee : [14441db README.md: fix jira link] README.md
DROP: 5348c008 : [7c93eb1 Update README.md.] README.md
DROP: 873f4790 : [a99b6bb Add badges.] README.md
DROP: 96d2829c : [e126bf9 Add README.md as generated by 'mvn commons:readme-md'] README.md
DROP: aa4dd8f8 : [db8bdf6 Enable TravisCI.] .travis.yml
DROP: eca66f08 : [db8bdf6 Enable TravisCI.] pom.xml
DROP: 7bc0d58c : [350f01c [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java
DROP: e7e1e35c : [350f01c [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java
COMP: a9a0575a : [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java
TEST: 1163b497 : [350f01c [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
DROP: 59bd1515 : [545c399 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java
DROP: c6e7f564 : [22edc12 [COMPRESS-369]] src/test/resources/META-INF/services/org.apache.commons.compress.archivers.ArchiveStreamProvider
DROP: 7b222004 : [22edc12 [COMPRESS-369]] src/test/java/org/apache/commons/compress/archivers/TestArchiveStreamProvider.java
DROP: d9b9f3ba : [22edc12 [COMPRESS-369]] src/test/java/org/apache/commons/compress/archivers/ArchiveServiceLoaderTest.java
COMP: 9696cbcc : [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamProvider.java
TEST: 61567296 : [22edc12 [COMPRESS-369]] src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
DROP: a9c16a4e : [22edc12 [COMPRESS-369]] src/changes/changes.xml
DROP: 00d8a6cc : [a61a952 Better assert failure message.] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
DROP: 6edbbad8 : [c4a5b14 Add org.apache.commons.compress.archivers.ArchiveStreamFactoryTest.TestData.toString()] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
DROP: 028a11ba : [c49ccc9 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
HUNK: 166a7e9d : [263513a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
DROP: f452b25b : [f98b32e [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java
TEST: 5be44c82 : [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Sets.java
TEST: 0c2b6bd7 : [adf0f2a [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
DROP: a208a81a : [f965bc2 [COMPRESS-368]] src/test/resources/META-INF/services/org.apache.commons.compress.compressors.CompressorStreamProvider
DROP: f0dbb665 : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java
DROP: 42b2edbd : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorServiceLoaderTest.java
TEST: bc8db5f6 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/ServiceLoaderIterator.java
TEST: 9f91f5a9 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Lists.java
TEST: c1b081d3 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/utils/Iterators.java
COMP: 184cd142 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java
DROP: 85b7e6c3 : [f965bc2 [COMPRESS-368]] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java
TEST: 723a4921 : [f965bc2 [COMPRESS-368]] src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
DROP: baa76c5f : [f965bc2 [COMPRESS-368]] src/changes/changes.xml
TEST: 1bc9a1d1 : [f538f38 avoid overflow when resizing] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
DROP: abb8a68d : [46f57bf properly return -1 from read on EOF] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java
TEST: ac883128 : [46f57bf properly return -1 from read on EOF] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
DROP: 741de3b7 : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
DROP: d6038d25 : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/site/xdoc/examples.xml
TEST: c4e0997c : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
TEST: faf5faf9 : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: d81ca039 : [4221600 COMPRESS-327 convenience constructors and more javadocs] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
DROP: f367cf13 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
DROP: ed868d74 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
DROP: d56990ef : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/site/xdoc/zip.xml
DROP: 2a3b06fc : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/site/xdoc/examples.xml
TEST: d5e558f4 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: b09ce165 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
DROP: e7194681 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
TEST: d1ea3af8 : [12d9048 provide pointers to SeekableInMemoryByteChannel in several places] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
DROP: be62d0d0 : [d8d9294 class is no longer used] src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedRandomAccessFileInputStream.java
DROP: 8ff820e5 : [3d509a0 array is exposed intentionally] findbugs-exclude-filter.xml
DROP: 04c24c2b : [652343f fix eol-style] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java
DROP: ced329a1 : [e958122 missing license headers] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java
DROP: bf565fbd : [e958122 missing license headers] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java
DROP: 354cac8e : [72b1789 COMPRESS-327 tests and tweaks for SeekableInMemoryByteChannel] src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java
TEST: 8cdd8da6 : [72b1789 COMPRESS-327 tests and tweaks for SeekableInMemoryByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
TEST: e4b7a23d : [a2976b6 modify SeekableInMemoryByteChannel based on feedback by Maciej and Bernd Eckenfels] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
DROP: bbca65c1 : [d9fe818 also compare file contents, patch by Maciej N] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
HUNK: 2ca52001 : [1e0957d typo] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: ba08a267 : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
DROP: 64f10bf8 : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
TEST: cef686c5 : [09edbd8 COMPRESS-327 write support for in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
TEST: ad848b76 : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java
DROP: c6d5f625 : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
DROP: 28f506e2 : [e926d99 COMPRESS-327 read-only in memory SeekableByteChannel] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
TEST: 3123a167 : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: 4b910bbf : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
TEST: 2d4f3cc3 : [6a5014e COMPRESS-327 optimize a little] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
DROP: 5961b176 : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/zip.xml
DROP: 571a8645 : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/limitations.xml
DROP: 9ec1adaa : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/index.xml
DROP: b9a1685a : [57511f5 COMPRESS-327 update documentation] src/site/xdoc/examples.xml
DROP: 13b83f07 : [57511f5 COMPRESS-327 update documentation] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
DROP: 72ffcf8d : [57511f5 COMPRESS-327 update documentation] src/changes/changes.xml
TEST: fa3cf19d : [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
TEST: 42a2851e : [7e35f57 COMPRESS-327 write zip archives to arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java
HUNK: 074ebd26 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: 46388b65 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
DROP: a96ed453 : [dec527d add @since markers] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
HUNK: 44a9739a : [cd235a8 remove reference to RandomAccessFile] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
TEST: 1f91950a : [d8fc27b COMPRESS-327 read zip archives from arbitrary SeekableByteChannels] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: 04ac4efb : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java
TEST: 0b5ebac4 : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/utils/IOUtils.java
TEST: 711ed657 : [94197a7 move channel/ByteBuffer readFully to IOUtils] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 5f623f49 : [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/BoundedSeekableByteChannelInputStream.java
TEST: 194a4eff : [daeb074 COMPRESS-327 read 7z archives from arbitrary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 170fc653 : [87f0f2e COMPRESS-327 write 7z archives to arbirary SeekableByteChannels - needs optimization] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
DROP: 2f72fa3a : [9e32a2c record fix for COMPRESS-364] src/changes/changes.xml
DROP: cb335038 : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/test/resources/archive_with_bytes_after_data.zip
DROP: ccc59242 : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
TEST: 58eaa6af : [658812c ZipArchiveInputStream.closeEntry fails to advance] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
DROP: c959ea31 : [f010260 COMPRESS-366 clarify TarArchiveEntry javadocs] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java
DROP: f6590254 : [f010260 COMPRESS-366 clarify TarArchiveEntry javadocs] src/changes/changes.xml
DROP: 492b8da0 : [7ee18aa Use try with resources.] src/test/java/org/apache/commons/compress/utils/CountingStreamTest.java
DROP: 7c7ed9ff : [e71827b Use try with resources.] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java
DROP: b59f2079 : [159d9c6 Avoid unclosed stream warnings] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java
DROP: a1a5bcd1 : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java
TEST: f8cba421 : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/main/java/org/apache/commons/compress/utils/BitInputStream.java
DROP: 99af473a : [52dd590 COMPRESS-363 properly handle overflow inside BitInputStream] src/changes/changes.xml
DROP: 3329ae10 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java
DROP: e9bb47f2 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java
DROP: 36dab520 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java
DROP: d26ef2eb : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java
DROP: 37bca22a : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/ZTestCase.java
DROP: 60ef0b18 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/XZTestCase.java
DROP: ae3c6a31 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java
DROP: 68977c90 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java
DROP: 3847673a : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java
DROP: 1003619e : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java
DROP: 186efdd3 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java
DROP: 7a3d581c : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java
DROP: 1cc4e4c0 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
DROP: 7addf1c4 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java
DROP: 44a79c03 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/zip/Lister.java
DROP: 0871fdbe : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
DROP: b4aa0f52 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
DROP: 2c677cf9 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
DROP: 266cd6bb : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java
DROP: 0941ea32 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
DROP: 3436f0d9 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java
DROP: c4c8baea : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java
DROP: fdc2c9ca : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
DROP: 2b017048 : [32c30f6 More java7 language features] src/test/java/org/apache/commons/compress/AbstractTestCase.java
TEST: c6b04799 : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
TEST: be430dbc : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
TEST: 84d9b1e0 : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: d6616169 : [32c30f6 More java7 language features] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
DROP: ebf43450 : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java
DROP: 82faff28 : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
DROP: eb74e09d : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
DROP: 28700c7b : [77388c8 Add final modifier to local variables.] src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java
TEST: 35d7cf64 : [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
TEST: 49468d02 : [77388c8 Add final modifier to local variables.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
TEST: ca32aa03 : [4865194 Add final modifier to method parameters.] src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
DROP: 08cc1480 : [4865194 Add final modifier to method parameters.] src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyDialect.java
DROP: aa4fca09 : [7f110cf Javadoc.] src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java
DROP: 9c43972e : [0714e10 Statement unnecessarily nested within else clause.] src/main/java/org/apache/commons/compress/archivers/Lister.java
DROP: 03549fc9 : [dee8220 Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java
DROP: 76921382 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java
DROP: f5e289e1 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java
DROP: 64e470e8 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
DROP: 6dd2bd9c : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java
DROP: 66ac7288 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java
DROP: d82930f1 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java
DROP: a5c465aa : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java
DROP: 57309a44 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java
DROP: e0fd00f5 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java
DROP: 78cd844a : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java
DROP: 6b8971a6 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/LongPathTest.java
DROP: 6e2ae3a4 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java
DROP: e6fc334e : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java
DROP: 155d9cd8 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/ArchiveReadTest.java
DROP: 33568e73 : [e2d348e Remove Redundant specification of type (Java 7).] src/test/java/org/apache/commons/compress/AbstractTestCase.java
TEST: a7c72d94 : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java
TEST: 95dbbf46 : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
TEST: e7787a0d : [d5aa050 [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 27444e47 : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
DROP: db08ad89 : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java
DROP: 7f37b235 : [cd9d5ee [COMPRESS-362] Bullet-proof code using try-with-resources statements.] src/main/java/org/apache/commons/compress/archivers/Lister.java
DROP: d9b4556d : [f52ecf8 Format nits.] src/main/java/org/apache/commons/compress/archivers/Lister.java
DROP: c370d30f : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java
TEST: 9a53c1f7 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java
DROP: 6c3c9acf : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/lzma/LZMAUtils.java
DROP: 83d3c209 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java
DROP: 68e02100 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java
TEST: b6ac0311 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java
TEST: 2386b3a2 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java
TEST: b32763a4 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java
TEST: 02e8cb70 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/changes/ChangeSet.java
DROP: f4e3e2d5 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java
TEST: 92c4cd18 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
DROP: 48c6733c : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java
TEST: fbf2e8e8 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java
TEST: 2e280cea : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
TEST: 00714581 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java
TEST: 5891ece2 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java
TEST: b0687389 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java
DROP: 05c6ddf4 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java
TEST: d86d1b2c : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
TEST: 0f89c1b0 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
TEST: 70a15b4a : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
TEST: be09fdf4 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java
TEST: bcdab561 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
TEST: 99f9a4d3 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java
TEST: 601a5c09 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java
TEST: bbb405da : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
DROP: f5abff14 : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java
TEST: f680f27b : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
TEST: b80873ae : [b3c6bf7 Remove Redundant specification of type (Java 7).] src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java
DROP: 3a920ada : [f5a9851 [COMPRESS-360] Update Java requirement from 6 to 7.] src/changes/changes.xml
DROP: 4c88f2d9 : [f8e0994 [COMPRESS-360] Update Java requirement from 6 to 7.] src/changes/changes.xml
DROP: ae4fa4bc : [f8e0994 [COMPRESS-360] Update Java requirement from 6 to 7.] pom.xml
DROP: 6eacaf52 : [6c8345b Tests for [COMPRESS-359] Pack200 is broken.] src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java
DROP: 313beb44 : [9e6f0b3 commons-parent 39 -> 40.] pom.xml
DROP: c71e6377 : [9a677fb Bump to next development version] src/changes/changes.xml
DROP: 4d38c3b1 : [9a677fb Bump to next development version] pom.xml
DROP: ea272458 : [9a677fb Bump to next development version] RELEASE-NOTES.txt

[STATS] ************** Stats **************
[STATS] total.time : 19.454
[STATS] main.algo : 3.974
[STATS] insert.edge : 0.0
[STATS] hunk.deps.time : 3.997
[STATS] extract.time : 0.0
[STATS] call.graph.time : 1.363
[STATS] tests.time : 2.621
[STATS] comp.count : 4
[STATS] hunk.count : 6
[STATS] test.count : 112
[STATS] hunk.deps.set : 6
[STATS] drop.count : 243
[STATS] ast.line.count : 7213
[STATS] test.deps : 2166
[STATS] comp.deps : 2885
[STATS] reduction.hunk : 66.57534246575342
[STATS] reduction.rate : 68.21917808219177
[STATS] ***********************************
